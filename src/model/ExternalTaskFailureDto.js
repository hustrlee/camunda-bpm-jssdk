/**
 * Camunda BPM REST API
 * OpenApi Spec for Camunda BPM REST API.
 *
 * The version of the OpenAPI document: 7.14.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ExternalTaskFailureDto model module.
 * @module model/ExternalTaskFailureDto
 * @version 7.14.0
 */
class ExternalTaskFailureDto {
    /**
     * Constructs a new <code>ExternalTaskFailureDto</code>.
     * @alias module:model/ExternalTaskFailureDto
     */
    constructor() { 
        
        ExternalTaskFailureDto.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ExternalTaskFailureDto</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ExternalTaskFailureDto} obj Optional instance to populate.
     * @return {module:model/ExternalTaskFailureDto} The populated <code>ExternalTaskFailureDto</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ExternalTaskFailureDto();

            if (data.hasOwnProperty('workerId')) {
                obj['workerId'] = ApiClient.convertToType(data['workerId'], 'String');
            }
            if (data.hasOwnProperty('errorMessage')) {
                obj['errorMessage'] = ApiClient.convertToType(data['errorMessage'], 'String');
            }
            if (data.hasOwnProperty('errorDetails')) {
                obj['errorDetails'] = ApiClient.convertToType(data['errorDetails'], 'String');
            }
            if (data.hasOwnProperty('retries')) {
                obj['retries'] = ApiClient.convertToType(data['retries'], 'Number');
            }
            if (data.hasOwnProperty('retryTimeout')) {
                obj['retryTimeout'] = ApiClient.convertToType(data['retryTimeout'], 'Number');
            }
        }
        return obj;
    }


}

/**
 * The id of the worker that reports the failure. Must match the id of the worker who has most recently locked the task.
 * @member {String} workerId
 */
ExternalTaskFailureDto.prototype['workerId'] = undefined;

/**
 * An message indicating the reason of the failure.
 * @member {String} errorMessage
 */
ExternalTaskFailureDto.prototype['errorMessage'] = undefined;

/**
 * A detailed error description.
 * @member {String} errorDetails
 */
ExternalTaskFailureDto.prototype['errorDetails'] = undefined;

/**
 * A number of how often the task should be retried. Must be >= 0. If this is 0, an incident is created and the task cannot be fetched anymore unless the retries are increased again. The incident's message is set to the `errorMessage` parameter.
 * @member {Number} retries
 */
ExternalTaskFailureDto.prototype['retries'] = undefined;

/**
 * A timeout in milliseconds before the external task becomes available again for fetching. Must be >= 0.
 * @member {Number} retryTimeout
 */
ExternalTaskFailureDto.prototype['retryTimeout'] = undefined;






export default ExternalTaskFailureDto;

