/**
 * Camunda BPM REST API
 * OpenApi Spec for Camunda BPM REST API.
 *
 * The version of the OpenAPI document: 7.14.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The VariableValueDto model module.
 * @module model/VariableValueDto
 * @version 7.14.0
 */
class VariableValueDto {
    /**
     * Constructs a new <code>VariableValueDto</code>.
     * @alias module:model/VariableValueDto
     */
    constructor() { 
        
        VariableValueDto.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>VariableValueDto</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/VariableValueDto} obj Optional instance to populate.
     * @return {module:model/VariableValueDto} The populated <code>VariableValueDto</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new VariableValueDto();

            if (data.hasOwnProperty('value')) {
                obj['value'] = ApiClient.convertToType(data['value'], Object);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('valueInfo')) {
                obj['valueInfo'] = ApiClient.convertToType(data['valueInfo'], {'String': Object});
            }
        }
        return obj;
    }


}

/**
 * The variable's value. Value differs depending on the variable's type and on the deserializeValues parameter.
 * @member {Object} value
 */
VariableValueDto.prototype['value'] = undefined;

/**
 * The value type of the variable.
 * @member {String} type
 */
VariableValueDto.prototype['type'] = undefined;

/**
 * A JSON object containing additional, value-type-dependent properties. For serialized variables of type Object, the following properties can be provided:  * `objectTypeName`: A string representation of the object's type name. * `serializationDataFormat`: The serialization format used to store the variable.  For serialized variables of type File, the following properties can be provided:  * `filename`: The name of the file. This is not the variable name but the name that will be used when downloading the file again. * `mimetype`: The MIME type of the file that is being uploaded. * `encoding`: The encoding of the file that is being uploaded.
 * @member {Object.<String, Object>} valueInfo
 */
VariableValueDto.prototype['valueInfo'] = undefined;






export default VariableValueDto;

