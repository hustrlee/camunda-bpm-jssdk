/**
 * Camunda BPM REST API
 * OpenApi Spec for Camunda BPM REST API.
 *
 * The version of the OpenAPI document: 7.14.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The FetchExternalTaskTopicDto model module.
 * @module model/FetchExternalTaskTopicDto
 * @version 7.14.0
 */
class FetchExternalTaskTopicDto {
    /**
     * Constructs a new <code>FetchExternalTaskTopicDto</code>.
     * @alias module:model/FetchExternalTaskTopicDto
     * @param topicName {String} **Mandatory.** The topic's name.
     * @param lockDuration {Number} **Mandatory.** The duration to lock the external tasks for in milliseconds.
     */
    constructor(topicName, lockDuration) { 
        
        FetchExternalTaskTopicDto.initialize(this, topicName, lockDuration);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, topicName, lockDuration) { 
        obj['topicName'] = topicName;
        obj['lockDuration'] = lockDuration;
    }

    /**
     * Constructs a <code>FetchExternalTaskTopicDto</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FetchExternalTaskTopicDto} obj Optional instance to populate.
     * @return {module:model/FetchExternalTaskTopicDto} The populated <code>FetchExternalTaskTopicDto</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FetchExternalTaskTopicDto();

            if (data.hasOwnProperty('topicName')) {
                obj['topicName'] = ApiClient.convertToType(data['topicName'], 'String');
            }
            if (data.hasOwnProperty('lockDuration')) {
                obj['lockDuration'] = ApiClient.convertToType(data['lockDuration'], 'Number');
            }
            if (data.hasOwnProperty('variables')) {
                obj['variables'] = ApiClient.convertToType(data['variables'], ['String']);
            }
            if (data.hasOwnProperty('localVariables')) {
                obj['localVariables'] = ApiClient.convertToType(data['localVariables'], 'Boolean');
            }
            if (data.hasOwnProperty('businessKey')) {
                obj['businessKey'] = ApiClient.convertToType(data['businessKey'], 'String');
            }
            if (data.hasOwnProperty('processDefinitionId')) {
                obj['processDefinitionId'] = ApiClient.convertToType(data['processDefinitionId'], 'String');
            }
            if (data.hasOwnProperty('processDefinitionIdIn')) {
                obj['processDefinitionIdIn'] = ApiClient.convertToType(data['processDefinitionIdIn'], ['String']);
            }
            if (data.hasOwnProperty('processDefinitionKey')) {
                obj['processDefinitionKey'] = ApiClient.convertToType(data['processDefinitionKey'], 'String');
            }
            if (data.hasOwnProperty('processDefinitionKeyIn')) {
                obj['processDefinitionKeyIn'] = ApiClient.convertToType(data['processDefinitionKeyIn'], ['String']);
            }
            if (data.hasOwnProperty('processDefinitionVersionTag')) {
                obj['processDefinitionVersionTag'] = ApiClient.convertToType(data['processDefinitionVersionTag'], 'String');
            }
            if (data.hasOwnProperty('withoutTenantId')) {
                obj['withoutTenantId'] = ApiClient.convertToType(data['withoutTenantId'], 'Boolean');
            }
            if (data.hasOwnProperty('tenantIdIn')) {
                obj['tenantIdIn'] = ApiClient.convertToType(data['tenantIdIn'], ['String']);
            }
            if (data.hasOwnProperty('processVariables')) {
                obj['processVariables'] = ApiClient.convertToType(data['processVariables'], {'String': Object});
            }
            if (data.hasOwnProperty('deserializeValues')) {
                obj['deserializeValues'] = ApiClient.convertToType(data['deserializeValues'], 'Boolean');
            }
            if (data.hasOwnProperty('includeExtensionProperties')) {
                obj['includeExtensionProperties'] = ApiClient.convertToType(data['includeExtensionProperties'], 'Boolean');
            }
        }
        return obj;
    }


}

/**
 * **Mandatory.** The topic's name.
 * @member {String} topicName
 */
FetchExternalTaskTopicDto.prototype['topicName'] = undefined;

/**
 * **Mandatory.** The duration to lock the external tasks for in milliseconds.
 * @member {Number} lockDuration
 */
FetchExternalTaskTopicDto.prototype['lockDuration'] = undefined;

/**
 * A JSON array of `String` values that represent variable names. For each result task belonging to this topic, the given variables are returned as well if they are accessible from the external task's execution. If not provided - all variables will be fetched.
 * @member {Array.<String>} variables
 */
FetchExternalTaskTopicDto.prototype['variables'] = undefined;

/**
 * If `true` only local variables will be fetched.
 * @member {Boolean} localVariables
 * @default false
 */
FetchExternalTaskTopicDto.prototype['localVariables'] = false;

/**
 * A `String` value which enables the filtering of tasks based on process instance business key.
 * @member {String} businessKey
 */
FetchExternalTaskTopicDto.prototype['businessKey'] = undefined;

/**
 * Filter tasks based on process definition id.
 * @member {String} processDefinitionId
 */
FetchExternalTaskTopicDto.prototype['processDefinitionId'] = undefined;

/**
 * Filter tasks based on process definition ids.
 * @member {Array.<String>} processDefinitionIdIn
 */
FetchExternalTaskTopicDto.prototype['processDefinitionIdIn'] = undefined;

/**
 * Filter tasks based on process definition key.
 * @member {String} processDefinitionKey
 */
FetchExternalTaskTopicDto.prototype['processDefinitionKey'] = undefined;

/**
 * Filter tasks based on process definition keys.
 * @member {Array.<String>} processDefinitionKeyIn
 */
FetchExternalTaskTopicDto.prototype['processDefinitionKeyIn'] = undefined;

/**
 * Filter tasks based on process definition version tag.
 * @member {String} processDefinitionVersionTag
 */
FetchExternalTaskTopicDto.prototype['processDefinitionVersionTag'] = undefined;

/**
 * Filter tasks without tenant id.
 * @member {Boolean} withoutTenantId
 * @default false
 */
FetchExternalTaskTopicDto.prototype['withoutTenantId'] = false;

/**
 * Filter tasks based on tenant ids.
 * @member {Array.<String>} tenantIdIn
 */
FetchExternalTaskTopicDto.prototype['tenantIdIn'] = undefined;

/**
 * A `JSON` object used for filtering tasks based on process instance variable values. A property name of the object represents a process variable name, while the property value represents the process variable value to filter tasks by.
 * @member {Object.<String, Object>} processVariables
 */
FetchExternalTaskTopicDto.prototype['processVariables'] = undefined;

/**
 * Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default `false`).  If set to `true`, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson's](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API's classpath.  If set to `false`, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.
 * @member {Boolean} deserializeValues
 * @default false
 */
FetchExternalTaskTopicDto.prototype['deserializeValues'] = false;

/**
 * Determines whether custom extension properties defined in the BPMN activity of the external task (e.g. via the Extensions tab in the Camunda modeler) should be included in the response. Default: false
 * @member {Boolean} includeExtensionProperties
 * @default false
 */
FetchExternalTaskTopicDto.prototype['includeExtensionProperties'] = false;






export default FetchExternalTaskTopicDto;

