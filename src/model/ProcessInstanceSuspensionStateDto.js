/**
 * Camunda BPM REST API
 * OpenApi Spec for Camunda BPM REST API.
 *
 * The version of the OpenAPI document: 7.14.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import HistoricProcessInstanceQueryDto from './HistoricProcessInstanceQueryDto';
import ProcessInstanceQueryDto from './ProcessInstanceQueryDto';

/**
 * The ProcessInstanceSuspensionStateDto model module.
 * @module model/ProcessInstanceSuspensionStateDto
 * @version 7.14.0
 */
class ProcessInstanceSuspensionStateDto {
    /**
     * Constructs a new <code>ProcessInstanceSuspensionStateDto</code>.
     * @alias module:model/ProcessInstanceSuspensionStateDto
     */
    constructor() { 
        
        ProcessInstanceSuspensionStateDto.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ProcessInstanceSuspensionStateDto</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ProcessInstanceSuspensionStateDto} obj Optional instance to populate.
     * @return {module:model/ProcessInstanceSuspensionStateDto} The populated <code>ProcessInstanceSuspensionStateDto</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ProcessInstanceSuspensionStateDto();

            if (data.hasOwnProperty('suspended')) {
                obj['suspended'] = ApiClient.convertToType(data['suspended'], 'Boolean');
            }
            if (data.hasOwnProperty('processDefinitionId')) {
                obj['processDefinitionId'] = ApiClient.convertToType(data['processDefinitionId'], 'String');
            }
            if (data.hasOwnProperty('processDefinitionKey')) {
                obj['processDefinitionKey'] = ApiClient.convertToType(data['processDefinitionKey'], 'String');
            }
            if (data.hasOwnProperty('processDefinitionTenantId')) {
                obj['processDefinitionTenantId'] = ApiClient.convertToType(data['processDefinitionTenantId'], 'String');
            }
            if (data.hasOwnProperty('processDefinitionWithoutTenantId')) {
                obj['processDefinitionWithoutTenantId'] = ApiClient.convertToType(data['processDefinitionWithoutTenantId'], 'Boolean');
            }
            if (data.hasOwnProperty('processInstanceIds')) {
                obj['processInstanceIds'] = ApiClient.convertToType(data['processInstanceIds'], ['String']);
            }
            if (data.hasOwnProperty('processInstanceQuery')) {
                obj['processInstanceQuery'] = ProcessInstanceQueryDto.constructFromObject(data['processInstanceQuery']);
            }
            if (data.hasOwnProperty('historicProcessInstanceQuery')) {
                obj['historicProcessInstanceQuery'] = HistoricProcessInstanceQueryDto.constructFromObject(data['historicProcessInstanceQuery']);
            }
        }
        return obj;
    }


}

/**
 * A `Boolean` value which indicates whether to activate or suspend a given process instance. When the value is set to `true`, the given process instance will be suspended and when the value is set to `false`, the given process instance will be activated.
 * @member {Boolean} suspended
 */
ProcessInstanceSuspensionStateDto.prototype['suspended'] = undefined;

/**
 * The process definition id of the process instances to activate or suspend.  **Note**: This parameter can be used only with combination of `suspended`.
 * @member {String} processDefinitionId
 */
ProcessInstanceSuspensionStateDto.prototype['processDefinitionId'] = undefined;

/**
 * The process definition key of the process instances to activate or suspend.  **Note**: This parameter can be used only with combination of `suspended`, `processDefinitionTenantId`, and `processDefinitionWithoutTenantId`.
 * @member {String} processDefinitionKey
 */
ProcessInstanceSuspensionStateDto.prototype['processDefinitionKey'] = undefined;

/**
 * Only activate or suspend process instances of a process definition which belongs to a tenant with the given id.  **Note**: This parameter can be used only with combination of `suspended`, `processDefinitionKey`, and `processDefinitionWithoutTenantId`.
 * @member {String} processDefinitionTenantId
 */
ProcessInstanceSuspensionStateDto.prototype['processDefinitionTenantId'] = undefined;

/**
 * Only activate or suspend process instances of a process definition which belongs to no tenant. Value may only be true, as false is the default behavior.  **Note**: This parameter can be used only with combination of `suspended`, `processDefinitionKey`, and `processDefinitionTenantId`.
 * @member {Boolean} processDefinitionWithoutTenantId
 */
ProcessInstanceSuspensionStateDto.prototype['processDefinitionWithoutTenantId'] = undefined;

/**
 * A list of process instance ids which defines a group of process instances which will be activated or suspended by the operation.  **Note**: This parameter can be used only with combination of `suspended`, `processInstanceQuery`, and `historicProcessInstanceQuery`.
 * @member {Array.<String>} processInstanceIds
 */
ProcessInstanceSuspensionStateDto.prototype['processInstanceIds'] = undefined;

/**
 * @member {module:model/ProcessInstanceQueryDto} processInstanceQuery
 */
ProcessInstanceSuspensionStateDto.prototype['processInstanceQuery'] = undefined;

/**
 * @member {module:model/HistoricProcessInstanceQueryDto} historicProcessInstanceQuery
 */
ProcessInstanceSuspensionStateDto.prototype['historicProcessInstanceQuery'] = undefined;






export default ProcessInstanceSuspensionStateDto;

