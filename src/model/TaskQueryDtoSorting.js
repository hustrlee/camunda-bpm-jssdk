/**
 * Camunda BPM REST API
 * OpenApi Spec for Camunda BPM REST API.
 *
 * The version of the OpenAPI document: 7.14.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import SortTaskQueryParametersDto from './SortTaskQueryParametersDto';

/**
 * The TaskQueryDtoSorting model module.
 * @module model/TaskQueryDtoSorting
 * @version 7.14.0
 */
class TaskQueryDtoSorting {
    /**
     * Constructs a new <code>TaskQueryDtoSorting</code>.
     * @alias module:model/TaskQueryDtoSorting
     */
    constructor() { 
        
        TaskQueryDtoSorting.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TaskQueryDtoSorting</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TaskQueryDtoSorting} obj Optional instance to populate.
     * @return {module:model/TaskQueryDtoSorting} The populated <code>TaskQueryDtoSorting</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TaskQueryDtoSorting();

            if (data.hasOwnProperty('sortBy')) {
                obj['sortBy'] = ApiClient.convertToType(data['sortBy'], 'String');
            }
            if (data.hasOwnProperty('sortOrder')) {
                obj['sortOrder'] = ApiClient.convertToType(data['sortOrder'], 'String');
            }
            if (data.hasOwnProperty('parameters')) {
                obj['parameters'] = SortTaskQueryParametersDto.constructFromObject(data['parameters']);
            }
        }
        return obj;
    }


}

/**
 * Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter.
 * @member {module:model/TaskQueryDtoSorting.SortByEnum} sortBy
 */
TaskQueryDtoSorting.prototype['sortBy'] = undefined;

/**
 * Sort the results in a given order. Values may be `asc` for ascending order or `desc` for descending order. Must be used in conjunction with the sortBy parameter.
 * @member {module:model/TaskQueryDtoSorting.SortOrderEnum} sortOrder
 */
TaskQueryDtoSorting.prototype['sortOrder'] = undefined;

/**
 * @member {module:model/SortTaskQueryParametersDto} parameters
 */
TaskQueryDtoSorting.prototype['parameters'] = undefined;





/**
 * Allowed values for the <code>sortBy</code> property.
 * @enum {String}
 * @readonly
 */
TaskQueryDtoSorting['SortByEnum'] = {

    /**
     * value: "instanceId"
     * @const
     */
    "instanceId": "instanceId",

    /**
     * value: "caseInstanceId"
     * @const
     */
    "caseInstanceId": "caseInstanceId",

    /**
     * value: "dueDate"
     * @const
     */
    "dueDate": "dueDate",

    /**
     * value: "executionId"
     * @const
     */
    "executionId": "executionId",

    /**
     * value: "caseExecutionId"
     * @const
     */
    "caseExecutionId": "caseExecutionId",

    /**
     * value: "assignee"
     * @const
     */
    "assignee": "assignee",

    /**
     * value: "created"
     * @const
     */
    "created": "created",

    /**
     * value: "description"
     * @const
     */
    "description": "description",

    /**
     * value: "id"
     * @const
     */
    "id": "id",

    /**
     * value: "name"
     * @const
     */
    "name": "name",

    /**
     * value: "nameCaseInsensitive"
     * @const
     */
    "nameCaseInsensitive": "nameCaseInsensitive",

    /**
     * value: "priority"
     * @const
     */
    "priority": "priority",

    /**
     * value: "processVariable"
     * @const
     */
    "processVariable": "processVariable",

    /**
     * value: "executionVariable"
     * @const
     */
    "executionVariable": "executionVariable",

    /**
     * value: "taskVariable"
     * @const
     */
    "taskVariable": "taskVariable",

    /**
     * value: "caseExecutionVariable"
     * @const
     */
    "caseExecutionVariable": "caseExecutionVariable",

    /**
     * value: "caseInstanceVariable"
     * @const
     */
    "caseInstanceVariable": "caseInstanceVariable"
};


/**
 * Allowed values for the <code>sortOrder</code> property.
 * @enum {String}
 * @readonly
 */
TaskQueryDtoSorting['SortOrderEnum'] = {

    /**
     * value: "asc"
     * @const
     */
    "asc": "asc",

    /**
     * value: "desc"
     * @const
     */
    "desc": "desc"
};



export default TaskQueryDtoSorting;

