/**
 * Camunda BPM REST API
 * OpenApi Spec for Camunda BPM REST API.
 *
 * The version of the OpenAPI document: 7.14.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import HistoricActivityInstanceQueryDtoSorting from './HistoricActivityInstanceQueryDtoSorting';

/**
 * The HistoricActivityInstanceQueryDto model module.
 * @module model/HistoricActivityInstanceQueryDto
 * @version 7.14.0
 */
class HistoricActivityInstanceQueryDto {
    /**
     * Constructs a new <code>HistoricActivityInstanceQueryDto</code>.
     * A historic activity instance query which defines a group of historic activity instances
     * @alias module:model/HistoricActivityInstanceQueryDto
     */
    constructor() { 
        
        HistoricActivityInstanceQueryDto.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>HistoricActivityInstanceQueryDto</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/HistoricActivityInstanceQueryDto} obj Optional instance to populate.
     * @return {module:model/HistoricActivityInstanceQueryDto} The populated <code>HistoricActivityInstanceQueryDto</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new HistoricActivityInstanceQueryDto();

            if (data.hasOwnProperty('activityInstanceId')) {
                obj['activityInstanceId'] = ApiClient.convertToType(data['activityInstanceId'], 'String');
            }
            if (data.hasOwnProperty('processInstanceId')) {
                obj['processInstanceId'] = ApiClient.convertToType(data['processInstanceId'], 'String');
            }
            if (data.hasOwnProperty('processDefinitionId')) {
                obj['processDefinitionId'] = ApiClient.convertToType(data['processDefinitionId'], 'String');
            }
            if (data.hasOwnProperty('executionId')) {
                obj['executionId'] = ApiClient.convertToType(data['executionId'], 'String');
            }
            if (data.hasOwnProperty('activityId')) {
                obj['activityId'] = ApiClient.convertToType(data['activityId'], 'String');
            }
            if (data.hasOwnProperty('activityName')) {
                obj['activityName'] = ApiClient.convertToType(data['activityName'], 'String');
            }
            if (data.hasOwnProperty('activityType')) {
                obj['activityType'] = ApiClient.convertToType(data['activityType'], 'String');
            }
            if (data.hasOwnProperty('taskAssignee')) {
                obj['taskAssignee'] = ApiClient.convertToType(data['taskAssignee'], 'String');
            }
            if (data.hasOwnProperty('finished')) {
                obj['finished'] = ApiClient.convertToType(data['finished'], 'Boolean');
            }
            if (data.hasOwnProperty('unfinished')) {
                obj['unfinished'] = ApiClient.convertToType(data['unfinished'], 'Boolean');
            }
            if (data.hasOwnProperty('canceled')) {
                obj['canceled'] = ApiClient.convertToType(data['canceled'], 'Boolean');
            }
            if (data.hasOwnProperty('completeScope')) {
                obj['completeScope'] = ApiClient.convertToType(data['completeScope'], 'Boolean');
            }
            if (data.hasOwnProperty('startedBefore')) {
                obj['startedBefore'] = ApiClient.convertToType(data['startedBefore'], 'Date');
            }
            if (data.hasOwnProperty('startedAfter')) {
                obj['startedAfter'] = ApiClient.convertToType(data['startedAfter'], 'Date');
            }
            if (data.hasOwnProperty('finishedBefore')) {
                obj['finishedBefore'] = ApiClient.convertToType(data['finishedBefore'], 'Date');
            }
            if (data.hasOwnProperty('finishedAfter')) {
                obj['finishedAfter'] = ApiClient.convertToType(data['finishedAfter'], 'Date');
            }
            if (data.hasOwnProperty('tenantIdIn')) {
                obj['tenantIdIn'] = ApiClient.convertToType(data['tenantIdIn'], ['String']);
            }
            if (data.hasOwnProperty('withoutTenantId')) {
                obj['withoutTenantId'] = ApiClient.convertToType(data['withoutTenantId'], 'Boolean');
            }
            if (data.hasOwnProperty('sorting')) {
                obj['sorting'] = ApiClient.convertToType(data['sorting'], [HistoricActivityInstanceQueryDtoSorting]);
            }
        }
        return obj;
    }


}

/**
 * Filter by activity instance id.
 * @member {String} activityInstanceId
 */
HistoricActivityInstanceQueryDto.prototype['activityInstanceId'] = undefined;

/**
 * Filter by process instance id.
 * @member {String} processInstanceId
 */
HistoricActivityInstanceQueryDto.prototype['processInstanceId'] = undefined;

/**
 * Filter by process definition id.
 * @member {String} processDefinitionId
 */
HistoricActivityInstanceQueryDto.prototype['processDefinitionId'] = undefined;

/**
 * Filter by the id of the execution that executed the activity instance.
 * @member {String} executionId
 */
HistoricActivityInstanceQueryDto.prototype['executionId'] = undefined;

/**
 * Filter by the activity id (according to BPMN 2.0 XML).
 * @member {String} activityId
 */
HistoricActivityInstanceQueryDto.prototype['activityId'] = undefined;

/**
 * Filter by the activity name (according to BPMN 2.0 XML).
 * @member {String} activityName
 */
HistoricActivityInstanceQueryDto.prototype['activityName'] = undefined;

/**
 * Filter by activity type.
 * @member {String} activityType
 */
HistoricActivityInstanceQueryDto.prototype['activityType'] = undefined;

/**
 * Only include activity instances that are user tasks and assigned to a given user.
 * @member {String} taskAssignee
 */
HistoricActivityInstanceQueryDto.prototype['taskAssignee'] = undefined;

/**
 * Only include finished activity instances. Value may only be `true`, as `false` behaves the same as when the property is not set.
 * @member {Boolean} finished
 */
HistoricActivityInstanceQueryDto.prototype['finished'] = undefined;

/**
 * Only include unfinished activity instances. Value may only be `true`, as `false` behaves the same as when the property is not set.
 * @member {Boolean} unfinished
 */
HistoricActivityInstanceQueryDto.prototype['unfinished'] = undefined;

/**
 * Only include canceled activity instances. Value may only be `true`, as `false` behaves the same as when the property is not set.
 * @member {Boolean} canceled
 */
HistoricActivityInstanceQueryDto.prototype['canceled'] = undefined;

/**
 * Only include activity instances which completed a scope. Value may only be `true`, as `false` behaves the same as when the property is not set.
 * @member {Boolean} completeScope
 */
HistoricActivityInstanceQueryDto.prototype['completeScope'] = undefined;

/**
 * Restrict to instances that were started before the given date. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
 * @member {Date} startedBefore
 */
HistoricActivityInstanceQueryDto.prototype['startedBefore'] = undefined;

/**
 * Restrict to instances that were started after the given date. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
 * @member {Date} startedAfter
 */
HistoricActivityInstanceQueryDto.prototype['startedAfter'] = undefined;

/**
 * Restrict to instances that were finished before the given date. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
 * @member {Date} finishedBefore
 */
HistoricActivityInstanceQueryDto.prototype['finishedBefore'] = undefined;

/**
 * Restrict to instances that were finished after the given date. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
 * @member {Date} finishedAfter
 */
HistoricActivityInstanceQueryDto.prototype['finishedAfter'] = undefined;

/**
 * Must be a JSON array of Strings. An activity instance must have one of the given tenant ids.
 * @member {Array.<String>} tenantIdIn
 */
HistoricActivityInstanceQueryDto.prototype['tenantIdIn'] = undefined;

/**
 * Only include historic activity instances that belong to no tenant. Value may only be `true`, as `false` is the default behavior.
 * @member {Boolean} withoutTenantId
 */
HistoricActivityInstanceQueryDto.prototype['withoutTenantId'] = undefined;

/**
 * Apply sorting of the result
 * @member {Array.<module:model/HistoricActivityInstanceQueryDtoSorting>} sorting
 */
HistoricActivityInstanceQueryDto.prototype['sorting'] = undefined;






export default HistoricActivityInstanceQueryDto;

