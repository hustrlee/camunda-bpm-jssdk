/**
 * Camunda BPM REST API
 * OpenApi Spec for Camunda BPM REST API.
 *
 * The version of the OpenAPI document: 7.14.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The HistoricActivityInstanceDto model module.
 * @module model/HistoricActivityInstanceDto
 * @version 7.14.0
 */
class HistoricActivityInstanceDto {
    /**
     * Constructs a new <code>HistoricActivityInstanceDto</code>.
     * @alias module:model/HistoricActivityInstanceDto
     */
    constructor() { 
        
        HistoricActivityInstanceDto.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>HistoricActivityInstanceDto</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/HistoricActivityInstanceDto} obj Optional instance to populate.
     * @return {module:model/HistoricActivityInstanceDto} The populated <code>HistoricActivityInstanceDto</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new HistoricActivityInstanceDto();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('parentActivityInstanceId')) {
                obj['parentActivityInstanceId'] = ApiClient.convertToType(data['parentActivityInstanceId'], 'String');
            }
            if (data.hasOwnProperty('activityId')) {
                obj['activityId'] = ApiClient.convertToType(data['activityId'], 'String');
            }
            if (data.hasOwnProperty('activityName')) {
                obj['activityName'] = ApiClient.convertToType(data['activityName'], 'String');
            }
            if (data.hasOwnProperty('activityType')) {
                obj['activityType'] = ApiClient.convertToType(data['activityType'], 'String');
            }
            if (data.hasOwnProperty('processDefinitionKey')) {
                obj['processDefinitionKey'] = ApiClient.convertToType(data['processDefinitionKey'], 'String');
            }
            if (data.hasOwnProperty('processDefinitionId')) {
                obj['processDefinitionId'] = ApiClient.convertToType(data['processDefinitionId'], 'String');
            }
            if (data.hasOwnProperty('processInstanceId')) {
                obj['processInstanceId'] = ApiClient.convertToType(data['processInstanceId'], 'String');
            }
            if (data.hasOwnProperty('executionId')) {
                obj['executionId'] = ApiClient.convertToType(data['executionId'], 'String');
            }
            if (data.hasOwnProperty('taskId')) {
                obj['taskId'] = ApiClient.convertToType(data['taskId'], 'String');
            }
            if (data.hasOwnProperty('assignee')) {
                obj['assignee'] = ApiClient.convertToType(data['assignee'], 'String');
            }
            if (data.hasOwnProperty('calledProcessInstanceId')) {
                obj['calledProcessInstanceId'] = ApiClient.convertToType(data['calledProcessInstanceId'], 'String');
            }
            if (data.hasOwnProperty('calledCaseInstanceId')) {
                obj['calledCaseInstanceId'] = ApiClient.convertToType(data['calledCaseInstanceId'], 'String');
            }
            if (data.hasOwnProperty('startTime')) {
                obj['startTime'] = ApiClient.convertToType(data['startTime'], 'Date');
            }
            if (data.hasOwnProperty('endTime')) {
                obj['endTime'] = ApiClient.convertToType(data['endTime'], 'Date');
            }
            if (data.hasOwnProperty('durationInMillis')) {
                obj['durationInMillis'] = ApiClient.convertToType(data['durationInMillis'], 'Number');
            }
            if (data.hasOwnProperty('canceled')) {
                obj['canceled'] = ApiClient.convertToType(data['canceled'], 'Boolean');
            }
            if (data.hasOwnProperty('completeScope')) {
                obj['completeScope'] = ApiClient.convertToType(data['completeScope'], 'Boolean');
            }
            if (data.hasOwnProperty('tenantId')) {
                obj['tenantId'] = ApiClient.convertToType(data['tenantId'], 'String');
            }
            if (data.hasOwnProperty('removalTime')) {
                obj['removalTime'] = ApiClient.convertToType(data['removalTime'], 'Date');
            }
            if (data.hasOwnProperty('rootProcessInstanceId')) {
                obj['rootProcessInstanceId'] = ApiClient.convertToType(data['rootProcessInstanceId'], 'String');
            }
        }
        return obj;
    }


}

/**
 * The id of the activity instance.
 * @member {String} id
 */
HistoricActivityInstanceDto.prototype['id'] = undefined;

/**
 * The id of the parent activity instance, for example a sub process instance.
 * @member {String} parentActivityInstanceId
 */
HistoricActivityInstanceDto.prototype['parentActivityInstanceId'] = undefined;

/**
 * The id of the activity that this object is an instance of.
 * @member {String} activityId
 */
HistoricActivityInstanceDto.prototype['activityId'] = undefined;

/**
 * The name of the activity that this object is an instance of.
 * @member {String} activityName
 */
HistoricActivityInstanceDto.prototype['activityName'] = undefined;

/**
 * The type of the activity that this object is an instance of.
 * @member {String} activityType
 */
HistoricActivityInstanceDto.prototype['activityType'] = undefined;

/**
 * The key of the process definition that this activity instance belongs to.
 * @member {String} processDefinitionKey
 */
HistoricActivityInstanceDto.prototype['processDefinitionKey'] = undefined;

/**
 * The id of the process definition that this activity instance belongs to.
 * @member {String} processDefinitionId
 */
HistoricActivityInstanceDto.prototype['processDefinitionId'] = undefined;

/**
 * The id of the process instance that this activity instance belongs to.
 * @member {String} processInstanceId
 */
HistoricActivityInstanceDto.prototype['processInstanceId'] = undefined;

/**
 * The id of the execution that executed this activity instance.
 * @member {String} executionId
 */
HistoricActivityInstanceDto.prototype['executionId'] = undefined;

/**
 * The id of the task that is associated to this activity instance. Is only set if the activity is a user task.
 * @member {String} taskId
 */
HistoricActivityInstanceDto.prototype['taskId'] = undefined;

/**
 * The assignee of the task that is associated to this activity instance. Is only set if the activity is a user task.
 * @member {String} assignee
 */
HistoricActivityInstanceDto.prototype['assignee'] = undefined;

/**
 * The id of the called process instance. Is only set if the activity is a call activity and the called instance a process instance.
 * @member {String} calledProcessInstanceId
 */
HistoricActivityInstanceDto.prototype['calledProcessInstanceId'] = undefined;

/**
 * The id of the called case instance. Is only set if the activity is a call activity and the called instance a case instance.
 * @member {String} calledCaseInstanceId
 */
HistoricActivityInstanceDto.prototype['calledCaseInstanceId'] = undefined;

/**
 * The time the instance was started. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
 * @member {Date} startTime
 */
HistoricActivityInstanceDto.prototype['startTime'] = undefined;

/**
 * The time the instance ended. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
 * @member {Date} endTime
 */
HistoricActivityInstanceDto.prototype['endTime'] = undefined;

/**
 * The time the instance took to finish (in milliseconds).
 * @member {Number} durationInMillis
 */
HistoricActivityInstanceDto.prototype['durationInMillis'] = undefined;

/**
 * If `true`, this activity instance is canceled.
 * @member {Boolean} canceled
 */
HistoricActivityInstanceDto.prototype['canceled'] = undefined;

/**
 * If `true`, this activity instance did complete a BPMN 2.0 scope.
 * @member {Boolean} completeScope
 */
HistoricActivityInstanceDto.prototype['completeScope'] = undefined;

/**
 * The tenant id of the activity instance.
 * @member {String} tenantId
 */
HistoricActivityInstanceDto.prototype['tenantId'] = undefined;

/**
 * The time after which the activity instance should be removed by the History Cleanup job. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
 * @member {Date} removalTime
 */
HistoricActivityInstanceDto.prototype['removalTime'] = undefined;

/**
 * The process instance id of the root process instance that initiated the process containing this activity instance.
 * @member {String} rootProcessInstanceId
 */
HistoricActivityInstanceDto.prototype['rootProcessInstanceId'] = undefined;






export default HistoricActivityInstanceDto;

