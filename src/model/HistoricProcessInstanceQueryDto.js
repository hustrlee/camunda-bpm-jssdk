/**
 * Camunda BPM REST API
 * OpenApi Spec for Camunda BPM REST API.
 *
 * The version of the OpenAPI document: 7.14.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import HistoricProcessInstanceQueryDtoSorting from './HistoricProcessInstanceQueryDtoSorting';
import VariableQueryParameterDto from './VariableQueryParameterDto';

/**
 * The HistoricProcessInstanceQueryDto model module.
 * @module model/HistoricProcessInstanceQueryDto
 * @version 7.14.0
 */
class HistoricProcessInstanceQueryDto {
    /**
     * Constructs a new <code>HistoricProcessInstanceQueryDto</code>.
     * A historic process instance query which defines a group of historic process instances
     * @alias module:model/HistoricProcessInstanceQueryDto
     */
    constructor() { 
        
        HistoricProcessInstanceQueryDto.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>HistoricProcessInstanceQueryDto</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/HistoricProcessInstanceQueryDto} obj Optional instance to populate.
     * @return {module:model/HistoricProcessInstanceQueryDto} The populated <code>HistoricProcessInstanceQueryDto</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new HistoricProcessInstanceQueryDto();

            if (data.hasOwnProperty('processInstanceId')) {
                obj['processInstanceId'] = ApiClient.convertToType(data['processInstanceId'], 'String');
            }
            if (data.hasOwnProperty('processInstanceIds')) {
                obj['processInstanceIds'] = ApiClient.convertToType(data['processInstanceIds'], ['String']);
            }
            if (data.hasOwnProperty('processDefinitionId')) {
                obj['processDefinitionId'] = ApiClient.convertToType(data['processDefinitionId'], 'String');
            }
            if (data.hasOwnProperty('processDefinitionKey')) {
                obj['processDefinitionKey'] = ApiClient.convertToType(data['processDefinitionKey'], 'String');
            }
            if (data.hasOwnProperty('processDefinitionKeyIn')) {
                obj['processDefinitionKeyIn'] = ApiClient.convertToType(data['processDefinitionKeyIn'], ['String']);
            }
            if (data.hasOwnProperty('processDefinitionName')) {
                obj['processDefinitionName'] = ApiClient.convertToType(data['processDefinitionName'], 'String');
            }
            if (data.hasOwnProperty('processDefinitionNameLike')) {
                obj['processDefinitionNameLike'] = ApiClient.convertToType(data['processDefinitionNameLike'], 'String');
            }
            if (data.hasOwnProperty('processDefinitionKeyNotIn')) {
                obj['processDefinitionKeyNotIn'] = ApiClient.convertToType(data['processDefinitionKeyNotIn'], ['String']);
            }
            if (data.hasOwnProperty('processInstanceBusinessKey')) {
                obj['processInstanceBusinessKey'] = ApiClient.convertToType(data['processInstanceBusinessKey'], 'String');
            }
            if (data.hasOwnProperty('processInstanceBusinessKeyLike')) {
                obj['processInstanceBusinessKeyLike'] = ApiClient.convertToType(data['processInstanceBusinessKeyLike'], 'String');
            }
            if (data.hasOwnProperty('rootProcessInstances')) {
                obj['rootProcessInstances'] = ApiClient.convertToType(data['rootProcessInstances'], 'Boolean');
            }
            if (data.hasOwnProperty('finished')) {
                obj['finished'] = ApiClient.convertToType(data['finished'], 'Boolean');
            }
            if (data.hasOwnProperty('unfinished')) {
                obj['unfinished'] = ApiClient.convertToType(data['unfinished'], 'Boolean');
            }
            if (data.hasOwnProperty('withIncidents')) {
                obj['withIncidents'] = ApiClient.convertToType(data['withIncidents'], 'Boolean');
            }
            if (data.hasOwnProperty('withRootIncidents')) {
                obj['withRootIncidents'] = ApiClient.convertToType(data['withRootIncidents'], 'Boolean');
            }
            if (data.hasOwnProperty('incidentType')) {
                obj['incidentType'] = ApiClient.convertToType(data['incidentType'], 'String');
            }
            if (data.hasOwnProperty('incidentStatus')) {
                obj['incidentStatus'] = ApiClient.convertToType(data['incidentStatus'], 'String');
            }
            if (data.hasOwnProperty('incidentMessage')) {
                obj['incidentMessage'] = ApiClient.convertToType(data['incidentMessage'], 'String');
            }
            if (data.hasOwnProperty('incidentMessageLike')) {
                obj['incidentMessageLike'] = ApiClient.convertToType(data['incidentMessageLike'], 'String');
            }
            if (data.hasOwnProperty('startedBefore')) {
                obj['startedBefore'] = ApiClient.convertToType(data['startedBefore'], 'Date');
            }
            if (data.hasOwnProperty('startedAfter')) {
                obj['startedAfter'] = ApiClient.convertToType(data['startedAfter'], 'Date');
            }
            if (data.hasOwnProperty('finishedBefore')) {
                obj['finishedBefore'] = ApiClient.convertToType(data['finishedBefore'], 'Date');
            }
            if (data.hasOwnProperty('finishedAfter')) {
                obj['finishedAfter'] = ApiClient.convertToType(data['finishedAfter'], 'Date');
            }
            if (data.hasOwnProperty('executedActivityAfter')) {
                obj['executedActivityAfter'] = ApiClient.convertToType(data['executedActivityAfter'], 'Date');
            }
            if (data.hasOwnProperty('executedActivityBefore')) {
                obj['executedActivityBefore'] = ApiClient.convertToType(data['executedActivityBefore'], 'Date');
            }
            if (data.hasOwnProperty('executedJobAfter')) {
                obj['executedJobAfter'] = ApiClient.convertToType(data['executedJobAfter'], 'Date');
            }
            if (data.hasOwnProperty('executedJobBefore')) {
                obj['executedJobBefore'] = ApiClient.convertToType(data['executedJobBefore'], 'Date');
            }
            if (data.hasOwnProperty('startedBy')) {
                obj['startedBy'] = ApiClient.convertToType(data['startedBy'], 'String');
            }
            if (data.hasOwnProperty('superProcessInstanceId')) {
                obj['superProcessInstanceId'] = ApiClient.convertToType(data['superProcessInstanceId'], 'String');
            }
            if (data.hasOwnProperty('subProcessInstanceId')) {
                obj['subProcessInstanceId'] = ApiClient.convertToType(data['subProcessInstanceId'], 'String');
            }
            if (data.hasOwnProperty('superCaseInstanceId')) {
                obj['superCaseInstanceId'] = ApiClient.convertToType(data['superCaseInstanceId'], 'String');
            }
            if (data.hasOwnProperty('subCaseInstanceId')) {
                obj['subCaseInstanceId'] = ApiClient.convertToType(data['subCaseInstanceId'], 'String');
            }
            if (data.hasOwnProperty('caseInstanceId')) {
                obj['caseInstanceId'] = ApiClient.convertToType(data['caseInstanceId'], 'String');
            }
            if (data.hasOwnProperty('tenantIdIn')) {
                obj['tenantIdIn'] = ApiClient.convertToType(data['tenantIdIn'], ['String']);
            }
            if (data.hasOwnProperty('withoutTenantId')) {
                obj['withoutTenantId'] = ApiClient.convertToType(data['withoutTenantId'], 'Boolean');
            }
            if (data.hasOwnProperty('executedActivityIdIn')) {
                obj['executedActivityIdIn'] = ApiClient.convertToType(data['executedActivityIdIn'], ['String']);
            }
            if (data.hasOwnProperty('activeActivityIdIn')) {
                obj['activeActivityIdIn'] = ApiClient.convertToType(data['activeActivityIdIn'], ['String']);
            }
            if (data.hasOwnProperty('active')) {
                obj['active'] = ApiClient.convertToType(data['active'], 'Boolean');
            }
            if (data.hasOwnProperty('suspended')) {
                obj['suspended'] = ApiClient.convertToType(data['suspended'], 'Boolean');
            }
            if (data.hasOwnProperty('completed')) {
                obj['completed'] = ApiClient.convertToType(data['completed'], 'Boolean');
            }
            if (data.hasOwnProperty('externallyTerminated')) {
                obj['externallyTerminated'] = ApiClient.convertToType(data['externallyTerminated'], 'Boolean');
            }
            if (data.hasOwnProperty('internallyTerminated')) {
                obj['internallyTerminated'] = ApiClient.convertToType(data['internallyTerminated'], 'Boolean');
            }
            if (data.hasOwnProperty('variables')) {
                obj['variables'] = ApiClient.convertToType(data['variables'], [VariableQueryParameterDto]);
            }
            if (data.hasOwnProperty('variableNamesIgnoreCase')) {
                obj['variableNamesIgnoreCase'] = ApiClient.convertToType(data['variableNamesIgnoreCase'], 'Boolean');
            }
            if (data.hasOwnProperty('variableValuesIgnoreCase')) {
                obj['variableValuesIgnoreCase'] = ApiClient.convertToType(data['variableValuesIgnoreCase'], 'Boolean');
            }
            if (data.hasOwnProperty('orQueries')) {
                obj['orQueries'] = ApiClient.convertToType(data['orQueries'], [HistoricProcessInstanceQueryDto]);
            }
            if (data.hasOwnProperty('sorting')) {
                obj['sorting'] = ApiClient.convertToType(data['sorting'], [HistoricProcessInstanceQueryDtoSorting]);
            }
        }
        return obj;
    }


}

/**
 * Filter by process instance id.
 * @member {String} processInstanceId
 */
HistoricProcessInstanceQueryDto.prototype['processInstanceId'] = undefined;

/**
 * Filter by process instance ids. Must be a JSON array of `Strings`.
 * @member {Array.<String>} processInstanceIds
 */
HistoricProcessInstanceQueryDto.prototype['processInstanceIds'] = undefined;

/**
 * Filter by the process definition the instances run on.
 * @member {String} processDefinitionId
 */
HistoricProcessInstanceQueryDto.prototype['processDefinitionId'] = undefined;

/**
 * Filter by the key of the process definition the instances run on.
 * @member {String} processDefinitionKey
 */
HistoricProcessInstanceQueryDto.prototype['processDefinitionKey'] = undefined;

/**
 * Filter by a list of process definition keys. A process instance must have one of the given process definition keys. Must be a JSON array of `Strings`.
 * @member {Array.<String>} processDefinitionKeyIn
 */
HistoricProcessInstanceQueryDto.prototype['processDefinitionKeyIn'] = undefined;

/**
 * Filter by the name of the process definition the instances run on.
 * @member {String} processDefinitionName
 */
HistoricProcessInstanceQueryDto.prototype['processDefinitionName'] = undefined;

/**
 * Filter by process definition names that the parameter is a substring of.
 * @member {String} processDefinitionNameLike
 */
HistoricProcessInstanceQueryDto.prototype['processDefinitionNameLike'] = undefined;

/**
 * Exclude instances that belong to a set of process definitions. Must be a JSON array of `Strings`.
 * @member {Array.<String>} processDefinitionKeyNotIn
 */
HistoricProcessInstanceQueryDto.prototype['processDefinitionKeyNotIn'] = undefined;

/**
 * Filter by process instance business key.
 * @member {String} processInstanceBusinessKey
 */
HistoricProcessInstanceQueryDto.prototype['processInstanceBusinessKey'] = undefined;

/**
 * Filter by process instance business key that the parameter is a substring of.
 * @member {String} processInstanceBusinessKeyLike
 */
HistoricProcessInstanceQueryDto.prototype['processInstanceBusinessKeyLike'] = undefined;

/**
 * Restrict the query to all process instances that are top level process instances.
 * @member {Boolean} rootProcessInstances
 */
HistoricProcessInstanceQueryDto.prototype['rootProcessInstances'] = undefined;

/**
 * Only include finished process instances. Value may only be `true`, as `false` is the default behavior.
 * @member {Boolean} finished
 */
HistoricProcessInstanceQueryDto.prototype['finished'] = undefined;

/**
 * Only include unfinished process instances. Value may only be `true`, as `false` is the default behavior.
 * @member {Boolean} unfinished
 */
HistoricProcessInstanceQueryDto.prototype['unfinished'] = undefined;

/**
 * Only include process instances which have an incident. Value may only be `true`, as `false` is the default behavior.
 * @member {Boolean} withIncidents
 */
HistoricProcessInstanceQueryDto.prototype['withIncidents'] = undefined;

/**
 * Only include process instances which have a root incident. Value may only be `true`, as `false` is the default behavior.
 * @member {Boolean} withRootIncidents
 */
HistoricProcessInstanceQueryDto.prototype['withRootIncidents'] = undefined;

/**
 * Filter by the incident type. See the [User Guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/incidents/#incident-types) for a list of incident types.
 * @member {String} incidentType
 */
HistoricProcessInstanceQueryDto.prototype['incidentType'] = undefined;

/**
 * Only include process instances which have an incident in status either open or resolved. To get all process instances, use the query parameter withIncidents.
 * @member {module:model/HistoricProcessInstanceQueryDto.IncidentStatusEnum} incidentStatus
 */
HistoricProcessInstanceQueryDto.prototype['incidentStatus'] = undefined;

/**
 * Filter by the incident message. Exact match.
 * @member {String} incidentMessage
 */
HistoricProcessInstanceQueryDto.prototype['incidentMessage'] = undefined;

/**
 * Filter by the incident message that the parameter is a substring of.
 * @member {String} incidentMessageLike
 */
HistoricProcessInstanceQueryDto.prototype['incidentMessageLike'] = undefined;

/**
 * Restrict to instances that were started before the given date. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
 * @member {Date} startedBefore
 */
HistoricProcessInstanceQueryDto.prototype['startedBefore'] = undefined;

/**
 * Restrict to instances that were started after the given date. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
 * @member {Date} startedAfter
 */
HistoricProcessInstanceQueryDto.prototype['startedAfter'] = undefined;

/**
 * Restrict to instances that were finished before the given date. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
 * @member {Date} finishedBefore
 */
HistoricProcessInstanceQueryDto.prototype['finishedBefore'] = undefined;

/**
 * Restrict to instances that were finished after the given date. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
 * @member {Date} finishedAfter
 */
HistoricProcessInstanceQueryDto.prototype['finishedAfter'] = undefined;

/**
 * Restrict to instances that executed an activity after the given date (inclusive). By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
 * @member {Date} executedActivityAfter
 */
HistoricProcessInstanceQueryDto.prototype['executedActivityAfter'] = undefined;

/**
 * Restrict to instances that executed an activity before the given date (inclusive). By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
 * @member {Date} executedActivityBefore
 */
HistoricProcessInstanceQueryDto.prototype['executedActivityBefore'] = undefined;

/**
 * Restrict to instances that executed an job after the given date (inclusive). By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
 * @member {Date} executedJobAfter
 */
HistoricProcessInstanceQueryDto.prototype['executedJobAfter'] = undefined;

/**
 * Restrict to instances that executed an job before the given date (inclusive). By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
 * @member {Date} executedJobBefore
 */
HistoricProcessInstanceQueryDto.prototype['executedJobBefore'] = undefined;

/**
 * Only include process instances that were started by the given user.
 * @member {String} startedBy
 */
HistoricProcessInstanceQueryDto.prototype['startedBy'] = undefined;

/**
 * Restrict query to all process instances that are sub process instances of the given process instance. Takes a process instance id.
 * @member {String} superProcessInstanceId
 */
HistoricProcessInstanceQueryDto.prototype['superProcessInstanceId'] = undefined;

/**
 * Restrict query to one process instance that has a sub process instance with the given id.
 * @member {String} subProcessInstanceId
 */
HistoricProcessInstanceQueryDto.prototype['subProcessInstanceId'] = undefined;

/**
 * Restrict query to all process instances that are sub process instances of the given case instance. Takes a case instance id.
 * @member {String} superCaseInstanceId
 */
HistoricProcessInstanceQueryDto.prototype['superCaseInstanceId'] = undefined;

/**
 * Restrict query to one process instance that has a sub case instance with the given id.
 * @member {String} subCaseInstanceId
 */
HistoricProcessInstanceQueryDto.prototype['subCaseInstanceId'] = undefined;

/**
 * Restrict query to all process instances that are sub process instances of the given case instance. Takes a case instance id.
 * @member {String} caseInstanceId
 */
HistoricProcessInstanceQueryDto.prototype['caseInstanceId'] = undefined;

/**
 * Filter by a list of tenant ids. A process instance must have one of the given tenant ids. Must be a JSON array of `Strings`
 * @member {Array.<String>} tenantIdIn
 */
HistoricProcessInstanceQueryDto.prototype['tenantIdIn'] = undefined;

/**
 * Only include historic process instances which belong to no tenant. Value may only be `true`, as `false` is the default behavior.
 * @member {Boolean} withoutTenantId
 */
HistoricProcessInstanceQueryDto.prototype['withoutTenantId'] = undefined;

/**
 * Restrict to instances that executed an activity with one of given ids. Must be a JSON array of `Strings`
 * @member {Array.<String>} executedActivityIdIn
 */
HistoricProcessInstanceQueryDto.prototype['executedActivityIdIn'] = undefined;

/**
 * Restrict to instances that have an active activity with one of given ids. Must be a JSON array of `Strings`
 * @member {Array.<String>} activeActivityIdIn
 */
HistoricProcessInstanceQueryDto.prototype['activeActivityIdIn'] = undefined;

/**
 * Restrict to instances that are active.
 * @member {Boolean} active
 */
HistoricProcessInstanceQueryDto.prototype['active'] = undefined;

/**
 * Restrict to instances that are suspended.
 * @member {Boolean} suspended
 */
HistoricProcessInstanceQueryDto.prototype['suspended'] = undefined;

/**
 * Restrict to instances that are completed.
 * @member {Boolean} completed
 */
HistoricProcessInstanceQueryDto.prototype['completed'] = undefined;

/**
 * Restrict to instances that are externallyTerminated.
 * @member {Boolean} externallyTerminated
 */
HistoricProcessInstanceQueryDto.prototype['externallyTerminated'] = undefined;

/**
 * Restrict to instances that are internallyTerminated.
 * @member {Boolean} internallyTerminated
 */
HistoricProcessInstanceQueryDto.prototype['internallyTerminated'] = undefined;

/**
 * A JSON array to only include process instances that have/had variables with certain values. The array consists of objects with the three properties `name`, `operator` and `value`. `name` (`String`) is the variable name, `operator` (`String`) is the comparison operator to be used and `value` the variable value.  Value may be `String`, `Number` or `Boolean`.  Valid operator values are: `eq` - equal to; `neq` - not equal to; `gt` - greater than; `gteq` - greater than or equal to; `lt` - lower than; `lteq` - lower than or equal to; `like`. 
 * @member {Array.<module:model/VariableQueryParameterDto>} variables
 */
HistoricProcessInstanceQueryDto.prototype['variables'] = undefined;

/**
 * Match all variable names provided in variables case-insensitively. If set to `true` variableName and variablename are treated as equal.
 * @member {Boolean} variableNamesIgnoreCase
 */
HistoricProcessInstanceQueryDto.prototype['variableNamesIgnoreCase'] = undefined;

/**
 * Match all variable values provided in variables case-insensitively. If set to `true` variableValue and variablevalue are treated as equal.
 * @member {Boolean} variableValuesIgnoreCase
 */
HistoricProcessInstanceQueryDto.prototype['variableValuesIgnoreCase'] = undefined;

/**
 * A JSON array of nested historic process instance queries with OR semantics.  A process instance matches a nested query if it fulfills at least one of the query's predicates.  With multiple nested queries, a process instance must fulfill at least one predicate of each query ([Conjunctive Normal Form](https://en.wikipedia.org/wiki/Conjunctive_normal_form)).  All process instance query properties can be used except for: `sorting`  See the [User Guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/process-engine-api/#or-queries) for more information about OR queries.
 * @member {Array.<module:model/HistoricProcessInstanceQueryDto>} orQueries
 */
HistoricProcessInstanceQueryDto.prototype['orQueries'] = undefined;

/**
 * Apply sorting of the result
 * @member {Array.<module:model/HistoricProcessInstanceQueryDtoSorting>} sorting
 */
HistoricProcessInstanceQueryDto.prototype['sorting'] = undefined;





/**
 * Allowed values for the <code>incidentStatus</code> property.
 * @enum {String}
 * @readonly
 */
HistoricProcessInstanceQueryDto['IncidentStatusEnum'] = {

    /**
     * value: "open"
     * @const
     */
    "open": "open",

    /**
     * value: "resolved"
     * @const
     */
    "resolved": "resolved"
};



export default HistoricProcessInstanceQueryDto;

