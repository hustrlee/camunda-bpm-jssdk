/**
 * Camunda BPM REST API
 * OpenApi Spec for Camunda BPM REST API.
 *
 * The version of the OpenAPI document: 7.14.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ExtendLockOnExternalTaskDto model module.
 * @module model/ExtendLockOnExternalTaskDto
 * @version 7.14.0
 */
class ExtendLockOnExternalTaskDto {
    /**
     * Constructs a new <code>ExtendLockOnExternalTaskDto</code>.
     * @alias module:model/ExtendLockOnExternalTaskDto
     */
    constructor() { 
        
        ExtendLockOnExternalTaskDto.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ExtendLockOnExternalTaskDto</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ExtendLockOnExternalTaskDto} obj Optional instance to populate.
     * @return {module:model/ExtendLockOnExternalTaskDto} The populated <code>ExtendLockOnExternalTaskDto</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ExtendLockOnExternalTaskDto();

            if (data.hasOwnProperty('workerId')) {
                obj['workerId'] = ApiClient.convertToType(data['workerId'], 'String');
            }
            if (data.hasOwnProperty('newDuration')) {
                obj['newDuration'] = ApiClient.convertToType(data['newDuration'], 'Number');
            }
        }
        return obj;
    }


}

/**
 * The ID of a worker who is locking the external task.
 * @member {String} workerId
 */
ExtendLockOnExternalTaskDto.prototype['workerId'] = undefined;

/**
 * An amount of time (in milliseconds). This is the new lock duration starting from the current moment.
 * @member {Number} newDuration
 */
ExtendLockOnExternalTaskDto.prototype['newDuration'] = undefined;






export default ExtendLockOnExternalTaskDto;

