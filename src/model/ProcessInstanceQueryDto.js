/**
 * Camunda BPM REST API
 * OpenApi Spec for Camunda BPM REST API.
 *
 * The version of the OpenAPI document: 7.14.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ProcessInstanceQueryDtoSorting from './ProcessInstanceQueryDtoSorting';
import VariableQueryParameterDto from './VariableQueryParameterDto';

/**
 * The ProcessInstanceQueryDto model module.
 * @module model/ProcessInstanceQueryDto
 * @version 7.14.0
 */
class ProcessInstanceQueryDto {
    /**
     * Constructs a new <code>ProcessInstanceQueryDto</code>.
     * A process instance query which defines a group of process instances
     * @alias module:model/ProcessInstanceQueryDto
     */
    constructor() { 
        
        ProcessInstanceQueryDto.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ProcessInstanceQueryDto</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ProcessInstanceQueryDto} obj Optional instance to populate.
     * @return {module:model/ProcessInstanceQueryDto} The populated <code>ProcessInstanceQueryDto</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ProcessInstanceQueryDto();

            if (data.hasOwnProperty('deploymentId')) {
                obj['deploymentId'] = ApiClient.convertToType(data['deploymentId'], 'String');
            }
            if (data.hasOwnProperty('processDefinitionId')) {
                obj['processDefinitionId'] = ApiClient.convertToType(data['processDefinitionId'], 'String');
            }
            if (data.hasOwnProperty('processDefinitionKey')) {
                obj['processDefinitionKey'] = ApiClient.convertToType(data['processDefinitionKey'], 'String');
            }
            if (data.hasOwnProperty('processDefinitionKeyIn')) {
                obj['processDefinitionKeyIn'] = ApiClient.convertToType(data['processDefinitionKeyIn'], ['String']);
            }
            if (data.hasOwnProperty('processDefinitionKeyNotIn')) {
                obj['processDefinitionKeyNotIn'] = ApiClient.convertToType(data['processDefinitionKeyNotIn'], ['String']);
            }
            if (data.hasOwnProperty('businessKey')) {
                obj['businessKey'] = ApiClient.convertToType(data['businessKey'], 'String');
            }
            if (data.hasOwnProperty('businessKeyLike')) {
                obj['businessKeyLike'] = ApiClient.convertToType(data['businessKeyLike'], 'String');
            }
            if (data.hasOwnProperty('caseInstanceId')) {
                obj['caseInstanceId'] = ApiClient.convertToType(data['caseInstanceId'], 'String');
            }
            if (data.hasOwnProperty('superProcessInstance')) {
                obj['superProcessInstance'] = ApiClient.convertToType(data['superProcessInstance'], 'String');
            }
            if (data.hasOwnProperty('subProcessInstance')) {
                obj['subProcessInstance'] = ApiClient.convertToType(data['subProcessInstance'], 'String');
            }
            if (data.hasOwnProperty('superCaseInstance')) {
                obj['superCaseInstance'] = ApiClient.convertToType(data['superCaseInstance'], 'String');
            }
            if (data.hasOwnProperty('subCaseInstance')) {
                obj['subCaseInstance'] = ApiClient.convertToType(data['subCaseInstance'], 'String');
            }
            if (data.hasOwnProperty('active')) {
                obj['active'] = ApiClient.convertToType(data['active'], 'Boolean');
            }
            if (data.hasOwnProperty('suspended')) {
                obj['suspended'] = ApiClient.convertToType(data['suspended'], 'Boolean');
            }
            if (data.hasOwnProperty('processInstanceIds')) {
                obj['processInstanceIds'] = ApiClient.convertToType(data['processInstanceIds'], ['String']);
            }
            if (data.hasOwnProperty('withIncident')) {
                obj['withIncident'] = ApiClient.convertToType(data['withIncident'], 'Boolean');
            }
            if (data.hasOwnProperty('incidentId')) {
                obj['incidentId'] = ApiClient.convertToType(data['incidentId'], 'String');
            }
            if (data.hasOwnProperty('incidentType')) {
                obj['incidentType'] = ApiClient.convertToType(data['incidentType'], 'String');
            }
            if (data.hasOwnProperty('incidentMessage')) {
                obj['incidentMessage'] = ApiClient.convertToType(data['incidentMessage'], 'String');
            }
            if (data.hasOwnProperty('incidentMessageLike')) {
                obj['incidentMessageLike'] = ApiClient.convertToType(data['incidentMessageLike'], 'String');
            }
            if (data.hasOwnProperty('tenantIdIn')) {
                obj['tenantIdIn'] = ApiClient.convertToType(data['tenantIdIn'], ['String']);
            }
            if (data.hasOwnProperty('withoutTenantId')) {
                obj['withoutTenantId'] = ApiClient.convertToType(data['withoutTenantId'], 'Boolean');
            }
            if (data.hasOwnProperty('processDefinitionWithoutTenantId')) {
                obj['processDefinitionWithoutTenantId'] = ApiClient.convertToType(data['processDefinitionWithoutTenantId'], 'Boolean');
            }
            if (data.hasOwnProperty('activityIdIn')) {
                obj['activityIdIn'] = ApiClient.convertToType(data['activityIdIn'], ['String']);
            }
            if (data.hasOwnProperty('rootProcessInstances')) {
                obj['rootProcessInstances'] = ApiClient.convertToType(data['rootProcessInstances'], 'Boolean');
            }
            if (data.hasOwnProperty('leafProcessInstances')) {
                obj['leafProcessInstances'] = ApiClient.convertToType(data['leafProcessInstances'], 'Boolean');
            }
            if (data.hasOwnProperty('variables')) {
                obj['variables'] = ApiClient.convertToType(data['variables'], [VariableQueryParameterDto]);
            }
            if (data.hasOwnProperty('variableNamesIgnoreCase')) {
                obj['variableNamesIgnoreCase'] = ApiClient.convertToType(data['variableNamesIgnoreCase'], 'Boolean');
            }
            if (data.hasOwnProperty('variableValuesIgnoreCase')) {
                obj['variableValuesIgnoreCase'] = ApiClient.convertToType(data['variableValuesIgnoreCase'], 'Boolean');
            }
            if (data.hasOwnProperty('orQueries')) {
                obj['orQueries'] = ApiClient.convertToType(data['orQueries'], [ProcessInstanceQueryDto]);
            }
            if (data.hasOwnProperty('sorting')) {
                obj['sorting'] = ApiClient.convertToType(data['sorting'], [ProcessInstanceQueryDtoSorting]);
            }
        }
        return obj;
    }


}

/**
 * Filter by the deployment the id belongs to.
 * @member {String} deploymentId
 */
ProcessInstanceQueryDto.prototype['deploymentId'] = undefined;

/**
 * Filter by the process definition the instances run on.
 * @member {String} processDefinitionId
 */
ProcessInstanceQueryDto.prototype['processDefinitionId'] = undefined;

/**
 * Filter by the key of the process definition the instances run on.
 * @member {String} processDefinitionKey
 */
ProcessInstanceQueryDto.prototype['processDefinitionKey'] = undefined;

/**
 * Filter by a list of process definition keys. A process instance must have one of the given process definition keys. Must be a JSON array of Strings.
 * @member {Array.<String>} processDefinitionKeyIn
 */
ProcessInstanceQueryDto.prototype['processDefinitionKeyIn'] = undefined;

/**
 * Exclude instances by a list of process definition keys. A process instance must not have one of the given process definition keys. Must be a JSON array of Strings.
 * @member {Array.<String>} processDefinitionKeyNotIn
 */
ProcessInstanceQueryDto.prototype['processDefinitionKeyNotIn'] = undefined;

/**
 * Filter by process instance business key.
 * @member {String} businessKey
 */
ProcessInstanceQueryDto.prototype['businessKey'] = undefined;

/**
 * Filter by process instance business key that the parameter is a substring of.
 * @member {String} businessKeyLike
 */
ProcessInstanceQueryDto.prototype['businessKeyLike'] = undefined;

/**
 * Filter by case instance id.
 * @member {String} caseInstanceId
 */
ProcessInstanceQueryDto.prototype['caseInstanceId'] = undefined;

/**
 * Restrict query to all process instances that are sub process instances of the given process instance. Takes a process instance id.
 * @member {String} superProcessInstance
 */
ProcessInstanceQueryDto.prototype['superProcessInstance'] = undefined;

/**
 * Restrict query to all process instances that have the given process instance as a sub process instance. Takes a process instance id.
 * @member {String} subProcessInstance
 */
ProcessInstanceQueryDto.prototype['subProcessInstance'] = undefined;

/**
 * Restrict query to all process instances that are sub process instances of the given case instance. Takes a case instance id.
 * @member {String} superCaseInstance
 */
ProcessInstanceQueryDto.prototype['superCaseInstance'] = undefined;

/**
 * Restrict query to all process instances that have the given case instance as a sub case instance. Takes a case instance id.
 * @member {String} subCaseInstance
 */
ProcessInstanceQueryDto.prototype['subCaseInstance'] = undefined;

/**
 * Only include active process instances. Value may only be true, as false is the default behavior.
 * @member {Boolean} active
 */
ProcessInstanceQueryDto.prototype['active'] = undefined;

/**
 * Only include suspended process instances. Value may only be true, as false is the default behavior.
 * @member {Boolean} suspended
 */
ProcessInstanceQueryDto.prototype['suspended'] = undefined;

/**
 * Filter by a list of process instance ids. Must be a JSON array of Strings.
 * @member {Array.<String>} processInstanceIds
 */
ProcessInstanceQueryDto.prototype['processInstanceIds'] = undefined;

/**
 * Filter by presence of incidents. Selects only process instances that have an incident.
 * @member {Boolean} withIncident
 */
ProcessInstanceQueryDto.prototype['withIncident'] = undefined;

/**
 * Filter by the incident id.
 * @member {String} incidentId
 */
ProcessInstanceQueryDto.prototype['incidentId'] = undefined;

/**
 * Filter by the incident type. See the User Guide for a list of incident types.
 * @member {String} incidentType
 */
ProcessInstanceQueryDto.prototype['incidentType'] = undefined;

/**
 * Filter by the incident message. Exact match.
 * @member {String} incidentMessage
 */
ProcessInstanceQueryDto.prototype['incidentMessage'] = undefined;

/**
 * Filter by the incident message that the parameter is a substring of.
 * @member {String} incidentMessageLike
 */
ProcessInstanceQueryDto.prototype['incidentMessageLike'] = undefined;

/**
 * Filter by a list of tenant ids. A process instance must have one of the given tenant ids. Must be a JSON array of Strings.
 * @member {Array.<String>} tenantIdIn
 */
ProcessInstanceQueryDto.prototype['tenantIdIn'] = undefined;

/**
 * Only include process instances which belong to no tenant. Value may only be true, as false is the default behavior.
 * @member {Boolean} withoutTenantId
 */
ProcessInstanceQueryDto.prototype['withoutTenantId'] = undefined;

/**
 * Only include process instances which process definition has no tenant id.
 * @member {Boolean} processDefinitionWithoutTenantId
 */
ProcessInstanceQueryDto.prototype['processDefinitionWithoutTenantId'] = undefined;

/**
 * Filter by a list of activity ids. A process instance must currently wait in a leaf activity with one of the given activity ids.
 * @member {Array.<String>} activityIdIn
 */
ProcessInstanceQueryDto.prototype['activityIdIn'] = undefined;

/**
 * Restrict the query to all process instances that are top level process instances.
 * @member {Boolean} rootProcessInstances
 */
ProcessInstanceQueryDto.prototype['rootProcessInstances'] = undefined;

/**
 * Restrict the query to all process instances that are leaf instances. (i.e. don't have any sub instances)
 * @member {Boolean} leafProcessInstances
 */
ProcessInstanceQueryDto.prototype['leafProcessInstances'] = undefined;

/**
 * A JSON array to only include process instances that have variables with certain values. The array consists of objects with the three properties `name`, `operator` and `value`. `name` (String) is the variable name, `operator` (String) is the comparison operator to be used and `value` the variable value. The `value` may be String, Number or Boolean.  Valid operator values are: `eq` - equal to; `neq` - not equal to; `gt` - greater than; `gteq` - greater than or equal to; `lt` - lower than; `lteq` - lower than or equal to; `like`.
 * @member {Array.<module:model/VariableQueryParameterDto>} variables
 */
ProcessInstanceQueryDto.prototype['variables'] = undefined;

/**
 * Match all variable names in this query case-insensitively. If set to true variableName and variablename are treated as equal.
 * @member {Boolean} variableNamesIgnoreCase
 */
ProcessInstanceQueryDto.prototype['variableNamesIgnoreCase'] = undefined;

/**
 * Match all variable values in this query case-insensitively. If set to true variableValue and variablevalue are treated as equal.
 * @member {Boolean} variableValuesIgnoreCase
 */
ProcessInstanceQueryDto.prototype['variableValuesIgnoreCase'] = undefined;

/**
 * A JSON array of nested process instance queries with OR semantics. A process instance matches a nested query if it fulfills at least one of the query's predicates. With multiple nested queries, a process instance must fulfill at least one predicate of each query (Conjunctive Normal Form). All process instance query properties can be used except for: `sorting` See the [User guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/process-engine-api/#or-queries) for more information about OR queries.
 * @member {Array.<module:model/ProcessInstanceQueryDto>} orQueries
 */
ProcessInstanceQueryDto.prototype['orQueries'] = undefined;

/**
 * Apply sorting of the result
 * @member {Array.<module:model/ProcessInstanceQueryDtoSorting>} sorting
 */
ProcessInstanceQueryDto.prototype['sorting'] = undefined;






export default ProcessInstanceQueryDto;

