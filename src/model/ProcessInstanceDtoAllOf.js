/**
 * Camunda BPM REST API
 * OpenApi Spec for Camunda BPM REST API.
 *
 * The version of the OpenAPI document: 7.14.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ProcessInstanceDtoAllOf model module.
 * @module model/ProcessInstanceDtoAllOf
 * @version 7.14.0
 */
class ProcessInstanceDtoAllOf {
    /**
     * Constructs a new <code>ProcessInstanceDtoAllOf</code>.
     * @alias module:model/ProcessInstanceDtoAllOf
     */
    constructor() { 
        
        ProcessInstanceDtoAllOf.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ProcessInstanceDtoAllOf</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ProcessInstanceDtoAllOf} obj Optional instance to populate.
     * @return {module:model/ProcessInstanceDtoAllOf} The populated <code>ProcessInstanceDtoAllOf</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ProcessInstanceDtoAllOf();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('definitionId')) {
                obj['definitionId'] = ApiClient.convertToType(data['definitionId'], 'String');
            }
            if (data.hasOwnProperty('businessKey')) {
                obj['businessKey'] = ApiClient.convertToType(data['businessKey'], 'String');
            }
            if (data.hasOwnProperty('caseInstanceId')) {
                obj['caseInstanceId'] = ApiClient.convertToType(data['caseInstanceId'], 'String');
            }
            if (data.hasOwnProperty('ended')) {
                obj['ended'] = ApiClient.convertToType(data['ended'], 'Boolean');
            }
            if (data.hasOwnProperty('suspended')) {
                obj['suspended'] = ApiClient.convertToType(data['suspended'], 'Boolean');
            }
            if (data.hasOwnProperty('tenantId')) {
                obj['tenantId'] = ApiClient.convertToType(data['tenantId'], 'String');
            }
        }
        return obj;
    }


}

/**
 * The id of the process instance.
 * @member {String} id
 */
ProcessInstanceDtoAllOf.prototype['id'] = undefined;

/**
 * The id of the process definition that this process instance belongs to.
 * @member {String} definitionId
 */
ProcessInstanceDtoAllOf.prototype['definitionId'] = undefined;

/**
 * The business key of the process instance.
 * @member {String} businessKey
 */
ProcessInstanceDtoAllOf.prototype['businessKey'] = undefined;

/**
 * The id of the case instance associated with the process instance.
 * @member {String} caseInstanceId
 */
ProcessInstanceDtoAllOf.prototype['caseInstanceId'] = undefined;

/**
 * A flag indicating whether the process instance has ended or not. Deprecated: will always be false!
 * @member {Boolean} ended
 */
ProcessInstanceDtoAllOf.prototype['ended'] = undefined;

/**
 * A flag indicating whether the process instance is suspended or not.
 * @member {Boolean} suspended
 */
ProcessInstanceDtoAllOf.prototype['suspended'] = undefined;

/**
 * The tenant id of the process instance.
 * @member {String} tenantId
 */
ProcessInstanceDtoAllOf.prototype['tenantId'] = undefined;






export default ProcessInstanceDtoAllOf;

