/**
 * Camunda BPM REST API
 * OpenApi Spec for Camunda BPM REST API.
 *
 * The version of the OpenAPI document: 7.14.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ActivityInstanceDto from '../model/ActivityInstanceDto';
import AuthorizationExceptionDto from '../model/AuthorizationExceptionDto';
import BatchDto from '../model/BatchDto';
import CountResultDto from '../model/CountResultDto';
import DeleteProcessInstancesDto from '../model/DeleteProcessInstancesDto';
import ExceptionDto from '../model/ExceptionDto';
import PatchVariablesDto from '../model/PatchVariablesDto';
import ProcessInstanceDto from '../model/ProcessInstanceDto';
import ProcessInstanceModificationDto from '../model/ProcessInstanceModificationDto';
import ProcessInstanceQueryDto from '../model/ProcessInstanceQueryDto';
import ProcessInstanceSuspensionStateAsyncDto from '../model/ProcessInstanceSuspensionStateAsyncDto';
import ProcessInstanceSuspensionStateDto from '../model/ProcessInstanceSuspensionStateDto';
import SetJobRetriesByProcessDto from '../model/SetJobRetriesByProcessDto';
import SetVariablesAsyncDto from '../model/SetVariablesAsyncDto';
import SuspensionStateDto from '../model/SuspensionStateDto';
import VariableValueDto from '../model/VariableValueDto';

/**
* ProcessInstance service.
* @module api/ProcessInstanceApi
* @version 7.14.0
*/
export default class ProcessInstanceApi {

    /**
    * Constructs a new ProcessInstanceApi. 
    * @alias module:api/ProcessInstanceApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Deletes a set of process instances asynchronously (batch) based on a historic process instance query.
     * @param {Object} opts Optional parameters
     * @param {module:model/DeleteProcessInstancesDto} opts.deleteProcessInstancesDto **Unallowed property**: `processInstanceQuery`
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/BatchDto} and HTTP response
     */
    deleteAsyncHistoricQueryBasedWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['deleteProcessInstancesDto'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BatchDto;
      return this.apiClient.callApi(
        '/process-instance/delete-historic-query-based', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Deletes a set of process instances asynchronously (batch) based on a historic process instance query.
     * @param {Object} opts Optional parameters
     * @param {module:model/DeleteProcessInstancesDto} opts.deleteProcessInstancesDto **Unallowed property**: `processInstanceQuery`
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/BatchDto}
     */
    deleteAsyncHistoricQueryBased(opts) {
      return this.deleteAsyncHistoricQueryBasedWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Deletes a running process instance by id.
     * @param {String} id The id of the process instance to be deleted.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.skipCustomListeners If set to true, the custom listeners will be skipped. (default to false)
     * @param {Boolean} opts.skipIoMappings If set to true, the input/output mappings will be skipped. (default to false)
     * @param {Boolean} opts.skipSubprocesses If set to true, subprocesses related to deleted processes will be skipped. (default to false)
     * @param {Boolean} opts.failIfNotExists If set to false, the request will still be successful if the process id is not found. (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteProcessInstanceWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteProcessInstance");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'skipCustomListeners': opts['skipCustomListeners'],
        'skipIoMappings': opts['skipIoMappings'],
        'skipSubprocesses': opts['skipSubprocesses'],
        'failIfNotExists': opts['failIfNotExists']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/process-instance/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Deletes a running process instance by id.
     * @param {String} id The id of the process instance to be deleted.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.skipCustomListeners If set to true, the custom listeners will be skipped. (default to false)
     * @param {Boolean} opts.skipIoMappings If set to true, the input/output mappings will be skipped. (default to false)
     * @param {Boolean} opts.skipSubprocesses If set to true, subprocesses related to deleted processes will be skipped. (default to false)
     * @param {Boolean} opts.failIfNotExists If set to false, the request will still be successful if the process id is not found. (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteProcessInstance(id, opts) {
      return this.deleteProcessInstanceWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Deletes a variable of a process instance by id.
     * @param {String} id The id of the process instance to delete the variable from.
     * @param {String} varName The name of the variable to delete.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteProcessInstanceVariableWithHttpInfo(id, varName) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteProcessInstanceVariable");
      }
      // verify the required parameter 'varName' is set
      if (varName === undefined || varName === null) {
        throw new Error("Missing the required parameter 'varName' when calling deleteProcessInstanceVariable");
      }

      let pathParams = {
        'id': id,
        'varName': varName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/process-instance/{id}/variables/{varName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Deletes a variable of a process instance by id.
     * @param {String} id The id of the process instance to delete the variable from.
     * @param {String} varName The name of the variable to delete.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteProcessInstanceVariable(id, varName) {
      return this.deleteProcessInstanceVariableWithHttpInfo(id, varName)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Deletes multiple process instances asynchronously (batch).
     * @param {Object} opts Optional parameters
     * @param {module:model/DeleteProcessInstancesDto} opts.deleteProcessInstancesDto **Unallowed property**: `historicProcessInstanceQuery`
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/BatchDto} and HTTP response
     */
    deleteProcessInstancesAsyncOperationWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['deleteProcessInstancesDto'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BatchDto;
      return this.apiClient.callApi(
        '/process-instance/delete', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Deletes multiple process instances asynchronously (batch).
     * @param {Object} opts Optional parameters
     * @param {module:model/DeleteProcessInstancesDto} opts.deleteProcessInstancesDto **Unallowed property**: `historicProcessInstanceQuery`
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/BatchDto}
     */
    deleteProcessInstancesAsyncOperation(opts) {
      return this.deleteProcessInstancesAsyncOperationWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieves an Activity Instance (Tree) for a given process instance by id.
     * @param {String} id The id of the process instance for which the activity instance should be retrieved.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ActivityInstanceDto} and HTTP response
     */
    getActivityInstanceTreeWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getActivityInstanceTree");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ActivityInstanceDto;
      return this.apiClient.callApi(
        '/process-instance/{id}/activity-instances', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieves an Activity Instance (Tree) for a given process instance by id.
     * @param {String} id The id of the process instance for which the activity instance should be retrieved.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ActivityInstanceDto}
     */
    getActivityInstanceTree(id) {
      return this.getActivityInstanceTreeWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Process Instance
     * Retrieves a process instance by id, according to the `ProcessInstance` interface in the engine.
     * @param {String} id The id of the process instance to be retrieved.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ProcessInstanceDto} and HTTP response
     */
    getProcessInstanceWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getProcessInstance");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProcessInstanceDto;
      return this.apiClient.callApi(
        '/process-instance/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Process Instance
     * Retrieves a process instance by id, according to the `ProcessInstance` interface in the engine.
     * @param {String} id The id of the process instance to be retrieved.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ProcessInstanceDto}
     */
    getProcessInstance(id) {
      return this.getProcessInstanceWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieves a variable of a given process instance by id.
     * @param {String} id The id of the process instance to retrieve the variable for.
     * @param {String} varName The name of the variable to retrieve.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.deserializeValue Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default true).  If set to true, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson's](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API's classpath.  If set to false, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  Note: While true is the default value for reasons of backward compatibility, we recommend setting this parameter to false when developing web applications that are independent of the Java process applications deployed to the engine. (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/VariableValueDto} and HTTP response
     */
    getProcessInstanceVariableWithHttpInfo(id, varName, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getProcessInstanceVariable");
      }
      // verify the required parameter 'varName' is set
      if (varName === undefined || varName === null) {
        throw new Error("Missing the required parameter 'varName' when calling getProcessInstanceVariable");
      }

      let pathParams = {
        'id': id,
        'varName': varName
      };
      let queryParams = {
        'deserializeValue': opts['deserializeValue']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = VariableValueDto;
      return this.apiClient.callApi(
        '/process-instance/{id}/variables/{varName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieves a variable of a given process instance by id.
     * @param {String} id The id of the process instance to retrieve the variable for.
     * @param {String} varName The name of the variable to retrieve.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.deserializeValue Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default true).  If set to true, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson's](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API's classpath.  If set to false, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  Note: While true is the default value for reasons of backward compatibility, we recommend setting this parameter to false when developing web applications that are independent of the Java process applications deployed to the engine. (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/VariableValueDto}
     */
    getProcessInstanceVariable(id, varName, opts) {
      return this.getProcessInstanceVariableWithHttpInfo(id, varName, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieves the content of a Process Variable by the Process Instance id and the Process Variable name. Applicable for byte array or file Process Variables.
     * @param {String} id The id of the process instance to retrieve the variable for.
     * @param {String} varName The name of the variable to retrieve.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link File} and HTTP response
     */
    getProcessInstanceVariableBinaryWithHttpInfo(id, varName) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getProcessInstanceVariableBinary");
      }
      // verify the required parameter 'varName' is set
      if (varName === undefined || varName === null) {
        throw new Error("Missing the required parameter 'varName' when calling getProcessInstanceVariableBinary");
      }

      let pathParams = {
        'id': id,
        'varName': varName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/octet-stream', 'text/plain', 'application/json'];
      let returnType = File;
      return this.apiClient.callApi(
        '/process-instance/{id}/variables/{varName}/data', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieves the content of a Process Variable by the Process Instance id and the Process Variable name. Applicable for byte array or file Process Variables.
     * @param {String} id The id of the process instance to retrieve the variable for.
     * @param {String} varName The name of the variable to retrieve.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link File}
     */
    getProcessInstanceVariableBinary(id, varName) {
      return this.getProcessInstanceVariableBinaryWithHttpInfo(id, varName)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieves all variables of a given process instance by id.
     * @param {String} id The id of the process instance to retrieve the variables from.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.deserializeValue Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default true).  If set to true, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson's](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API's classpath.  If set to false, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  Note: While true is the default value for reasons of backward compatibility, we recommend setting this parameter to false when developing web applications that are independent of the Java process applications deployed to the engine. (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object.<String, module:model/{String: VariableValueDto}>} and HTTP response
     */
    getProcessInstanceVariablesWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getProcessInstanceVariables");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'deserializeValue': opts['deserializeValue']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = {'String': VariableValueDto};
      return this.apiClient.callApi(
        '/process-instance/{id}/variables', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieves all variables of a given process instance by id.
     * @param {String} id The id of the process instance to retrieve the variables from.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.deserializeValue Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default true).  If set to true, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson's](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API's classpath.  If set to false, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  Note: While true is the default value for reasons of backward compatibility, we recommend setting this parameter to false when developing web applications that are independent of the Java process applications deployed to the engine. (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object.<String, module:model/{String: VariableValueDto}>}
     */
    getProcessInstanceVariables(id, opts) {
      return this.getProcessInstanceVariablesWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Queries for process instances that fulfill given parameters. Parameters may be static as well as dynamic runtime properties of process instances. The size of the result set can be retrieved by using the Get Instance Count method.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.sortBy Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter.
     * @param {module:model/String} opts.sortOrder Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter.
     * @param {Number} opts.firstResult Pagination of results. Specifies the index of the first result to return.
     * @param {Number} opts.maxResults Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
     * @param {String} opts.processInstanceIds Filter by a comma-separated list of process instance ids.
     * @param {String} opts.businessKey Filter by process instance business key.
     * @param {String} opts.businessKeyLike Filter by process instance business key that the parameter is a substring of.
     * @param {String} opts.caseInstanceId Filter by case instance id.
     * @param {String} opts.processDefinitionId Filter by the deployment the id belongs to.
     * @param {String} opts.processDefinitionKey Filter by the key of the process definition the instances run on.
     * @param {String} opts.processDefinitionKeyIn Filter by a comma-separated list of process definition keys. A process instance must have one of the given process definition keys.
     * @param {String} opts.processDefinitionKeyNotIn Exclude instances by a comma-separated list of process definition keys. A process instance must not have one of the given process definition keys.
     * @param {String} opts.deploymentId Filter by the deployment the id belongs to.
     * @param {String} opts.superProcessInstance Restrict query to all process instances that are sub process instances of the given process instance. Takes a process instance id.
     * @param {String} opts.subProcessInstance Restrict query to all process instances that have the given process instance as a sub process instance. Takes a process instance id.
     * @param {String} opts.superCaseInstance Restrict query to all process instances that are sub process instances of the given case instance. Takes a case instance id.
     * @param {String} opts.subCaseInstance Restrict query to all process instances that have the given case instance as a sub case instance. Takes a case instance id.
     * @param {Boolean} opts.active Only include active process instances. Value may only be true, as false is the default behavior. (default to false)
     * @param {Boolean} opts.suspended Only include suspended process instances. Value may only be true, as false is the default behavior. (default to false)
     * @param {Boolean} opts.withIncident Filter by presence of incidents. Selects only process instances that have an incident. (default to false)
     * @param {String} opts.incidentId Filter by the incident id.
     * @param {String} opts.incidentType Filter by the incident type. See the [User Guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/incidents/#incident-types) for a list of incident types.
     * @param {String} opts.incidentMessage Filter by the incident message. Exact match.
     * @param {String} opts.incidentMessageLike Filter by the incident message that the parameter is a substring of.
     * @param {String} opts.tenantIdIn Filter by a comma-separated list of tenant ids. A process instance must have one of the given tenant ids.
     * @param {Boolean} opts.withoutTenantId Only include process instances which belong to no tenant. (default to false)
     * @param {Boolean} opts.processDefinitionWithoutTenantId Only include process instances which process definition has no tenant id. (default to false)
     * @param {String} opts.activityIdIn Filter by a comma-separated list of activity ids. A process instance must currently wait in a leaf activity with one of the given activity ids.
     * @param {Boolean} opts.rootProcessInstances Restrict the query to all process instances that are top level process instances. (default to false)
     * @param {Boolean} opts.leafProcessInstances Restrict the query to all process instances that are leaf instances. (i.e. don't have any sub instances). (default to false)
     * @param {String} opts.variables Only include process instances that have variables with certain values. Variable filtering expressions are comma-separated and are structured as follows:  A valid parameter value has the form `key_operator_value`. `key` is the variable name, `operator` is the comparison operator to be used and `value` the variable value.  **Note**: Values are always treated as String objects on server side.  Valid `operator` values are: `eq` - equal to; `neq` - not equal to; `gt` - greater than; `gteq` - greater than or equal to; `lt` - lower than; `lteq` - lower than or equal to; `like`. `key` and `value` may not contain underscore or comma characters.
     * @param {Boolean} opts.variableNamesIgnoreCase Match all variable names in this query case-insensitively. If set to true variableName and variablename are treated as equal. (default to false)
     * @param {Boolean} opts.variableValuesIgnoreCase Match all variable values in this query case-insensitively. If set to true variableValue and variablevalue are treated as equal. (default to false)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/ProcessInstanceDto>} and HTTP response
     */
    getProcessInstancesWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'sortBy': opts['sortBy'],
        'sortOrder': opts['sortOrder'],
        'firstResult': opts['firstResult'],
        'maxResults': opts['maxResults'],
        'processInstanceIds': opts['processInstanceIds'],
        'businessKey': opts['businessKey'],
        'businessKeyLike': opts['businessKeyLike'],
        'caseInstanceId': opts['caseInstanceId'],
        'processDefinitionId': opts['processDefinitionId'],
        'processDefinitionKey': opts['processDefinitionKey'],
        'processDefinitionKeyIn': opts['processDefinitionKeyIn'],
        'processDefinitionKeyNotIn': opts['processDefinitionKeyNotIn'],
        'deploymentId': opts['deploymentId'],
        'superProcessInstance': opts['superProcessInstance'],
        'subProcessInstance': opts['subProcessInstance'],
        'superCaseInstance': opts['superCaseInstance'],
        'subCaseInstance': opts['subCaseInstance'],
        'active': opts['active'],
        'suspended': opts['suspended'],
        'withIncident': opts['withIncident'],
        'incidentId': opts['incidentId'],
        'incidentType': opts['incidentType'],
        'incidentMessage': opts['incidentMessage'],
        'incidentMessageLike': opts['incidentMessageLike'],
        'tenantIdIn': opts['tenantIdIn'],
        'withoutTenantId': opts['withoutTenantId'],
        'processDefinitionWithoutTenantId': opts['processDefinitionWithoutTenantId'],
        'activityIdIn': opts['activityIdIn'],
        'rootProcessInstances': opts['rootProcessInstances'],
        'leafProcessInstances': opts['leafProcessInstances'],
        'variables': opts['variables'],
        'variableNamesIgnoreCase': opts['variableNamesIgnoreCase'],
        'variableValuesIgnoreCase': opts['variableValuesIgnoreCase']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ProcessInstanceDto];
      return this.apiClient.callApi(
        '/process-instance', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Queries for process instances that fulfill given parameters. Parameters may be static as well as dynamic runtime properties of process instances. The size of the result set can be retrieved by using the Get Instance Count method.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.sortBy Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter.
     * @param {module:model/String} opts.sortOrder Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter.
     * @param {Number} opts.firstResult Pagination of results. Specifies the index of the first result to return.
     * @param {Number} opts.maxResults Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
     * @param {String} opts.processInstanceIds Filter by a comma-separated list of process instance ids.
     * @param {String} opts.businessKey Filter by process instance business key.
     * @param {String} opts.businessKeyLike Filter by process instance business key that the parameter is a substring of.
     * @param {String} opts.caseInstanceId Filter by case instance id.
     * @param {String} opts.processDefinitionId Filter by the deployment the id belongs to.
     * @param {String} opts.processDefinitionKey Filter by the key of the process definition the instances run on.
     * @param {String} opts.processDefinitionKeyIn Filter by a comma-separated list of process definition keys. A process instance must have one of the given process definition keys.
     * @param {String} opts.processDefinitionKeyNotIn Exclude instances by a comma-separated list of process definition keys. A process instance must not have one of the given process definition keys.
     * @param {String} opts.deploymentId Filter by the deployment the id belongs to.
     * @param {String} opts.superProcessInstance Restrict query to all process instances that are sub process instances of the given process instance. Takes a process instance id.
     * @param {String} opts.subProcessInstance Restrict query to all process instances that have the given process instance as a sub process instance. Takes a process instance id.
     * @param {String} opts.superCaseInstance Restrict query to all process instances that are sub process instances of the given case instance. Takes a case instance id.
     * @param {String} opts.subCaseInstance Restrict query to all process instances that have the given case instance as a sub case instance. Takes a case instance id.
     * @param {Boolean} opts.active Only include active process instances. Value may only be true, as false is the default behavior. (default to false)
     * @param {Boolean} opts.suspended Only include suspended process instances. Value may only be true, as false is the default behavior. (default to false)
     * @param {Boolean} opts.withIncident Filter by presence of incidents. Selects only process instances that have an incident. (default to false)
     * @param {String} opts.incidentId Filter by the incident id.
     * @param {String} opts.incidentType Filter by the incident type. See the [User Guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/incidents/#incident-types) for a list of incident types.
     * @param {String} opts.incidentMessage Filter by the incident message. Exact match.
     * @param {String} opts.incidentMessageLike Filter by the incident message that the parameter is a substring of.
     * @param {String} opts.tenantIdIn Filter by a comma-separated list of tenant ids. A process instance must have one of the given tenant ids.
     * @param {Boolean} opts.withoutTenantId Only include process instances which belong to no tenant. (default to false)
     * @param {Boolean} opts.processDefinitionWithoutTenantId Only include process instances which process definition has no tenant id. (default to false)
     * @param {String} opts.activityIdIn Filter by a comma-separated list of activity ids. A process instance must currently wait in a leaf activity with one of the given activity ids.
     * @param {Boolean} opts.rootProcessInstances Restrict the query to all process instances that are top level process instances. (default to false)
     * @param {Boolean} opts.leafProcessInstances Restrict the query to all process instances that are leaf instances. (i.e. don't have any sub instances). (default to false)
     * @param {String} opts.variables Only include process instances that have variables with certain values. Variable filtering expressions are comma-separated and are structured as follows:  A valid parameter value has the form `key_operator_value`. `key` is the variable name, `operator` is the comparison operator to be used and `value` the variable value.  **Note**: Values are always treated as String objects on server side.  Valid `operator` values are: `eq` - equal to; `neq` - not equal to; `gt` - greater than; `gteq` - greater than or equal to; `lt` - lower than; `lteq` - lower than or equal to; `like`. `key` and `value` may not contain underscore or comma characters.
     * @param {Boolean} opts.variableNamesIgnoreCase Match all variable names in this query case-insensitively. If set to true variableName and variablename are treated as equal. (default to false)
     * @param {Boolean} opts.variableValuesIgnoreCase Match all variable values in this query case-insensitively. If set to true variableValue and variablevalue are treated as equal. (default to false)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/ProcessInstanceDto>}
     */
    getProcessInstances(opts) {
      return this.getProcessInstancesWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Queries for the number of process instances that fulfill given parameters.
     * @param {Object} opts Optional parameters
     * @param {String} opts.processInstanceIds Filter by a comma-separated list of process instance ids.
     * @param {String} opts.businessKey Filter by process instance business key.
     * @param {String} opts.businessKeyLike Filter by process instance business key that the parameter is a substring of.
     * @param {String} opts.caseInstanceId Filter by case instance id.
     * @param {String} opts.processDefinitionId Filter by the deployment the id belongs to.
     * @param {String} opts.processDefinitionKey Filter by the key of the process definition the instances run on.
     * @param {String} opts.processDefinitionKeyIn Filter by a comma-separated list of process definition keys. A process instance must have one of the given process definition keys.
     * @param {String} opts.processDefinitionKeyNotIn Exclude instances by a comma-separated list of process definition keys. A process instance must not have one of the given process definition keys.
     * @param {String} opts.deploymentId Filter by the deployment the id belongs to.
     * @param {String} opts.superProcessInstance Restrict query to all process instances that are sub process instances of the given process instance. Takes a process instance id.
     * @param {String} opts.subProcessInstance Restrict query to all process instances that have the given process instance as a sub process instance. Takes a process instance id.
     * @param {String} opts.superCaseInstance Restrict query to all process instances that are sub process instances of the given case instance. Takes a case instance id.
     * @param {String} opts.subCaseInstance Restrict query to all process instances that have the given case instance as a sub case instance. Takes a case instance id.
     * @param {Boolean} opts.active Only include active process instances. Value may only be true, as false is the default behavior. (default to false)
     * @param {Boolean} opts.suspended Only include suspended process instances. Value may only be true, as false is the default behavior. (default to false)
     * @param {Boolean} opts.withIncident Filter by presence of incidents. Selects only process instances that have an incident. (default to false)
     * @param {String} opts.incidentId Filter by the incident id.
     * @param {String} opts.incidentType Filter by the incident type. See the [User Guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/incidents/#incident-types) for a list of incident types.
     * @param {String} opts.incidentMessage Filter by the incident message. Exact match.
     * @param {String} opts.incidentMessageLike Filter by the incident message that the parameter is a substring of.
     * @param {String} opts.tenantIdIn Filter by a comma-separated list of tenant ids. A process instance must have one of the given tenant ids.
     * @param {Boolean} opts.withoutTenantId Only include process instances which belong to no tenant. (default to false)
     * @param {Boolean} opts.processDefinitionWithoutTenantId Only include process instances which process definition has no tenant id. (default to false)
     * @param {String} opts.activityIdIn Filter by a comma-separated list of activity ids. A process instance must currently wait in a leaf activity with one of the given activity ids.
     * @param {Boolean} opts.rootProcessInstances Restrict the query to all process instances that are top level process instances. (default to false)
     * @param {Boolean} opts.leafProcessInstances Restrict the query to all process instances that are leaf instances. (i.e. don't have any sub instances). (default to false)
     * @param {String} opts.variables Only include process instances that have variables with certain values. Variable filtering expressions are comma-separated and are structured as follows:  A valid parameter value has the form `key_operator_value`. `key` is the variable name, `operator` is the comparison operator to be used and `value` the variable value.  **Note**: Values are always treated as String objects on server side.  Valid `operator` values are: `eq` - equal to; `neq` - not equal to; `gt` - greater than; `gteq` - greater than or equal to; `lt` - lower than; `lteq` - lower than or equal to; `like`. `key` and `value` may not contain underscore or comma characters.
     * @param {Boolean} opts.variableNamesIgnoreCase Match all variable names in this query case-insensitively. If set to true variableName and variablename are treated as equal. (default to false)
     * @param {Boolean} opts.variableValuesIgnoreCase Match all variable values in this query case-insensitively. If set to true variableValue and variablevalue are treated as equal. (default to false)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CountResultDto} and HTTP response
     */
    getProcessInstancesCountWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'processInstanceIds': opts['processInstanceIds'],
        'businessKey': opts['businessKey'],
        'businessKeyLike': opts['businessKeyLike'],
        'caseInstanceId': opts['caseInstanceId'],
        'processDefinitionId': opts['processDefinitionId'],
        'processDefinitionKey': opts['processDefinitionKey'],
        'processDefinitionKeyIn': opts['processDefinitionKeyIn'],
        'processDefinitionKeyNotIn': opts['processDefinitionKeyNotIn'],
        'deploymentId': opts['deploymentId'],
        'superProcessInstance': opts['superProcessInstance'],
        'subProcessInstance': opts['subProcessInstance'],
        'superCaseInstance': opts['superCaseInstance'],
        'subCaseInstance': opts['subCaseInstance'],
        'active': opts['active'],
        'suspended': opts['suspended'],
        'withIncident': opts['withIncident'],
        'incidentId': opts['incidentId'],
        'incidentType': opts['incidentType'],
        'incidentMessage': opts['incidentMessage'],
        'incidentMessageLike': opts['incidentMessageLike'],
        'tenantIdIn': opts['tenantIdIn'],
        'withoutTenantId': opts['withoutTenantId'],
        'processDefinitionWithoutTenantId': opts['processDefinitionWithoutTenantId'],
        'activityIdIn': opts['activityIdIn'],
        'rootProcessInstances': opts['rootProcessInstances'],
        'leafProcessInstances': opts['leafProcessInstances'],
        'variables': opts['variables'],
        'variableNamesIgnoreCase': opts['variableNamesIgnoreCase'],
        'variableValuesIgnoreCase': opts['variableValuesIgnoreCase']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CountResultDto;
      return this.apiClient.callApi(
        '/process-instance/count', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Queries for the number of process instances that fulfill given parameters.
     * @param {Object} opts Optional parameters
     * @param {String} opts.processInstanceIds Filter by a comma-separated list of process instance ids.
     * @param {String} opts.businessKey Filter by process instance business key.
     * @param {String} opts.businessKeyLike Filter by process instance business key that the parameter is a substring of.
     * @param {String} opts.caseInstanceId Filter by case instance id.
     * @param {String} opts.processDefinitionId Filter by the deployment the id belongs to.
     * @param {String} opts.processDefinitionKey Filter by the key of the process definition the instances run on.
     * @param {String} opts.processDefinitionKeyIn Filter by a comma-separated list of process definition keys. A process instance must have one of the given process definition keys.
     * @param {String} opts.processDefinitionKeyNotIn Exclude instances by a comma-separated list of process definition keys. A process instance must not have one of the given process definition keys.
     * @param {String} opts.deploymentId Filter by the deployment the id belongs to.
     * @param {String} opts.superProcessInstance Restrict query to all process instances that are sub process instances of the given process instance. Takes a process instance id.
     * @param {String} opts.subProcessInstance Restrict query to all process instances that have the given process instance as a sub process instance. Takes a process instance id.
     * @param {String} opts.superCaseInstance Restrict query to all process instances that are sub process instances of the given case instance. Takes a case instance id.
     * @param {String} opts.subCaseInstance Restrict query to all process instances that have the given case instance as a sub case instance. Takes a case instance id.
     * @param {Boolean} opts.active Only include active process instances. Value may only be true, as false is the default behavior. (default to false)
     * @param {Boolean} opts.suspended Only include suspended process instances. Value may only be true, as false is the default behavior. (default to false)
     * @param {Boolean} opts.withIncident Filter by presence of incidents. Selects only process instances that have an incident. (default to false)
     * @param {String} opts.incidentId Filter by the incident id.
     * @param {String} opts.incidentType Filter by the incident type. See the [User Guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/incidents/#incident-types) for a list of incident types.
     * @param {String} opts.incidentMessage Filter by the incident message. Exact match.
     * @param {String} opts.incidentMessageLike Filter by the incident message that the parameter is a substring of.
     * @param {String} opts.tenantIdIn Filter by a comma-separated list of tenant ids. A process instance must have one of the given tenant ids.
     * @param {Boolean} opts.withoutTenantId Only include process instances which belong to no tenant. (default to false)
     * @param {Boolean} opts.processDefinitionWithoutTenantId Only include process instances which process definition has no tenant id. (default to false)
     * @param {String} opts.activityIdIn Filter by a comma-separated list of activity ids. A process instance must currently wait in a leaf activity with one of the given activity ids.
     * @param {Boolean} opts.rootProcessInstances Restrict the query to all process instances that are top level process instances. (default to false)
     * @param {Boolean} opts.leafProcessInstances Restrict the query to all process instances that are leaf instances. (i.e. don't have any sub instances). (default to false)
     * @param {String} opts.variables Only include process instances that have variables with certain values. Variable filtering expressions are comma-separated and are structured as follows:  A valid parameter value has the form `key_operator_value`. `key` is the variable name, `operator` is the comparison operator to be used and `value` the variable value.  **Note**: Values are always treated as String objects on server side.  Valid `operator` values are: `eq` - equal to; `neq` - not equal to; `gt` - greater than; `gteq` - greater than or equal to; `lt` - lower than; `lteq` - lower than or equal to; `like`. `key` and `value` may not contain underscore or comma characters.
     * @param {Boolean} opts.variableNamesIgnoreCase Match all variable names in this query case-insensitively. If set to true variableName and variablename are treated as equal. (default to false)
     * @param {Boolean} opts.variableValuesIgnoreCase Match all variable values in this query case-insensitively. If set to true variableValue and variablevalue are treated as equal. (default to false)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CountResultDto}
     */
    getProcessInstancesCount(opts) {
      return this.getProcessInstancesCountWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Submits a list of modification instructions to change a process instance's execution state. A modification instruction is one of the following:  * Starting execution before an activity * Starting execution after an activity on its single outgoing sequence flow * Starting execution on a specific sequence flow * Canceling an activity instance, transition instance, or all instances (activity or transition) for an activity  Instructions are executed immediately and in the order they are provided in this request's body. Variables can be provided with every starting instruction.  The exact semantics of modification can be read about in the [User guide](https://docs.camunda.org/manual/develop/user-guide/process-engine/process-instance-modification/).
     * @param {String} id The id of the process instance to modify.
     * @param {Object} opts Optional parameters
     * @param {module:model/ProcessInstanceModificationDto} opts.processInstanceModificationDto 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    modifyProcessInstanceWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = opts['processInstanceModificationDto'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling modifyProcessInstance");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/process-instance/{id}/modification', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Submits a list of modification instructions to change a process instance's execution state. A modification instruction is one of the following:  * Starting execution before an activity * Starting execution after an activity on its single outgoing sequence flow * Starting execution on a specific sequence flow * Canceling an activity instance, transition instance, or all instances (activity or transition) for an activity  Instructions are executed immediately and in the order they are provided in this request's body. Variables can be provided with every starting instruction.  The exact semantics of modification can be read about in the [User guide](https://docs.camunda.org/manual/develop/user-guide/process-engine/process-instance-modification/).
     * @param {String} id The id of the process instance to modify.
     * @param {Object} opts Optional parameters
     * @param {module:model/ProcessInstanceModificationDto} opts.processInstanceModificationDto 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    modifyProcessInstance(id, opts) {
      return this.modifyProcessInstanceWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Submits a list of modification instructions to change a process instance's execution state async. A modification instruction is one of the following:  * Starting execution before an activity * Starting execution after an activity on its single outgoing sequence flow * Starting execution on a specific sequence flow * Cancelling an activity instance, transition instance, or all instances (activity or transition) for an activity  Instructions are executed asynchronous and in the order they are provided in this request's body. Variables can be provided with every starting instruction.  The exact semantics of modification can be read about in the [User guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/process-instance-modification/).
     * @param {String} id The id of the process instance to modify.
     * @param {Object} opts Optional parameters
     * @param {module:model/ProcessInstanceModificationDto} opts.processInstanceModificationDto 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/BatchDto} and HTTP response
     */
    modifyProcessInstanceAsyncOperationWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = opts['processInstanceModificationDto'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling modifyProcessInstanceAsyncOperation");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BatchDto;
      return this.apiClient.callApi(
        '/process-instance/{id}/modification-async', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Submits a list of modification instructions to change a process instance's execution state async. A modification instruction is one of the following:  * Starting execution before an activity * Starting execution after an activity on its single outgoing sequence flow * Starting execution on a specific sequence flow * Cancelling an activity instance, transition instance, or all instances (activity or transition) for an activity  Instructions are executed asynchronous and in the order they are provided in this request's body. Variables can be provided with every starting instruction.  The exact semantics of modification can be read about in the [User guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/process-instance-modification/).
     * @param {String} id The id of the process instance to modify.
     * @param {Object} opts Optional parameters
     * @param {module:model/ProcessInstanceModificationDto} opts.processInstanceModificationDto 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/BatchDto}
     */
    modifyProcessInstanceAsyncOperation(id, opts) {
      return this.modifyProcessInstanceAsyncOperationWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Updates or deletes the variables of a process instance by id. Updates precede deletions. So, if a variable is updated AND deleted, the deletion overrides the update.
     * @param {String} id The id of the process instance to set variables for.
     * @param {Object} opts Optional parameters
     * @param {module:model/PatchVariablesDto} opts.patchVariablesDto 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    modifyProcessInstanceVariablesWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = opts['patchVariablesDto'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling modifyProcessInstanceVariables");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/process-instance/{id}/variables', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Updates or deletes the variables of a process instance by id. Updates precede deletions. So, if a variable is updated AND deleted, the deletion overrides the update.
     * @param {String} id The id of the process instance to set variables for.
     * @param {Object} opts Optional parameters
     * @param {module:model/PatchVariablesDto} opts.patchVariablesDto 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    modifyProcessInstanceVariables(id, opts) {
      return this.modifyProcessInstanceVariablesWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Queries for process instances that fulfill given parameters through a JSON object. This method is slightly more powerful than the Get Instances method because it allows filtering by multiple process variables of types `string`, `number` or `boolean`.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.firstResult Pagination of results. Specifies the index of the first result to return.
     * @param {Number} opts.maxResults Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
     * @param {module:model/ProcessInstanceQueryDto} opts.processInstanceQueryDto 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/ProcessInstanceDto>} and HTTP response
     */
    queryProcessInstancesWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['processInstanceQueryDto'];

      let pathParams = {
      };
      let queryParams = {
        'firstResult': opts['firstResult'],
        'maxResults': opts['maxResults']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [ProcessInstanceDto];
      return this.apiClient.callApi(
        '/process-instance', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Queries for process instances that fulfill given parameters through a JSON object. This method is slightly more powerful than the Get Instances method because it allows filtering by multiple process variables of types `string`, `number` or `boolean`.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.firstResult Pagination of results. Specifies the index of the first result to return.
     * @param {Number} opts.maxResults Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
     * @param {module:model/ProcessInstanceQueryDto} opts.processInstanceQueryDto 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/ProcessInstanceDto>}
     */
    queryProcessInstances(opts) {
      return this.queryProcessInstancesWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Queries for the number of process instances that fulfill the given parameters. This method takes the same message body as the Get Instances (POST) method and therefore it is slightly more powerful than the Get Instance Count method.
     * @param {Object} opts Optional parameters
     * @param {module:model/ProcessInstanceQueryDto} opts.processInstanceQueryDto 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CountResultDto} and HTTP response
     */
    queryProcessInstancesCountWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['processInstanceQueryDto'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CountResultDto;
      return this.apiClient.callApi(
        '/process-instance/count', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Queries for the number of process instances that fulfill the given parameters. This method takes the same message body as the Get Instances (POST) method and therefore it is slightly more powerful than the Get Instance Count method.
     * @param {Object} opts Optional parameters
     * @param {module:model/ProcessInstanceQueryDto} opts.processInstanceQueryDto 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CountResultDto}
     */
    queryProcessInstancesCount(opts) {
      return this.queryProcessInstancesCountWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Sets a variable of a given process instance by id.
     * @param {String} id The id of the process instance to set the variable for.
     * @param {String} varName The name of the variable to set.
     * @param {Object} opts Optional parameters
     * @param {module:model/VariableValueDto} opts.variableValueDto 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    setProcessInstanceVariableWithHttpInfo(id, varName, opts) {
      opts = opts || {};
      let postBody = opts['variableValueDto'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling setProcessInstanceVariable");
      }
      // verify the required parameter 'varName' is set
      if (varName === undefined || varName === null) {
        throw new Error("Missing the required parameter 'varName' when calling setProcessInstanceVariable");
      }

      let pathParams = {
        'id': id,
        'varName': varName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/process-instance/{id}/variables/{varName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Sets a variable of a given process instance by id.
     * @param {String} id The id of the process instance to set the variable for.
     * @param {String} varName The name of the variable to set.
     * @param {Object} opts Optional parameters
     * @param {module:model/VariableValueDto} opts.variableValueDto 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    setProcessInstanceVariable(id, varName, opts) {
      return this.setProcessInstanceVariableWithHttpInfo(id, varName, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Sets the serialized value for a binary variable or the binary value for a file variable.
     * @param {String} id The id of the process instance to retrieve the variable for.
     * @param {String} varName The name of the variable to retrieve.
     * @param {Object} opts Optional parameters
     * @param {File} opts.data The binary data to be set. For File variables, this multipart can contain the filename, binary value and MIME type of the file variable to be set Only the filename is mandatory.
     * @param {module:model/String} opts.valueType The name of the variable type. Either Bytes for a byte array variable or File for a file variable.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    setProcessInstanceVariableBinaryWithHttpInfo(id, varName, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling setProcessInstanceVariableBinary");
      }
      // verify the required parameter 'varName' is set
      if (varName === undefined || varName === null) {
        throw new Error("Missing the required parameter 'varName' when calling setProcessInstanceVariableBinary");
      }

      let pathParams = {
        'id': id,
        'varName': varName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'data': opts['data'],
        'valueType': opts['valueType']
      };

      let authNames = [];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/process-instance/{id}/variables/{varName}/data', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Sets the serialized value for a binary variable or the binary value for a file variable.
     * @param {String} id The id of the process instance to retrieve the variable for.
     * @param {String} varName The name of the variable to retrieve.
     * @param {Object} opts Optional parameters
     * @param {File} opts.data The binary data to be set. For File variables, this multipart can contain the filename, binary value and MIME type of the file variable to be set Only the filename is mandatory.
     * @param {module:model/String} opts.valueType The name of the variable type. Either Bytes for a byte array variable or File for a file variable.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    setProcessInstanceVariableBinary(id, varName, opts) {
      return this.setProcessInstanceVariableBinaryWithHttpInfo(id, varName, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a batch to set retries of jobs associated with given processes asynchronously.
     * @param {Object} opts Optional parameters
     * @param {module:model/SetJobRetriesByProcessDto} opts.setJobRetriesByProcessDto Please note that if both processInstances and processInstanceQuery are provided, then the resulting execution will be performed on the union of these sets. **Unallowed property**: `historicProcessInstanceQuery`
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/BatchDto} and HTTP response
     */
    setRetriesByProcessWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['setJobRetriesByProcessDto'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BatchDto;
      return this.apiClient.callApi(
        '/process-instance/job-retries', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create a batch to set retries of jobs associated with given processes asynchronously.
     * @param {Object} opts Optional parameters
     * @param {module:model/SetJobRetriesByProcessDto} opts.setJobRetriesByProcessDto Please note that if both processInstances and processInstanceQuery are provided, then the resulting execution will be performed on the union of these sets. **Unallowed property**: `historicProcessInstanceQuery`
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/BatchDto}
     */
    setRetriesByProcess(opts) {
      return this.setRetriesByProcessWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a batch to set retries of jobs asynchronously based on a historic process instance query.
     * @param {Object} opts Optional parameters
     * @param {module:model/SetJobRetriesByProcessDto} opts.setJobRetriesByProcessDto Please note that if both processInstances and historicProcessInstanceQuery are provided, then the resulting execution will be performed on the union of these sets. **Unallowed property**: `processInstanceQuery`
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/BatchDto} and HTTP response
     */
    setRetriesByProcessHistoricQueryBasedWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['setJobRetriesByProcessDto'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BatchDto;
      return this.apiClient.callApi(
        '/process-instance/job-retries-historic-query-based', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create a batch to set retries of jobs asynchronously based on a historic process instance query.
     * @param {Object} opts Optional parameters
     * @param {module:model/SetJobRetriesByProcessDto} opts.setJobRetriesByProcessDto Please note that if both processInstances and historicProcessInstanceQuery are provided, then the resulting execution will be performed on the union of these sets. **Unallowed property**: `processInstanceQuery`
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/BatchDto}
     */
    setRetriesByProcessHistoricQueryBased(opts) {
      return this.setRetriesByProcessHistoricQueryBasedWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update or create runtime process variables in the root scope of process instances.
     * @param {Object} opts Optional parameters
     * @param {module:model/SetVariablesAsyncDto} opts.setVariablesAsyncDto 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/BatchDto} and HTTP response
     */
    setVariablesAsyncOperationWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['setVariablesAsyncDto'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BatchDto;
      return this.apiClient.callApi(
        '/process-instance/variables-async', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update or create runtime process variables in the root scope of process instances.
     * @param {Object} opts Optional parameters
     * @param {module:model/SetVariablesAsyncDto} opts.setVariablesAsyncDto 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/BatchDto}
     */
    setVariablesAsyncOperation(opts) {
      return this.setVariablesAsyncOperationWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Activates or suspends process instances by providing certain criteria:  # Activate/Suspend Process Instance By Process Definition Id * `suspend` * `processDefinitionId`  # Activate/Suspend Process Instance By Process Definition Key  * `suspend` * `processDefinitionKey` * `processDefinitionTenantId` * `processDefinitionWithoutTenantId`  # Activate/Suspend Process Instance In Group * `suspend` * `processInstanceIds` * `processInstanceQuery` * `historicProcessInstanceQuery`
     * @param {Object} opts Optional parameters
     * @param {module:model/ProcessInstanceSuspensionStateDto} opts.processInstanceSuspensionStateDto 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    updateSuspensionStateWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['processInstanceSuspensionStateDto'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/process-instance/suspended', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Activates or suspends process instances by providing certain criteria:  # Activate/Suspend Process Instance By Process Definition Id * `suspend` * `processDefinitionId`  # Activate/Suspend Process Instance By Process Definition Key  * `suspend` * `processDefinitionKey` * `processDefinitionTenantId` * `processDefinitionWithoutTenantId`  # Activate/Suspend Process Instance In Group * `suspend` * `processInstanceIds` * `processInstanceQuery` * `historicProcessInstanceQuery`
     * @param {Object} opts Optional parameters
     * @param {module:model/ProcessInstanceSuspensionStateDto} opts.processInstanceSuspensionStateDto 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    updateSuspensionState(opts) {
      return this.updateSuspensionStateWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Activates or suspends process instances asynchronously with a list of process instance ids, a process instance query, and/or a historical process instance query.
     * @param {Object} opts Optional parameters
     * @param {module:model/ProcessInstanceSuspensionStateAsyncDto} opts.processInstanceSuspensionStateAsyncDto 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/BatchDto} and HTTP response
     */
    updateSuspensionStateAsyncOperationWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['processInstanceSuspensionStateAsyncDto'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BatchDto;
      return this.apiClient.callApi(
        '/process-instance/suspended-async', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Activates or suspends process instances asynchronously with a list of process instance ids, a process instance query, and/or a historical process instance query.
     * @param {Object} opts Optional parameters
     * @param {module:model/ProcessInstanceSuspensionStateAsyncDto} opts.processInstanceSuspensionStateAsyncDto 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/BatchDto}
     */
    updateSuspensionStateAsyncOperation(opts) {
      return this.updateSuspensionStateAsyncOperationWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Activates or suspends a given process instance by id.
     * @param {String} id The id of the process instance to activate or suspend.
     * @param {Object} opts Optional parameters
     * @param {module:model/SuspensionStateDto} opts.suspensionStateDto 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    updateSuspensionStateByIdWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = opts['suspensionStateDto'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateSuspensionStateById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/process-instance/{id}/suspended', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Activates or suspends a given process instance by id.
     * @param {String} id The id of the process instance to activate or suspend.
     * @param {Object} opts Optional parameters
     * @param {module:model/SuspensionStateDto} opts.suspensionStateDto 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    updateSuspensionStateById(id, opts) {
      return this.updateSuspensionStateByIdWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
