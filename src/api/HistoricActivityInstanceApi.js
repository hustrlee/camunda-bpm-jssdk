/**
 * Camunda BPM REST API
 * OpenApi Spec for Camunda BPM REST API.
 *
 * The version of the OpenAPI document: 7.14.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CountResultDto from '../model/CountResultDto';
import ExceptionDto from '../model/ExceptionDto';
import HistoricActivityInstanceDto from '../model/HistoricActivityInstanceDto';
import HistoricActivityInstanceQueryDto from '../model/HistoricActivityInstanceQueryDto';

/**
* HistoricActivityInstance service.
* @module api/HistoricActivityInstanceApi
* @version 7.14.0
*/
export default class HistoricActivityInstanceApi {

    /**
    * Constructs a new HistoricActivityInstanceApi. 
    * @alias module:api/HistoricActivityInstanceApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Get
     * Retrieves a historic activity instance by id, according to the `HistoricActivityInstance` interface in the engine.
     * @param {String} id The id of the historic activity instance to be retrieved.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/HistoricActivityInstanceDto} and HTTP response
     */
    getHistoricActivityInstanceWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getHistoricActivityInstance");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = HistoricActivityInstanceDto;
      return this.apiClient.callApi(
        '/history/activity-instance/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get
     * Retrieves a historic activity instance by id, according to the `HistoricActivityInstance` interface in the engine.
     * @param {String} id The id of the historic activity instance to be retrieved.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/HistoricActivityInstanceDto}
     */
    getHistoricActivityInstance(id) {
      return this.getHistoricActivityInstanceWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get List
     * Queries for historic activity instances that fulfill the given parameters. The size of the result set can be retrieved by using the [Get Historic Activity Instance Count](https://docs.camunda.org/manual/7.14/reference/rest/history/activity-instance/get-activity-instance-query-count/) method.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.sortBy Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter.
     * @param {module:model/String} opts.sortOrder Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter.
     * @param {Number} opts.firstResult Pagination of results. Specifies the index of the first result to return.
     * @param {Number} opts.maxResults Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
     * @param {String} opts.activityInstanceId Filter by activity instance id.
     * @param {String} opts.processInstanceId Filter by process instance id.
     * @param {String} opts.processDefinitionId Filter by process definition id.
     * @param {String} opts.executionId Filter by the id of the execution that executed the activity instance.
     * @param {String} opts.activityId Filter by the activity id (according to BPMN 2.0 XML).
     * @param {String} opts.activityName Filter by the activity name (according to BPMN 2.0 XML).
     * @param {String} opts.activityType Filter by activity type.
     * @param {String} opts.taskAssignee Only include activity instances that are user tasks and assigned to a given user.
     * @param {Boolean} opts.finished Only include finished activity instances. Value may only be `true`, as `false` behaves the same as when the property is not set.
     * @param {Boolean} opts.unfinished Only include unfinished activity instances. Value may only be `true`, as `false` behaves the same as when the property is not set.
     * @param {Boolean} opts.canceled Only include canceled activity instances. Value may only be `true`, as `false` behaves the same as when the property is not set.
     * @param {Boolean} opts.completeScope Only include activity instances which completed a scope. Value may only be `true`, as `false` behaves the same as when the property is not set.
     * @param {Date} opts.startedBefore Restrict to instances that were started before the given date. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
     * @param {Date} opts.startedAfter Restrict to instances that were started after the given date. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
     * @param {Date} opts.finishedBefore Restrict to instances that were finished before the given date. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
     * @param {Date} opts.finishedAfter Restrict to instances that were finished after the given date. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
     * @param {String} opts.tenantIdIn Filter by a comma-separated list of ids. An activity instance must have one of the given tenant ids.
     * @param {Boolean} opts.withoutTenantId Only include historic activity instances that belong to no tenant. Value may only be `true`, as `false` is the default behavior.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/HistoricActivityInstanceDto>} and HTTP response
     */
    getHistoricActivityInstancesWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'sortBy': opts['sortBy'],
        'sortOrder': opts['sortOrder'],
        'firstResult': opts['firstResult'],
        'maxResults': opts['maxResults'],
        'activityInstanceId': opts['activityInstanceId'],
        'processInstanceId': opts['processInstanceId'],
        'processDefinitionId': opts['processDefinitionId'],
        'executionId': opts['executionId'],
        'activityId': opts['activityId'],
        'activityName': opts['activityName'],
        'activityType': opts['activityType'],
        'taskAssignee': opts['taskAssignee'],
        'finished': opts['finished'],
        'unfinished': opts['unfinished'],
        'canceled': opts['canceled'],
        'completeScope': opts['completeScope'],
        'startedBefore': opts['startedBefore'],
        'startedAfter': opts['startedAfter'],
        'finishedBefore': opts['finishedBefore'],
        'finishedAfter': opts['finishedAfter'],
        'tenantIdIn': opts['tenantIdIn'],
        'withoutTenantId': opts['withoutTenantId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [HistoricActivityInstanceDto];
      return this.apiClient.callApi(
        '/history/activity-instance', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get List
     * Queries for historic activity instances that fulfill the given parameters. The size of the result set can be retrieved by using the [Get Historic Activity Instance Count](https://docs.camunda.org/manual/7.14/reference/rest/history/activity-instance/get-activity-instance-query-count/) method.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.sortBy Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter.
     * @param {module:model/String} opts.sortOrder Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter.
     * @param {Number} opts.firstResult Pagination of results. Specifies the index of the first result to return.
     * @param {Number} opts.maxResults Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
     * @param {String} opts.activityInstanceId Filter by activity instance id.
     * @param {String} opts.processInstanceId Filter by process instance id.
     * @param {String} opts.processDefinitionId Filter by process definition id.
     * @param {String} opts.executionId Filter by the id of the execution that executed the activity instance.
     * @param {String} opts.activityId Filter by the activity id (according to BPMN 2.0 XML).
     * @param {String} opts.activityName Filter by the activity name (according to BPMN 2.0 XML).
     * @param {String} opts.activityType Filter by activity type.
     * @param {String} opts.taskAssignee Only include activity instances that are user tasks and assigned to a given user.
     * @param {Boolean} opts.finished Only include finished activity instances. Value may only be `true`, as `false` behaves the same as when the property is not set.
     * @param {Boolean} opts.unfinished Only include unfinished activity instances. Value may only be `true`, as `false` behaves the same as when the property is not set.
     * @param {Boolean} opts.canceled Only include canceled activity instances. Value may only be `true`, as `false` behaves the same as when the property is not set.
     * @param {Boolean} opts.completeScope Only include activity instances which completed a scope. Value may only be `true`, as `false` behaves the same as when the property is not set.
     * @param {Date} opts.startedBefore Restrict to instances that were started before the given date. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
     * @param {Date} opts.startedAfter Restrict to instances that were started after the given date. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
     * @param {Date} opts.finishedBefore Restrict to instances that were finished before the given date. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
     * @param {Date} opts.finishedAfter Restrict to instances that were finished after the given date. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
     * @param {String} opts.tenantIdIn Filter by a comma-separated list of ids. An activity instance must have one of the given tenant ids.
     * @param {Boolean} opts.withoutTenantId Only include historic activity instances that belong to no tenant. Value may only be `true`, as `false` is the default behavior.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/HistoricActivityInstanceDto>}
     */
    getHistoricActivityInstances(opts) {
      return this.getHistoricActivityInstancesWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get List Count
     * Queries for the number of historic activity instances that fulfill the given parameters. Takes the same parameters as the [Get Historic Activity Instance](https://docs.camunda.org/manual/7.14/reference/rest/history/activity-instance/get-activity-instance-query/)  method.
     * @param {Object} opts Optional parameters
     * @param {String} opts.activityInstanceId Filter by activity instance id.
     * @param {String} opts.processInstanceId Filter by process instance id.
     * @param {String} opts.processDefinitionId Filter by process definition id.
     * @param {String} opts.executionId Filter by the id of the execution that executed the activity instance.
     * @param {String} opts.activityId Filter by the activity id (according to BPMN 2.0 XML).
     * @param {String} opts.activityName Filter by the activity name (according to BPMN 2.0 XML).
     * @param {String} opts.activityType Filter by activity type.
     * @param {String} opts.taskAssignee Only include activity instances that are user tasks and assigned to a given user.
     * @param {Boolean} opts.finished Only include finished activity instances. Value may only be `true`, as `false` behaves the same as when the property is not set.
     * @param {Boolean} opts.unfinished Only include unfinished activity instances. Value may only be `true`, as `false` behaves the same as when the property is not set.
     * @param {Boolean} opts.canceled Only include canceled activity instances. Value may only be `true`, as `false` behaves the same as when the property is not set.
     * @param {Boolean} opts.completeScope Only include activity instances which completed a scope. Value may only be `true`, as `false` behaves the same as when the property is not set.
     * @param {Date} opts.startedBefore Restrict to instances that were started before the given date. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
     * @param {Date} opts.startedAfter Restrict to instances that were started after the given date. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
     * @param {Date} opts.finishedBefore Restrict to instances that were finished before the given date. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
     * @param {Date} opts.finishedAfter Restrict to instances that were finished after the given date. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
     * @param {String} opts.tenantIdIn Filter by a comma-separated list of ids. An activity instance must have one of the given tenant ids.
     * @param {Boolean} opts.withoutTenantId Only include historic activity instances that belong to no tenant. Value may only be `true`, as `false` is the default behavior.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CountResultDto} and HTTP response
     */
    getHistoricActivityInstancesCountWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'activityInstanceId': opts['activityInstanceId'],
        'processInstanceId': opts['processInstanceId'],
        'processDefinitionId': opts['processDefinitionId'],
        'executionId': opts['executionId'],
        'activityId': opts['activityId'],
        'activityName': opts['activityName'],
        'activityType': opts['activityType'],
        'taskAssignee': opts['taskAssignee'],
        'finished': opts['finished'],
        'unfinished': opts['unfinished'],
        'canceled': opts['canceled'],
        'completeScope': opts['completeScope'],
        'startedBefore': opts['startedBefore'],
        'startedAfter': opts['startedAfter'],
        'finishedBefore': opts['finishedBefore'],
        'finishedAfter': opts['finishedAfter'],
        'tenantIdIn': opts['tenantIdIn'],
        'withoutTenantId': opts['withoutTenantId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CountResultDto;
      return this.apiClient.callApi(
        '/history/activity-instance/count', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get List Count
     * Queries for the number of historic activity instances that fulfill the given parameters. Takes the same parameters as the [Get Historic Activity Instance](https://docs.camunda.org/manual/7.14/reference/rest/history/activity-instance/get-activity-instance-query/)  method.
     * @param {Object} opts Optional parameters
     * @param {String} opts.activityInstanceId Filter by activity instance id.
     * @param {String} opts.processInstanceId Filter by process instance id.
     * @param {String} opts.processDefinitionId Filter by process definition id.
     * @param {String} opts.executionId Filter by the id of the execution that executed the activity instance.
     * @param {String} opts.activityId Filter by the activity id (according to BPMN 2.0 XML).
     * @param {String} opts.activityName Filter by the activity name (according to BPMN 2.0 XML).
     * @param {String} opts.activityType Filter by activity type.
     * @param {String} opts.taskAssignee Only include activity instances that are user tasks and assigned to a given user.
     * @param {Boolean} opts.finished Only include finished activity instances. Value may only be `true`, as `false` behaves the same as when the property is not set.
     * @param {Boolean} opts.unfinished Only include unfinished activity instances. Value may only be `true`, as `false` behaves the same as when the property is not set.
     * @param {Boolean} opts.canceled Only include canceled activity instances. Value may only be `true`, as `false` behaves the same as when the property is not set.
     * @param {Boolean} opts.completeScope Only include activity instances which completed a scope. Value may only be `true`, as `false` behaves the same as when the property is not set.
     * @param {Date} opts.startedBefore Restrict to instances that were started before the given date. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
     * @param {Date} opts.startedAfter Restrict to instances that were started after the given date. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
     * @param {Date} opts.finishedBefore Restrict to instances that were finished before the given date. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
     * @param {Date} opts.finishedAfter Restrict to instances that were finished after the given date. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
     * @param {String} opts.tenantIdIn Filter by a comma-separated list of ids. An activity instance must have one of the given tenant ids.
     * @param {Boolean} opts.withoutTenantId Only include historic activity instances that belong to no tenant. Value may only be `true`, as `false` is the default behavior.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CountResultDto}
     */
    getHistoricActivityInstancesCount(opts) {
      return this.getHistoricActivityInstancesCountWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get List (POST)
     * Queries for historic activity instances that fulfill the given parameters. The size of the result set can be retrieved by using the [Get Historic Activity Instance Count](https://docs.camunda.org/manual/7.14/reference/rest/history/activity-instance/get-activity-instance-query-count/) method.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.firstResult Pagination of results. Specifies the index of the first result to return.
     * @param {Number} opts.maxResults Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
     * @param {module:model/HistoricActivityInstanceQueryDto} opts.historicActivityInstanceQueryDto 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/HistoricActivityInstanceDto>} and HTTP response
     */
    queryHistoricActivityInstancesWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['historicActivityInstanceQueryDto'];

      let pathParams = {
      };
      let queryParams = {
        'firstResult': opts['firstResult'],
        'maxResults': opts['maxResults']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [HistoricActivityInstanceDto];
      return this.apiClient.callApi(
        '/history/activity-instance', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get List (POST)
     * Queries for historic activity instances that fulfill the given parameters. The size of the result set can be retrieved by using the [Get Historic Activity Instance Count](https://docs.camunda.org/manual/7.14/reference/rest/history/activity-instance/get-activity-instance-query-count/) method.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.firstResult Pagination of results. Specifies the index of the first result to return.
     * @param {Number} opts.maxResults Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
     * @param {module:model/HistoricActivityInstanceQueryDto} opts.historicActivityInstanceQueryDto 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/HistoricActivityInstanceDto>}
     */
    queryHistoricActivityInstances(opts) {
      return this.queryHistoricActivityInstancesWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get List Count (POST)
     * Queries for the number of historic activity instances that fulfill the given parameters.
     * @param {Object} opts Optional parameters
     * @param {module:model/HistoricActivityInstanceQueryDto} opts.historicActivityInstanceQueryDto 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CountResultDto} and HTTP response
     */
    queryHistoricActivityInstancesCountWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['historicActivityInstanceQueryDto'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CountResultDto;
      return this.apiClient.callApi(
        '/history/activity-instance/count', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get List Count (POST)
     * Queries for the number of historic activity instances that fulfill the given parameters.
     * @param {Object} opts Optional parameters
     * @param {module:model/HistoricActivityInstanceQueryDto} opts.historicActivityInstanceQueryDto 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CountResultDto}
     */
    queryHistoricActivityInstancesCount(opts) {
      return this.queryHistoricActivityInstancesCountWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
