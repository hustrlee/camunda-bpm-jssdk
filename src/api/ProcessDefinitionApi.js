/**
 * Camunda BPM REST API
 * OpenApi Spec for Camunda BPM REST API.
 *
 * The version of the OpenAPI document: 7.14.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ActivityStatisticsResultDto from '../model/ActivityStatisticsResultDto';
import AuthorizationExceptionDto from '../model/AuthorizationExceptionDto';
import BatchDto from '../model/BatchDto';
import CountResultDto from '../model/CountResultDto';
import ExceptionDto from '../model/ExceptionDto';
import FormDto from '../model/FormDto';
import HistoryTimeToLiveDto from '../model/HistoryTimeToLiveDto';
import ProcessDefinitionDiagramDto from '../model/ProcessDefinitionDiagramDto';
import ProcessDefinitionDto from '../model/ProcessDefinitionDto';
import ProcessDefinitionStatisticsResultDto from '../model/ProcessDefinitionStatisticsResultDto';
import ProcessDefinitionSuspensionStateDto from '../model/ProcessDefinitionSuspensionStateDto';
import ProcessInstanceDto from '../model/ProcessInstanceDto';
import ProcessInstanceWithVariablesDto from '../model/ProcessInstanceWithVariablesDto';
import RestartProcessInstanceDto from '../model/RestartProcessInstanceDto';
import StartProcessInstanceDto from '../model/StartProcessInstanceDto';
import StartProcessInstanceFormDto from '../model/StartProcessInstanceFormDto';
import VariableValueDto from '../model/VariableValueDto';

/**
* ProcessDefinition service.
* @module api/ProcessDefinitionApi
* @version 7.14.0
*/
export default class ProcessDefinitionApi {

    /**
    * Constructs a new ProcessDefinitionApi. 
    * @alias module:api/ProcessDefinitionApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Delete
     * Deletes a running process instance by id.
     * @param {String} id The id of the process definition to be deleted.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.cascade `true`, if all process instances, historic process instances and jobs for this process definition should be deleted.
     * @param {Boolean} opts.skipCustomListeners `true`, if only the built-in ExecutionListeners should be notified with the end event. (default to false)
     * @param {Boolean} opts.skipIoMappings A boolean value to control whether input/output mappings should be executed during deletion. `true`, if input/output mappings should not be invoked. (default to false)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteProcessDefinitionWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteProcessDefinition");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'cascade': opts['cascade'],
        'skipCustomListeners': opts['skipCustomListeners'],
        'skipIoMappings': opts['skipIoMappings']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/process-definition/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete
     * Deletes a running process instance by id.
     * @param {String} id The id of the process definition to be deleted.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.cascade `true`, if all process instances, historic process instances and jobs for this process definition should be deleted.
     * @param {Boolean} opts.skipCustomListeners `true`, if only the built-in ExecutionListeners should be notified with the end event. (default to false)
     * @param {Boolean} opts.skipIoMappings A boolean value to control whether input/output mappings should be executed during deletion. `true`, if input/output mappings should not be invoked. (default to false)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteProcessDefinition(id, opts) {
      return this.deleteProcessDefinitionWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete By Key
     * Deletes process definitions by a given key which belong to no tenant id.
     * @param {String} key The key of the process definitions to be deleted.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.cascade `true`, if all process instances, historic process instances and jobs for this process definition should be deleted.
     * @param {Boolean} opts.skipCustomListeners `true`, if only the built-in ExecutionListeners should be notified with the end event. (default to false)
     * @param {Boolean} opts.skipIoMappings A boolean value to control whether input/output mappings should be executed during deletion. `true`, if input/output mappings should not be invoked. (default to false)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteProcessDefinitionsByKeyWithHttpInfo(key, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteProcessDefinitionsByKey");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
        'cascade': opts['cascade'],
        'skipCustomListeners': opts['skipCustomListeners'],
        'skipIoMappings': opts['skipIoMappings']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/process-definition/key/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete By Key
     * Deletes process definitions by a given key which belong to no tenant id.
     * @param {String} key The key of the process definitions to be deleted.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.cascade `true`, if all process instances, historic process instances and jobs for this process definition should be deleted.
     * @param {Boolean} opts.skipCustomListeners `true`, if only the built-in ExecutionListeners should be notified with the end event. (default to false)
     * @param {Boolean} opts.skipIoMappings A boolean value to control whether input/output mappings should be executed during deletion. `true`, if input/output mappings should not be invoked. (default to false)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteProcessDefinitionsByKey(key, opts) {
      return this.deleteProcessDefinitionsByKeyWithHttpInfo(key, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete By Key
     * Deletes process definitions by a given key and which belong to a tenant id.
     * @param {String} key The key of the process definitions to be deleted.
     * @param {String} tenantId The id of the tenant the process definitions belong to.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.cascade `true`, if all process instances, historic process instances and jobs for this process definition should be deleted.
     * @param {Boolean} opts.skipCustomListeners `true`, if only the built-in ExecutionListeners should be notified with the end event. (default to false)
     * @param {Boolean} opts.skipIoMappings A boolean value to control whether input/output mappings should be executed during deletion. `true`, if input/output mappings should not be invoked. (default to false)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteProcessDefinitionsByKeyAndTenantIdWithHttpInfo(key, tenantId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteProcessDefinitionsByKeyAndTenantId");
      }
      // verify the required parameter 'tenantId' is set
      if (tenantId === undefined || tenantId === null) {
        throw new Error("Missing the required parameter 'tenantId' when calling deleteProcessDefinitionsByKeyAndTenantId");
      }

      let pathParams = {
        'key': key,
        'tenant-id': tenantId
      };
      let queryParams = {
        'cascade': opts['cascade'],
        'skipCustomListeners': opts['skipCustomListeners'],
        'skipIoMappings': opts['skipIoMappings']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/process-definition/key/{key}/tenant-id/{tenant-id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete By Key
     * Deletes process definitions by a given key and which belong to a tenant id.
     * @param {String} key The key of the process definitions to be deleted.
     * @param {String} tenantId The id of the tenant the process definitions belong to.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.cascade `true`, if all process instances, historic process instances and jobs for this process definition should be deleted.
     * @param {Boolean} opts.skipCustomListeners `true`, if only the built-in ExecutionListeners should be notified with the end event. (default to false)
     * @param {Boolean} opts.skipIoMappings A boolean value to control whether input/output mappings should be executed during deletion. `true`, if input/output mappings should not be invoked. (default to false)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteProcessDefinitionsByKeyAndTenantId(key, tenantId, opts) {
      return this.deleteProcessDefinitionsByKeyAndTenantIdWithHttpInfo(key, tenantId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Activity Instance Statistics
     * Retrieves runtime statistics of a given process definition, grouped by activities. These statistics include the number of running activity instances, optionally the number of failed jobs and also optionally the number of incidents either grouped by incident types or for a specific incident type. **Note**: This does not include historic data.
     * @param {String} id The id of the process definition.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.failedJobs Whether to include the number of failed jobs in the result or not. Valid values are `true` or `false`.
     * @param {Boolean} opts.incidents Valid values for this property are `true` or `false`. If this property has been set to `true` the result will include the corresponding number of incidents for each occurred incident type. If it is set to `false`, the incidents will not be included in the result. Cannot be used in combination with `incidentsForType`.
     * @param {String} opts.incidentsForType If this property has been set with any incident type (i.e., a string value) the result will only include the number of incidents for the assigned incident type. Cannot be used in combination with `incidents`. See the [User Guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/incidents/#incident-types) for a list of incident types.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/ActivityStatisticsResultDto>} and HTTP response
     */
    getActivityStatisticsWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getActivityStatistics");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'failedJobs': opts['failedJobs'],
        'incidents': opts['incidents'],
        'incidentsForType': opts['incidentsForType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ActivityStatisticsResultDto];
      return this.apiClient.callApi(
        '/process-definition/{id}/statistics', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Activity Instance Statistics
     * Retrieves runtime statistics of a given process definition, grouped by activities. These statistics include the number of running activity instances, optionally the number of failed jobs and also optionally the number of incidents either grouped by incident types or for a specific incident type. **Note**: This does not include historic data.
     * @param {String} id The id of the process definition.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.failedJobs Whether to include the number of failed jobs in the result or not. Valid values are `true` or `false`.
     * @param {Boolean} opts.incidents Valid values for this property are `true` or `false`. If this property has been set to `true` the result will include the corresponding number of incidents for each occurred incident type. If it is set to `false`, the incidents will not be included in the result. Cannot be used in combination with `incidentsForType`.
     * @param {String} opts.incidentsForType If this property has been set with any incident type (i.e., a string value) the result will only include the number of incidents for the assigned incident type. Cannot be used in combination with `incidents`. See the [User Guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/incidents/#incident-types) for a list of incident types.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/ActivityStatisticsResultDto>}
     */
    getActivityStatistics(id, opts) {
      return this.getActivityStatisticsWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Activity Instance Statistics
     * Retrieves runtime statistics of the latest version of the given process definition which belongs to no tenant, grouped by activities. These statistics include the number of running activity instances, optionally the number of failed jobs and also optionally the number of incidents either grouped by incident types or for a specific incident type. **Note**: This does not include historic data.
     * @param {String} key The key of the process definition (the latest version thereof) to be retrieved.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.failedJobs Whether to include the number of failed jobs in the result or not. Valid values are `true` or `false`.
     * @param {Boolean} opts.incidents Valid values for this property are `true` or `false`. If this property has been set to `true` the result will include the corresponding number of incidents for each occurred incident type. If it is set to `false`, the incidents will not be included in the result. Cannot be used in combination with `incidentsForType`.
     * @param {String} opts.incidentsForType If this property has been set with any incident type (i.e., a string value) the result will only include the number of incidents for the assigned incident type. Cannot be used in combination with `incidents`. See the [User Guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/incidents/#incident-types) for a list of incident types.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/ActivityStatisticsResultDto>} and HTTP response
     */
    getActivityStatisticsByProcessDefinitionKeyWithHttpInfo(key, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getActivityStatisticsByProcessDefinitionKey");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
        'failedJobs': opts['failedJobs'],
        'incidents': opts['incidents'],
        'incidentsForType': opts['incidentsForType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ActivityStatisticsResultDto];
      return this.apiClient.callApi(
        '/process-definition/key/{key}/statistics', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Activity Instance Statistics
     * Retrieves runtime statistics of the latest version of the given process definition which belongs to no tenant, grouped by activities. These statistics include the number of running activity instances, optionally the number of failed jobs and also optionally the number of incidents either grouped by incident types or for a specific incident type. **Note**: This does not include historic data.
     * @param {String} key The key of the process definition (the latest version thereof) to be retrieved.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.failedJobs Whether to include the number of failed jobs in the result or not. Valid values are `true` or `false`.
     * @param {Boolean} opts.incidents Valid values for this property are `true` or `false`. If this property has been set to `true` the result will include the corresponding number of incidents for each occurred incident type. If it is set to `false`, the incidents will not be included in the result. Cannot be used in combination with `incidentsForType`.
     * @param {String} opts.incidentsForType If this property has been set with any incident type (i.e., a string value) the result will only include the number of incidents for the assigned incident type. Cannot be used in combination with `incidents`. See the [User Guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/incidents/#incident-types) for a list of incident types.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/ActivityStatisticsResultDto>}
     */
    getActivityStatisticsByProcessDefinitionKey(key, opts) {
      return this.getActivityStatisticsByProcessDefinitionKeyWithHttpInfo(key, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Activity Instance Statistics
     * Retrieves runtime statistics of the latest version of the given process definition for a tenant, grouped by activities. These statistics include the number of running activity instances, optionally the number of failed jobs and also optionally the number of incidents either grouped by incident types or for a specific incident type. **Note**: This does not include historic data.
     * @param {String} key The key of the process definition (the latest version thereof) to be retrieved.
     * @param {String} tenantId The id of the tenant the process definition belongs to.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.failedJobs Whether to include the number of failed jobs in the result or not. Valid values are `true` or `false`.
     * @param {Boolean} opts.incidents Valid values for this property are `true` or `false`. If this property has been set to `true` the result will include the corresponding number of incidents for each occurred incident type. If it is set to `false`, the incidents will not be included in the result. Cannot be used in combination with `incidentsForType`.
     * @param {String} opts.incidentsForType If this property has been set with any incident type (i.e., a string value) the result will only include the number of incidents for the assigned incident type. Cannot be used in combination with `incidents`. See the [User Guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/incidents/#incident-types) for a list of incident types.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/ActivityStatisticsResultDto>} and HTTP response
     */
    getActivityStatisticsByProcessDefinitionKeyAndTenantIdWithHttpInfo(key, tenantId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getActivityStatisticsByProcessDefinitionKeyAndTenantId");
      }
      // verify the required parameter 'tenantId' is set
      if (tenantId === undefined || tenantId === null) {
        throw new Error("Missing the required parameter 'tenantId' when calling getActivityStatisticsByProcessDefinitionKeyAndTenantId");
      }

      let pathParams = {
        'key': key,
        'tenant-id': tenantId
      };
      let queryParams = {
        'failedJobs': opts['failedJobs'],
        'incidents': opts['incidents'],
        'incidentsForType': opts['incidentsForType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ActivityStatisticsResultDto];
      return this.apiClient.callApi(
        '/process-definition/key/{key}/tenant-id/{tenant-id}/statistics', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Activity Instance Statistics
     * Retrieves runtime statistics of the latest version of the given process definition for a tenant, grouped by activities. These statistics include the number of running activity instances, optionally the number of failed jobs and also optionally the number of incidents either grouped by incident types or for a specific incident type. **Note**: This does not include historic data.
     * @param {String} key The key of the process definition (the latest version thereof) to be retrieved.
     * @param {String} tenantId The id of the tenant the process definition belongs to.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.failedJobs Whether to include the number of failed jobs in the result or not. Valid values are `true` or `false`.
     * @param {Boolean} opts.incidents Valid values for this property are `true` or `false`. If this property has been set to `true` the result will include the corresponding number of incidents for each occurred incident type. If it is set to `false`, the incidents will not be included in the result. Cannot be used in combination with `incidentsForType`.
     * @param {String} opts.incidentsForType If this property has been set with any incident type (i.e., a string value) the result will only include the number of incidents for the assigned incident type. Cannot be used in combination with `incidents`. See the [User Guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/incidents/#incident-types) for a list of incident types.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/ActivityStatisticsResultDto>}
     */
    getActivityStatisticsByProcessDefinitionKeyAndTenantId(key, tenantId, opts) {
      return this.getActivityStatisticsByProcessDefinitionKeyAndTenantIdWithHttpInfo(key, tenantId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Deployed Start Form
     * Retrieves the deployed form that can be referenced from a start event. For further information please refer to [User Guide](https://docs.camunda.org/manual/7.14/user-guide/task-forms/#embedded-task-forms).
     * @param {String} id The id of the process definition to get the deployed start form for.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link File} and HTTP response
     */
    getDeployedStartFormWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getDeployedStartForm");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/xhtml+xml', 'application/json'];
      let returnType = File;
      return this.apiClient.callApi(
        '/process-definition/{id}/deployed-start-form', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Deployed Start Form
     * Retrieves the deployed form that can be referenced from a start event. For further information please refer to [User Guide](https://docs.camunda.org/manual/7.14/user-guide/task-forms/#embedded-task-forms).
     * @param {String} id The id of the process definition to get the deployed start form for.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link File}
     */
    getDeployedStartForm(id) {
      return this.getDeployedStartFormWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Deployed Start Form
     * Retrieves the deployed form that can be referenced from a start event. For further information please refer to [User Guide](https://docs.camunda.org/manual/7.14/user-guide/task-forms/#embedded-task-forms).
     * @param {String} key The key of the process definition (the latest version thereof) to be retrieved.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link File} and HTTP response
     */
    getDeployedStartFormByKeyWithHttpInfo(key) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getDeployedStartFormByKey");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/xhtml+xml', 'application/json'];
      let returnType = File;
      return this.apiClient.callApi(
        '/process-definition/key/{key}/deployed-start-form', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Deployed Start Form
     * Retrieves the deployed form that can be referenced from a start event. For further information please refer to [User Guide](https://docs.camunda.org/manual/7.14/user-guide/task-forms/#embedded-task-forms).
     * @param {String} key The key of the process definition (the latest version thereof) to be retrieved.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link File}
     */
    getDeployedStartFormByKey(key) {
      return this.getDeployedStartFormByKeyWithHttpInfo(key)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Deployed Start Form
     * Retrieves the deployed form that can be referenced from a start event. For further information please refer to [User Guide](https://docs.camunda.org/manual/7.14/user-guide/task-forms/#embedded-task-forms).
     * @param {String} key The key of the process definition (the latest version thereof) to be retrieved.
     * @param {String} tenantId The id of the tenant the process definitions belong to.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link File} and HTTP response
     */
    getDeployedStartFormByKeyAndTenantIdWithHttpInfo(key, tenantId) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getDeployedStartFormByKeyAndTenantId");
      }
      // verify the required parameter 'tenantId' is set
      if (tenantId === undefined || tenantId === null) {
        throw new Error("Missing the required parameter 'tenantId' when calling getDeployedStartFormByKeyAndTenantId");
      }

      let pathParams = {
        'key': key,
        'tenant-id': tenantId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/xhtml+xml', 'application/json'];
      let returnType = File;
      return this.apiClient.callApi(
        '/process-definition/key/{key}/tenant-id/{tenant-id}/deployed-start-form', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Deployed Start Form
     * Retrieves the deployed form that can be referenced from a start event. For further information please refer to [User Guide](https://docs.camunda.org/manual/7.14/user-guide/task-forms/#embedded-task-forms).
     * @param {String} key The key of the process definition (the latest version thereof) to be retrieved.
     * @param {String} tenantId The id of the tenant the process definitions belong to.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link File}
     */
    getDeployedStartFormByKeyAndTenantId(key, tenantId) {
      return this.getDeployedStartFormByKeyAndTenantIdWithHttpInfo(key, tenantId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get
     * Retrieves the latest version of the process definition for tenant according to the `ProcessDefinition` interface in the engine.
     * @param {String} key The key of the process definition (the latest version thereof) to be retrieved.
     * @param {String} tenantId The id of the tenant the process definition belongs to.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ProcessDefinitionDto} and HTTP response
     */
    getLatestProcessDefinitionByTenantIdWithHttpInfo(key, tenantId) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getLatestProcessDefinitionByTenantId");
      }
      // verify the required parameter 'tenantId' is set
      if (tenantId === undefined || tenantId === null) {
        throw new Error("Missing the required parameter 'tenantId' when calling getLatestProcessDefinitionByTenantId");
      }

      let pathParams = {
        'key': key,
        'tenant-id': tenantId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProcessDefinitionDto;
      return this.apiClient.callApi(
        '/process-definition/key/{key}/tenant-id/{tenant-id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get
     * Retrieves the latest version of the process definition for tenant according to the `ProcessDefinition` interface in the engine.
     * @param {String} key The key of the process definition (the latest version thereof) to be retrieved.
     * @param {String} tenantId The id of the tenant the process definition belongs to.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ProcessDefinitionDto}
     */
    getLatestProcessDefinitionByTenantId(key, tenantId) {
      return this.getLatestProcessDefinitionByTenantIdWithHttpInfo(key, tenantId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get
     * Retrieves a process definition according to the `ProcessDefinition` interface in the engine.
     * @param {String} id The id of the process definition to be retrieved.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ProcessDefinitionDto} and HTTP response
     */
    getProcessDefinitionWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getProcessDefinition");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProcessDefinitionDto;
      return this.apiClient.callApi(
        '/process-definition/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get
     * Retrieves a process definition according to the `ProcessDefinition` interface in the engine.
     * @param {String} id The id of the process definition to be retrieved.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ProcessDefinitionDto}
     */
    getProcessDefinition(id) {
      return this.getProcessDefinitionWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get XML
     * Retrieves the BPMN 2.0 XML of a process definition.
     * @param {String} id The id of the process definition.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ProcessDefinitionDiagramDto} and HTTP response
     */
    getProcessDefinitionBpmn20XmlWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getProcessDefinitionBpmn20Xml");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProcessDefinitionDiagramDto;
      return this.apiClient.callApi(
        '/process-definition/{id}/xml', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get XML
     * Retrieves the BPMN 2.0 XML of a process definition.
     * @param {String} id The id of the process definition.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ProcessDefinitionDiagramDto}
     */
    getProcessDefinitionBpmn20Xml(id) {
      return this.getProcessDefinitionBpmn20XmlWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get XML
     * Retrieves latest version the BPMN 2.0 XML of a process definition.
     * @param {String} key The key of the process definition (the latest version thereof) whose XML should be retrieved.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ProcessDefinitionDiagramDto} and HTTP response
     */
    getProcessDefinitionBpmn20XmlByKeyWithHttpInfo(key) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getProcessDefinitionBpmn20XmlByKey");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProcessDefinitionDiagramDto;
      return this.apiClient.callApi(
        '/process-definition/key/{key}/xml', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get XML
     * Retrieves latest version the BPMN 2.0 XML of a process definition.
     * @param {String} key The key of the process definition (the latest version thereof) whose XML should be retrieved.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ProcessDefinitionDiagramDto}
     */
    getProcessDefinitionBpmn20XmlByKey(key) {
      return this.getProcessDefinitionBpmn20XmlByKeyWithHttpInfo(key)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get XML
     * Retrieves latest version the BPMN 2.0 XML of a process definition. Returns the XML for the latest version of the process definition for tenant.
     * @param {String} key The key of the process definition (the latest version thereof) whose XML should be retrieved.
     * @param {String} tenantId The id of the tenant the process definition belongs to.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ProcessDefinitionDiagramDto} and HTTP response
     */
    getProcessDefinitionBpmn20XmlByKeyAndTenantIdWithHttpInfo(key, tenantId) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getProcessDefinitionBpmn20XmlByKeyAndTenantId");
      }
      // verify the required parameter 'tenantId' is set
      if (tenantId === undefined || tenantId === null) {
        throw new Error("Missing the required parameter 'tenantId' when calling getProcessDefinitionBpmn20XmlByKeyAndTenantId");
      }

      let pathParams = {
        'key': key,
        'tenant-id': tenantId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProcessDefinitionDiagramDto;
      return this.apiClient.callApi(
        '/process-definition/key/{key}/tenant-id/{tenant-id}/xml', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get XML
     * Retrieves latest version the BPMN 2.0 XML of a process definition. Returns the XML for the latest version of the process definition for tenant.
     * @param {String} key The key of the process definition (the latest version thereof) whose XML should be retrieved.
     * @param {String} tenantId The id of the tenant the process definition belongs to.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ProcessDefinitionDiagramDto}
     */
    getProcessDefinitionBpmn20XmlByKeyAndTenantId(key, tenantId) {
      return this.getProcessDefinitionBpmn20XmlByKeyAndTenantIdWithHttpInfo(key, tenantId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get
     * Retrieves the latest version of the process definition which belongs to no tenant according to the `ProcessDefinition` interface in the engine.
     * @param {String} key The key of the process definition (the latest version thereof) to be retrieved.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ProcessDefinitionDto} and HTTP response
     */
    getProcessDefinitionByKeyWithHttpInfo(key) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getProcessDefinitionByKey");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProcessDefinitionDto;
      return this.apiClient.callApi(
        '/process-definition/key/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get
     * Retrieves the latest version of the process definition which belongs to no tenant according to the `ProcessDefinition` interface in the engine.
     * @param {String} key The key of the process definition (the latest version thereof) to be retrieved.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ProcessDefinitionDto}
     */
    getProcessDefinitionByKey(key) {
      return this.getProcessDefinitionByKeyWithHttpInfo(key)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Diagram
     * Retrieves the diagram of a process definition.  If the process definition's deployment contains an image resource with the same file name as the process definition, the deployed image will be returned by the Get Diagram endpoint. Example: `someProcess.bpmn` and `someProcess.png`. Supported file extentions for the image are: `svg`, `png`, `jpg`, and `gif`.
     * @param {String} id The id of the process definition.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link File} and HTTP response
     */
    getProcessDefinitionDiagramWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getProcessDefinitionDiagram");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/octet-stream', '*/*', 'application/json'];
      let returnType = File;
      return this.apiClient.callApi(
        '/process-definition/{id}/diagram', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Diagram
     * Retrieves the diagram of a process definition.  If the process definition's deployment contains an image resource with the same file name as the process definition, the deployed image will be returned by the Get Diagram endpoint. Example: `someProcess.bpmn` and `someProcess.png`. Supported file extentions for the image are: `svg`, `png`, `jpg`, and `gif`.
     * @param {String} id The id of the process definition.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link File}
     */
    getProcessDefinitionDiagram(id) {
      return this.getProcessDefinitionDiagramWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Diagram
     * Retrieves the diagram for the latest version of the process definition which belongs to no tenant.  If the process definition's deployment contains an image resource with the same file name as the process definition, the deployed image will be returned by the Get Diagram endpoint. Example: `someProcess.bpmn` and `someProcess.png`. Supported file extentions for the image are: `svg`, `png`, `jpg`, and `gif`.
     * @param {String} key The key of the process definition.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link File} and HTTP response
     */
    getProcessDefinitionDiagramByKeyWithHttpInfo(key) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getProcessDefinitionDiagramByKey");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/octet-stream', '*/*', 'application/json'];
      let returnType = File;
      return this.apiClient.callApi(
        '/process-definition/key/{key}/diagram', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Diagram
     * Retrieves the diagram for the latest version of the process definition which belongs to no tenant.  If the process definition's deployment contains an image resource with the same file name as the process definition, the deployed image will be returned by the Get Diagram endpoint. Example: `someProcess.bpmn` and `someProcess.png`. Supported file extentions for the image are: `svg`, `png`, `jpg`, and `gif`.
     * @param {String} key The key of the process definition.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link File}
     */
    getProcessDefinitionDiagramByKey(key) {
      return this.getProcessDefinitionDiagramByKeyWithHttpInfo(key)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Diagram
     * Retrieves the diagram for the latest version of the process definition for tenant.  If the process definition's deployment contains an image resource with the same file name as the process definition, the deployed image will be returned by the Get Diagram endpoint. Example: `someProcess.bpmn` and `someProcess.png`. Supported file extentions for the image are: `svg`, `png`, `jpg`, and `gif`.
     * @param {String} key The key of the process definition.
     * @param {String} tenantId The id of the tenant the process definition belongs to.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link File} and HTTP response
     */
    getProcessDefinitionDiagramByKeyAndTenantIdWithHttpInfo(key, tenantId) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getProcessDefinitionDiagramByKeyAndTenantId");
      }
      // verify the required parameter 'tenantId' is set
      if (tenantId === undefined || tenantId === null) {
        throw new Error("Missing the required parameter 'tenantId' when calling getProcessDefinitionDiagramByKeyAndTenantId");
      }

      let pathParams = {
        'key': key,
        'tenant-id': tenantId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/octet-stream', '*/*', 'application/json'];
      let returnType = File;
      return this.apiClient.callApi(
        '/process-definition/key/{key}/tenant-id/{tenant-id}/diagram', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Diagram
     * Retrieves the diagram for the latest version of the process definition for tenant.  If the process definition's deployment contains an image resource with the same file name as the process definition, the deployed image will be returned by the Get Diagram endpoint. Example: `someProcess.bpmn` and `someProcess.png`. Supported file extentions for the image are: `svg`, `png`, `jpg`, and `gif`.
     * @param {String} key The key of the process definition.
     * @param {String} tenantId The id of the tenant the process definition belongs to.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link File}
     */
    getProcessDefinitionDiagramByKeyAndTenantId(key, tenantId) {
      return this.getProcessDefinitionDiagramByKeyAndTenantIdWithHttpInfo(key, tenantId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Process Instance Statistics
     * Retrieves runtime statistics of the process engine, grouped by process definitions. These statistics include the number of running process instances, optionally the number of failed jobs and also optionally the number of incidents either grouped by incident types or for a specific incident type. **Note**: This does not include historic data.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.failedJobs Whether to include the number of failed jobs in the result or not. Valid values are `true` or `false`.
     * @param {Boolean} opts.incidents Valid values for this property are `true` or `false`. If this property has been set to `true` the result will include the corresponding number of incidents for each occurred incident type. If it is set to `false`, the incidents will not be included in the result. Cannot be used in combination with `incidentsForType`.
     * @param {String} opts.incidentsForType If this property has been set with any incident type (i.e., a string value) the result will only include the number of incidents for the assigned incident type. Cannot be used in combination with `incidents`. See the [User Guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/incidents/#incident-types) for a list of incident types.
     * @param {Boolean} opts.rootIncidents Valid values for this property are `true` or `false`. If this property has been set to `true` the result will include the corresponding number of root incidents for each occurred incident type. If it is set to `false`, the incidents will not be included in the result. Cannot be used in combination with `incidentsForType` or `incidents`.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/ProcessDefinitionStatisticsResultDto>} and HTTP response
     */
    getProcessDefinitionStatisticsWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'failedJobs': opts['failedJobs'],
        'incidents': opts['incidents'],
        'incidentsForType': opts['incidentsForType'],
        'rootIncidents': opts['rootIncidents']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ProcessDefinitionStatisticsResultDto];
      return this.apiClient.callApi(
        '/process-definition/statistics', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Process Instance Statistics
     * Retrieves runtime statistics of the process engine, grouped by process definitions. These statistics include the number of running process instances, optionally the number of failed jobs and also optionally the number of incidents either grouped by incident types or for a specific incident type. **Note**: This does not include historic data.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.failedJobs Whether to include the number of failed jobs in the result or not. Valid values are `true` or `false`.
     * @param {Boolean} opts.incidents Valid values for this property are `true` or `false`. If this property has been set to `true` the result will include the corresponding number of incidents for each occurred incident type. If it is set to `false`, the incidents will not be included in the result. Cannot be used in combination with `incidentsForType`.
     * @param {String} opts.incidentsForType If this property has been set with any incident type (i.e., a string value) the result will only include the number of incidents for the assigned incident type. Cannot be used in combination with `incidents`. See the [User Guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/incidents/#incident-types) for a list of incident types.
     * @param {Boolean} opts.rootIncidents Valid values for this property are `true` or `false`. If this property has been set to `true` the result will include the corresponding number of root incidents for each occurred incident type. If it is set to `false`, the incidents will not be included in the result. Cannot be used in combination with `incidentsForType` or `incidents`.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/ProcessDefinitionStatisticsResultDto>}
     */
    getProcessDefinitionStatistics(opts) {
      return this.getProcessDefinitionStatisticsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get List
     * Queries for process definitions that fulfill given parameters. Parameters may be the properties of  process definitions, such as the name, key or version. The size of the result set can be retrieved by using the [Get Definition Count](https://docs.camunda.org/manual/7.14/reference/rest/process-definition/get-query-count/) method.
     * @param {Object} opts Optional parameters
     * @param {String} opts.processDefinitionId Filter by process definition id.
     * @param {String} opts.processDefinitionIdIn Filter by a comma-separated list of process definition ids.
     * @param {String} opts.name Filter by process definition name.
     * @param {String} opts.nameLike Filter by process definition names that the parameter is a substring of.
     * @param {String} opts.deploymentId Filter by the deployment the id belongs to.
     * @param {Date} opts.deployedAfter Filter by the deploy time of the deployment the process definition belongs to. Only selects process definitions that have been deployed after (exclusive) a specific time. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.546+0200`.
     * @param {Date} opts.deployedAt Filter by the deploy time of the deployment the process definition belongs to. Only selects process definitions that have been deployed at a specific time (exact match). By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.546+0200`.
     * @param {String} opts.key Filter by process definition key, i.e., the id in the BPMN 2.0 XML. Exact match.
     * @param {String} opts.keysIn Filter by a comma-separated list of process definition keys.
     * @param {String} opts.keyLike Filter by process definition keys that the parameter is a substring of.
     * @param {String} opts.category Filter by process definition category. Exact match.
     * @param {String} opts.categoryLike Filter by process definition categories that the parameter is a substring of.
     * @param {Number} opts.version Filter by process definition version.
     * @param {Boolean} opts.latestVersion Only include those process definitions that are latest versions. Value may only be `true`, as `false` is the default behavior.
     * @param {String} opts.resourceName Filter by the name of the process definition resource. Exact match.
     * @param {String} opts.resourceNameLike Filter by names of those process definition resources that the parameter is a substring of.
     * @param {String} opts.startableBy Filter by a user name who is allowed to start the process.
     * @param {Boolean} opts.active Only include active process definitions. Value may only be `true`, as `false` is the default behavior.
     * @param {Boolean} opts.suspended Only include suspended process definitions. Value may only be `true`, as `false` is the default behavior.
     * @param {String} opts.incidentId Filter by the incident id.
     * @param {String} opts.incidentType Filter by the incident type. See the [User Guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/incidents/#incident-types) for a list of incident types.
     * @param {String} opts.incidentMessage Filter by the incident message. Exact match.
     * @param {String} opts.incidentMessageLike Filter by the incident message that the parameter is a substring of.
     * @param {String} opts.tenantIdIn Filter by a comma-separated list of tenant ids. A process definition must have one of the given tenant ids.
     * @param {Boolean} opts.withoutTenantId Only include process definitions which belong to no tenant. Value may only be true, as false is the default behavior.
     * @param {Boolean} opts.includeProcessDefinitionsWithoutTenantId Include process definitions which belong to no tenant. Can be used in combination with `tenantIdIn`. Value may only be `true`, as `false` is the default behavior.
     * @param {String} opts.versionTag Filter by the version tag.
     * @param {String} opts.versionTagLike Filter by the version tag that the parameter is a substring of.
     * @param {Boolean} opts.withoutVersionTag Only include process definitions without a `versionTag`.
     * @param {Boolean} opts.startableInTasklist Filter by process definitions which are startable in Tasklist..
     * @param {Boolean} opts.notStartableInTasklist Filter by process definitions which are not startable in Tasklist.
     * @param {Boolean} opts.startablePermissionCheck Filter by process definitions which the user is allowed to start in Tasklist. If the user doesn't have these permissions the result will be empty list. The permissions are: * `CREATE` permission for all Process instances * `CREATE_INSTANCE` and `READ` permission on Process definition level
     * @param {module:model/String} opts.sortBy Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter.
     * @param {module:model/String} opts.sortOrder Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter.
     * @param {Number} opts.firstResult Pagination of results. Specifies the index of the first result to return.
     * @param {Number} opts.maxResults Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/ProcessDefinitionDto>} and HTTP response
     */
    getProcessDefinitionsWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'processDefinitionId': opts['processDefinitionId'],
        'processDefinitionIdIn': opts['processDefinitionIdIn'],
        'name': opts['name'],
        'nameLike': opts['nameLike'],
        'deploymentId': opts['deploymentId'],
        'deployedAfter': opts['deployedAfter'],
        'deployedAt': opts['deployedAt'],
        'key': opts['key'],
        'keysIn': opts['keysIn'],
        'keyLike': opts['keyLike'],
        'category': opts['category'],
        'categoryLike': opts['categoryLike'],
        'version': opts['version'],
        'latestVersion': opts['latestVersion'],
        'resourceName': opts['resourceName'],
        'resourceNameLike': opts['resourceNameLike'],
        'startableBy': opts['startableBy'],
        'active': opts['active'],
        'suspended': opts['suspended'],
        'incidentId': opts['incidentId'],
        'incidentType': opts['incidentType'],
        'incidentMessage': opts['incidentMessage'],
        'incidentMessageLike': opts['incidentMessageLike'],
        'tenantIdIn': opts['tenantIdIn'],
        'withoutTenantId': opts['withoutTenantId'],
        'includeProcessDefinitionsWithoutTenantId': opts['includeProcessDefinitionsWithoutTenantId'],
        'versionTag': opts['versionTag'],
        'versionTagLike': opts['versionTagLike'],
        'withoutVersionTag': opts['withoutVersionTag'],
        'startableInTasklist': opts['startableInTasklist'],
        'notStartableInTasklist': opts['notStartableInTasklist'],
        'startablePermissionCheck': opts['startablePermissionCheck'],
        'sortBy': opts['sortBy'],
        'sortOrder': opts['sortOrder'],
        'firstResult': opts['firstResult'],
        'maxResults': opts['maxResults']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ProcessDefinitionDto];
      return this.apiClient.callApi(
        '/process-definition', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get List
     * Queries for process definitions that fulfill given parameters. Parameters may be the properties of  process definitions, such as the name, key or version. The size of the result set can be retrieved by using the [Get Definition Count](https://docs.camunda.org/manual/7.14/reference/rest/process-definition/get-query-count/) method.
     * @param {Object} opts Optional parameters
     * @param {String} opts.processDefinitionId Filter by process definition id.
     * @param {String} opts.processDefinitionIdIn Filter by a comma-separated list of process definition ids.
     * @param {String} opts.name Filter by process definition name.
     * @param {String} opts.nameLike Filter by process definition names that the parameter is a substring of.
     * @param {String} opts.deploymentId Filter by the deployment the id belongs to.
     * @param {Date} opts.deployedAfter Filter by the deploy time of the deployment the process definition belongs to. Only selects process definitions that have been deployed after (exclusive) a specific time. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.546+0200`.
     * @param {Date} opts.deployedAt Filter by the deploy time of the deployment the process definition belongs to. Only selects process definitions that have been deployed at a specific time (exact match). By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.546+0200`.
     * @param {String} opts.key Filter by process definition key, i.e., the id in the BPMN 2.0 XML. Exact match.
     * @param {String} opts.keysIn Filter by a comma-separated list of process definition keys.
     * @param {String} opts.keyLike Filter by process definition keys that the parameter is a substring of.
     * @param {String} opts.category Filter by process definition category. Exact match.
     * @param {String} opts.categoryLike Filter by process definition categories that the parameter is a substring of.
     * @param {Number} opts.version Filter by process definition version.
     * @param {Boolean} opts.latestVersion Only include those process definitions that are latest versions. Value may only be `true`, as `false` is the default behavior.
     * @param {String} opts.resourceName Filter by the name of the process definition resource. Exact match.
     * @param {String} opts.resourceNameLike Filter by names of those process definition resources that the parameter is a substring of.
     * @param {String} opts.startableBy Filter by a user name who is allowed to start the process.
     * @param {Boolean} opts.active Only include active process definitions. Value may only be `true`, as `false` is the default behavior.
     * @param {Boolean} opts.suspended Only include suspended process definitions. Value may only be `true`, as `false` is the default behavior.
     * @param {String} opts.incidentId Filter by the incident id.
     * @param {String} opts.incidentType Filter by the incident type. See the [User Guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/incidents/#incident-types) for a list of incident types.
     * @param {String} opts.incidentMessage Filter by the incident message. Exact match.
     * @param {String} opts.incidentMessageLike Filter by the incident message that the parameter is a substring of.
     * @param {String} opts.tenantIdIn Filter by a comma-separated list of tenant ids. A process definition must have one of the given tenant ids.
     * @param {Boolean} opts.withoutTenantId Only include process definitions which belong to no tenant. Value may only be true, as false is the default behavior.
     * @param {Boolean} opts.includeProcessDefinitionsWithoutTenantId Include process definitions which belong to no tenant. Can be used in combination with `tenantIdIn`. Value may only be `true`, as `false` is the default behavior.
     * @param {String} opts.versionTag Filter by the version tag.
     * @param {String} opts.versionTagLike Filter by the version tag that the parameter is a substring of.
     * @param {Boolean} opts.withoutVersionTag Only include process definitions without a `versionTag`.
     * @param {Boolean} opts.startableInTasklist Filter by process definitions which are startable in Tasklist..
     * @param {Boolean} opts.notStartableInTasklist Filter by process definitions which are not startable in Tasklist.
     * @param {Boolean} opts.startablePermissionCheck Filter by process definitions which the user is allowed to start in Tasklist. If the user doesn't have these permissions the result will be empty list. The permissions are: * `CREATE` permission for all Process instances * `CREATE_INSTANCE` and `READ` permission on Process definition level
     * @param {module:model/String} opts.sortBy Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter.
     * @param {module:model/String} opts.sortOrder Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter.
     * @param {Number} opts.firstResult Pagination of results. Specifies the index of the first result to return.
     * @param {Number} opts.maxResults Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/ProcessDefinitionDto>}
     */
    getProcessDefinitions(opts) {
      return this.getProcessDefinitionsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get List Count
     * Requests the number of process definitions that fulfill the query criteria. Takes the same filtering parameters as the [Get Definitions](https://docs.camunda.org/manual/7.14/reference/rest/process-definition/get-query/) method.
     * @param {Object} opts Optional parameters
     * @param {String} opts.processDefinitionId Filter by process definition id.
     * @param {String} opts.processDefinitionIdIn Filter by a comma-separated list of process definition ids.
     * @param {String} opts.name Filter by process definition name.
     * @param {String} opts.nameLike Filter by process definition names that the parameter is a substring of.
     * @param {String} opts.deploymentId Filter by the deployment the id belongs to.
     * @param {Date} opts.deployedAfter Filter by the deploy time of the deployment the process definition belongs to. Only selects process definitions that have been deployed after (exclusive) a specific time. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.546+0200`.
     * @param {Date} opts.deployedAt Filter by the deploy time of the deployment the process definition belongs to. Only selects process definitions that have been deployed at a specific time (exact match). By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.546+0200`.
     * @param {String} opts.key Filter by process definition key, i.e., the id in the BPMN 2.0 XML. Exact match.
     * @param {String} opts.keysIn Filter by a comma-separated list of process definition keys.
     * @param {String} opts.keyLike Filter by process definition keys that the parameter is a substring of.
     * @param {String} opts.category Filter by process definition category. Exact match.
     * @param {String} opts.categoryLike Filter by process definition categories that the parameter is a substring of.
     * @param {Number} opts.version Filter by process definition version.
     * @param {Boolean} opts.latestVersion Only include those process definitions that are latest versions. Value may only be `true`, as `false` is the default behavior.
     * @param {String} opts.resourceName Filter by the name of the process definition resource. Exact match.
     * @param {String} opts.resourceNameLike Filter by names of those process definition resources that the parameter is a substring of.
     * @param {String} opts.startableBy Filter by a user name who is allowed to start the process.
     * @param {Boolean} opts.active Only include active process definitions. Value may only be `true`, as `false` is the default behavior.
     * @param {Boolean} opts.suspended Only include suspended process definitions. Value may only be `true`, as `false` is the default behavior.
     * @param {String} opts.incidentId Filter by the incident id.
     * @param {String} opts.incidentType Filter by the incident type. See the [User Guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/incidents/#incident-types) for a list of incident types.
     * @param {String} opts.incidentMessage Filter by the incident message. Exact match.
     * @param {String} opts.incidentMessageLike Filter by the incident message that the parameter is a substring of.
     * @param {String} opts.tenantIdIn Filter by a comma-separated list of tenant ids. A process definition must have one of the given tenant ids.
     * @param {Boolean} opts.withoutTenantId Only include process definitions which belong to no tenant. Value may only be true, as false is the default behavior.
     * @param {Boolean} opts.includeProcessDefinitionsWithoutTenantId Include process definitions which belong to no tenant. Can be used in combination with `tenantIdIn`. Value may only be `true`, as `false` is the default behavior.
     * @param {String} opts.versionTag Filter by the version tag.
     * @param {String} opts.versionTagLike Filter by the version tag that the parameter is a substring of.
     * @param {Boolean} opts.withoutVersionTag Only include process definitions without a `versionTag`.
     * @param {Boolean} opts.startableInTasklist Filter by process definitions which are startable in Tasklist..
     * @param {Boolean} opts.notStartableInTasklist Filter by process definitions which are not startable in Tasklist.
     * @param {Boolean} opts.startablePermissionCheck Filter by process definitions which the user is allowed to start in Tasklist. If the user doesn't have these permissions the result will be empty list. The permissions are: * `CREATE` permission for all Process instances * `CREATE_INSTANCE` and `READ` permission on Process definition level
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CountResultDto} and HTTP response
     */
    getProcessDefinitionsCountWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'processDefinitionId': opts['processDefinitionId'],
        'processDefinitionIdIn': opts['processDefinitionIdIn'],
        'name': opts['name'],
        'nameLike': opts['nameLike'],
        'deploymentId': opts['deploymentId'],
        'deployedAfter': opts['deployedAfter'],
        'deployedAt': opts['deployedAt'],
        'key': opts['key'],
        'keysIn': opts['keysIn'],
        'keyLike': opts['keyLike'],
        'category': opts['category'],
        'categoryLike': opts['categoryLike'],
        'version': opts['version'],
        'latestVersion': opts['latestVersion'],
        'resourceName': opts['resourceName'],
        'resourceNameLike': opts['resourceNameLike'],
        'startableBy': opts['startableBy'],
        'active': opts['active'],
        'suspended': opts['suspended'],
        'incidentId': opts['incidentId'],
        'incidentType': opts['incidentType'],
        'incidentMessage': opts['incidentMessage'],
        'incidentMessageLike': opts['incidentMessageLike'],
        'tenantIdIn': opts['tenantIdIn'],
        'withoutTenantId': opts['withoutTenantId'],
        'includeProcessDefinitionsWithoutTenantId': opts['includeProcessDefinitionsWithoutTenantId'],
        'versionTag': opts['versionTag'],
        'versionTagLike': opts['versionTagLike'],
        'withoutVersionTag': opts['withoutVersionTag'],
        'startableInTasklist': opts['startableInTasklist'],
        'notStartableInTasklist': opts['notStartableInTasklist'],
        'startablePermissionCheck': opts['startablePermissionCheck']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CountResultDto;
      return this.apiClient.callApi(
        '/process-definition/count', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get List Count
     * Requests the number of process definitions that fulfill the query criteria. Takes the same filtering parameters as the [Get Definitions](https://docs.camunda.org/manual/7.14/reference/rest/process-definition/get-query/) method.
     * @param {Object} opts Optional parameters
     * @param {String} opts.processDefinitionId Filter by process definition id.
     * @param {String} opts.processDefinitionIdIn Filter by a comma-separated list of process definition ids.
     * @param {String} opts.name Filter by process definition name.
     * @param {String} opts.nameLike Filter by process definition names that the parameter is a substring of.
     * @param {String} opts.deploymentId Filter by the deployment the id belongs to.
     * @param {Date} opts.deployedAfter Filter by the deploy time of the deployment the process definition belongs to. Only selects process definitions that have been deployed after (exclusive) a specific time. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.546+0200`.
     * @param {Date} opts.deployedAt Filter by the deploy time of the deployment the process definition belongs to. Only selects process definitions that have been deployed at a specific time (exact match). By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.546+0200`.
     * @param {String} opts.key Filter by process definition key, i.e., the id in the BPMN 2.0 XML. Exact match.
     * @param {String} opts.keysIn Filter by a comma-separated list of process definition keys.
     * @param {String} opts.keyLike Filter by process definition keys that the parameter is a substring of.
     * @param {String} opts.category Filter by process definition category. Exact match.
     * @param {String} opts.categoryLike Filter by process definition categories that the parameter is a substring of.
     * @param {Number} opts.version Filter by process definition version.
     * @param {Boolean} opts.latestVersion Only include those process definitions that are latest versions. Value may only be `true`, as `false` is the default behavior.
     * @param {String} opts.resourceName Filter by the name of the process definition resource. Exact match.
     * @param {String} opts.resourceNameLike Filter by names of those process definition resources that the parameter is a substring of.
     * @param {String} opts.startableBy Filter by a user name who is allowed to start the process.
     * @param {Boolean} opts.active Only include active process definitions. Value may only be `true`, as `false` is the default behavior.
     * @param {Boolean} opts.suspended Only include suspended process definitions. Value may only be `true`, as `false` is the default behavior.
     * @param {String} opts.incidentId Filter by the incident id.
     * @param {String} opts.incidentType Filter by the incident type. See the [User Guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/incidents/#incident-types) for a list of incident types.
     * @param {String} opts.incidentMessage Filter by the incident message. Exact match.
     * @param {String} opts.incidentMessageLike Filter by the incident message that the parameter is a substring of.
     * @param {String} opts.tenantIdIn Filter by a comma-separated list of tenant ids. A process definition must have one of the given tenant ids.
     * @param {Boolean} opts.withoutTenantId Only include process definitions which belong to no tenant. Value may only be true, as false is the default behavior.
     * @param {Boolean} opts.includeProcessDefinitionsWithoutTenantId Include process definitions which belong to no tenant. Can be used in combination with `tenantIdIn`. Value may only be `true`, as `false` is the default behavior.
     * @param {String} opts.versionTag Filter by the version tag.
     * @param {String} opts.versionTagLike Filter by the version tag that the parameter is a substring of.
     * @param {Boolean} opts.withoutVersionTag Only include process definitions without a `versionTag`.
     * @param {Boolean} opts.startableInTasklist Filter by process definitions which are startable in Tasklist..
     * @param {Boolean} opts.notStartableInTasklist Filter by process definitions which are not startable in Tasklist.
     * @param {Boolean} opts.startablePermissionCheck Filter by process definitions which the user is allowed to start in Tasklist. If the user doesn't have these permissions the result will be empty list. The permissions are: * `CREATE` permission for all Process instances * `CREATE_INSTANCE` and `READ` permission on Process definition level
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CountResultDto}
     */
    getProcessDefinitionsCount(opts) {
      return this.getProcessDefinitionsCountWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Rendered Start Form
     * Retrieves the rendered form for a process definition. This method can be used to get the HTML rendering of a [Generated Task Form](https://docs.camunda.org/manual/7.14/user-guide/task-forms/#generated-task-forms).
     * @param {String} id The id of the process definition to get the rendered start form for.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link File} and HTTP response
     */
    getRenderedStartFormWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getRenderedStartForm");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/xhtml+xml', 'application/json'];
      let returnType = File;
      return this.apiClient.callApi(
        '/process-definition/{id}/rendered-form', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Rendered Start Form
     * Retrieves the rendered form for a process definition. This method can be used to get the HTML rendering of a [Generated Task Form](https://docs.camunda.org/manual/7.14/user-guide/task-forms/#generated-task-forms).
     * @param {String} id The id of the process definition to get the rendered start form for.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link File}
     */
    getRenderedStartForm(id) {
      return this.getRenderedStartFormWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Rendered Start Form
     * Retrieves  the rendered form for the latest version of the process definition which belongs to no tenant. This method can be used to get the HTML rendering of a [Generated Task Form](https://docs.camunda.org/manual/7.14/user-guide/task-forms/#generated-task-forms).
     * @param {String} key The key of the process definition (the latest version thereof) to be retrieved.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link File} and HTTP response
     */
    getRenderedStartFormByKeyWithHttpInfo(key) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getRenderedStartFormByKey");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/xhtml+xml', 'application/json'];
      let returnType = File;
      return this.apiClient.callApi(
        '/process-definition/key/{key}/rendered-form', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Rendered Start Form
     * Retrieves  the rendered form for the latest version of the process definition which belongs to no tenant. This method can be used to get the HTML rendering of a [Generated Task Form](https://docs.camunda.org/manual/7.14/user-guide/task-forms/#generated-task-forms).
     * @param {String} key The key of the process definition (the latest version thereof) to be retrieved.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link File}
     */
    getRenderedStartFormByKey(key) {
      return this.getRenderedStartFormByKeyWithHttpInfo(key)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Rendered Start Form
     * Retrieves  the rendered form for the latest version of the process definition for a tenant. This method can be used to get the HTML rendering of a [Generated Task Form](https://docs.camunda.org/manual/7.14/user-guide/task-forms/#generated-task-forms).
     * @param {String} key The key of the process definition (the latest version thereof) to be retrieved.
     * @param {String} tenantId The id of the tenant the process definition belongs to.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link File} and HTTP response
     */
    getRenderedStartFormByKeyAndTenantIdWithHttpInfo(key, tenantId) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getRenderedStartFormByKeyAndTenantId");
      }
      // verify the required parameter 'tenantId' is set
      if (tenantId === undefined || tenantId === null) {
        throw new Error("Missing the required parameter 'tenantId' when calling getRenderedStartFormByKeyAndTenantId");
      }

      let pathParams = {
        'key': key,
        'tenant-id': tenantId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/xhtml+xml', 'application/json'];
      let returnType = File;
      return this.apiClient.callApi(
        '/process-definition/key/{key}/tenant-id/{tenant-id}/rendered-form', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Rendered Start Form
     * Retrieves  the rendered form for the latest version of the process definition for a tenant. This method can be used to get the HTML rendering of a [Generated Task Form](https://docs.camunda.org/manual/7.14/user-guide/task-forms/#generated-task-forms).
     * @param {String} key The key of the process definition (the latest version thereof) to be retrieved.
     * @param {String} tenantId The id of the tenant the process definition belongs to.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link File}
     */
    getRenderedStartFormByKeyAndTenantId(key, tenantId) {
      return this.getRenderedStartFormByKeyAndTenantIdWithHttpInfo(key, tenantId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Start Form Key
     * Retrieves the key of the start form for a process definition. The form key corresponds to the `FormData#formKey` property in the engine.
     * @param {String} id The id of the process definition to get the start form key for.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/FormDto} and HTTP response
     */
    getStartFormWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getStartForm");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FormDto;
      return this.apiClient.callApi(
        '/process-definition/{id}/startForm', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Start Form Key
     * Retrieves the key of the start form for a process definition. The form key corresponds to the `FormData#formKey` property in the engine.
     * @param {String} id The id of the process definition to get the start form key for.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/FormDto}
     */
    getStartForm(id) {
      return this.getStartFormWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Start Form Key
     * Retrieves the key of the start form for the latest version of the process definition which belongs to no tenant. The form key corresponds to the `FormData#formKey` property in the engine.
     * @param {String} key The key of the process definition (the latest version thereof) for which the form key is to be retrieved.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/FormDto} and HTTP response
     */
    getStartFormByKeyWithHttpInfo(key) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getStartFormByKey");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FormDto;
      return this.apiClient.callApi(
        '/process-definition/key/{key}/startForm', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Start Form Key
     * Retrieves the key of the start form for the latest version of the process definition which belongs to no tenant. The form key corresponds to the `FormData#formKey` property in the engine.
     * @param {String} key The key of the process definition (the latest version thereof) for which the form key is to be retrieved.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/FormDto}
     */
    getStartFormByKey(key) {
      return this.getStartFormByKeyWithHttpInfo(key)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Start Form Key
     * Retrieves the key of the start form for the latest version of the process definition for a tenant. The form key corresponds to the `FormData#formKey` property in the engine.
     * @param {String} key The key of the process definition (the latest version thereof) for which the form key is to be retrieved.
     * @param {String} tenantId The id of the tenant the process definition belongs to.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/FormDto} and HTTP response
     */
    getStartFormByKeyAndTenantIdWithHttpInfo(key, tenantId) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getStartFormByKeyAndTenantId");
      }
      // verify the required parameter 'tenantId' is set
      if (tenantId === undefined || tenantId === null) {
        throw new Error("Missing the required parameter 'tenantId' when calling getStartFormByKeyAndTenantId");
      }

      let pathParams = {
        'key': key,
        'tenant-id': tenantId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FormDto;
      return this.apiClient.callApi(
        '/process-definition/key/{key}/tenant-id/{tenant-id}/startForm', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Start Form Key
     * Retrieves the key of the start form for the latest version of the process definition for a tenant. The form key corresponds to the `FormData#formKey` property in the engine.
     * @param {String} key The key of the process definition (the latest version thereof) for which the form key is to be retrieved.
     * @param {String} tenantId The id of the tenant the process definition belongs to.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/FormDto}
     */
    getStartFormByKeyAndTenantId(key, tenantId) {
      return this.getStartFormByKeyAndTenantIdWithHttpInfo(key, tenantId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Start Form Variables
     * Retrieves the start form variables for a process definition (only if they are defined via the  [Generated Task Form](https://docs.camunda.org/manual/7.14/user-guide/task-forms/#generated-task-forms) approach). The start form variables take form data specified on the start event into account. If form fields are defined, the variable types and default values of the form fields are taken into account.
     * @param {String} id The id of the process definition to retrieve the variables for.
     * @param {Object} opts Optional parameters
     * @param {String} opts.variableNames A comma-separated list of variable names. Allows restricting the list of requested variables to the variable names in the list. It is best practice to restrict the list of variables to the variables actually required by the form in order to minimize fetching of data. If the query parameter is ommitted all variables are fetched. If the query parameter contains non-existent variable names, the variable names are ignored.
     * @param {Boolean} opts.deserializeValues Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default true).  If set to true, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson's](http://jackson.codehaus.org/) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API's classpath.  If set to false, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note**: While true is the default value for reasons of backward compatibility, we recommend setting this parameter to false when developing web applications that are independent of the Java process applications deployed to the engine. (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object.<String, module:model/{String: VariableValueDto}>} and HTTP response
     */
    getStartFormVariablesWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getStartFormVariables");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'variableNames': opts['variableNames'],
        'deserializeValues': opts['deserializeValues']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = {'String': VariableValueDto};
      return this.apiClient.callApi(
        '/process-definition/{id}/form-variables', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Start Form Variables
     * Retrieves the start form variables for a process definition (only if they are defined via the  [Generated Task Form](https://docs.camunda.org/manual/7.14/user-guide/task-forms/#generated-task-forms) approach). The start form variables take form data specified on the start event into account. If form fields are defined, the variable types and default values of the form fields are taken into account.
     * @param {String} id The id of the process definition to retrieve the variables for.
     * @param {Object} opts Optional parameters
     * @param {String} opts.variableNames A comma-separated list of variable names. Allows restricting the list of requested variables to the variable names in the list. It is best practice to restrict the list of variables to the variables actually required by the form in order to minimize fetching of data. If the query parameter is ommitted all variables are fetched. If the query parameter contains non-existent variable names, the variable names are ignored.
     * @param {Boolean} opts.deserializeValues Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default true).  If set to true, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson's](http://jackson.codehaus.org/) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API's classpath.  If set to false, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note**: While true is the default value for reasons of backward compatibility, we recommend setting this parameter to false when developing web applications that are independent of the Java process applications deployed to the engine. (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object.<String, module:model/{String: VariableValueDto}>}
     */
    getStartFormVariables(id, opts) {
      return this.getStartFormVariablesWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Start Form Variables
     * Retrieves the start form variables for the latest process definition which belongs to no tenant (only if they are defined via the  [Generated Task Form](https://docs.camunda.org/manual/7.14/user-guide/task-forms/#generated-task-forms) approach). The start form variables take form data specified on the start event into account. If form fields are defined, the variable types and default values of the form fields are taken into account.
     * @param {String} key The key of the process definition (the latest version thereof) to be retrieved.
     * @param {Object} opts Optional parameters
     * @param {String} opts.variableNames A comma-separated list of variable names. Allows restricting the list of requested variables to the variable names in the list. It is best practice to restrict the list of variables to the variables actually required by the form in order to minimize fetching of data. If the query parameter is ommitted all variables are fetched. If the query parameter contains non-existent variable names, the variable names are ignored.
     * @param {Boolean} opts.deserializeValues Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default true).  If set to true, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson's](http://jackson.codehaus.org/) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API's classpath.  If set to false, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note**: While true is the default value for reasons of backward compatibility, we recommend setting this parameter to false when developing web applications that are independent of the Java process applications deployed to the engine. (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object.<String, module:model/{String: VariableValueDto}>} and HTTP response
     */
    getStartFormVariablesByKeyWithHttpInfo(key, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getStartFormVariablesByKey");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
        'variableNames': opts['variableNames'],
        'deserializeValues': opts['deserializeValues']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = {'String': VariableValueDto};
      return this.apiClient.callApi(
        '/process-definition/key/{key}/form-variables', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Start Form Variables
     * Retrieves the start form variables for the latest process definition which belongs to no tenant (only if they are defined via the  [Generated Task Form](https://docs.camunda.org/manual/7.14/user-guide/task-forms/#generated-task-forms) approach). The start form variables take form data specified on the start event into account. If form fields are defined, the variable types and default values of the form fields are taken into account.
     * @param {String} key The key of the process definition (the latest version thereof) to be retrieved.
     * @param {Object} opts Optional parameters
     * @param {String} opts.variableNames A comma-separated list of variable names. Allows restricting the list of requested variables to the variable names in the list. It is best practice to restrict the list of variables to the variables actually required by the form in order to minimize fetching of data. If the query parameter is ommitted all variables are fetched. If the query parameter contains non-existent variable names, the variable names are ignored.
     * @param {Boolean} opts.deserializeValues Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default true).  If set to true, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson's](http://jackson.codehaus.org/) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API's classpath.  If set to false, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note**: While true is the default value for reasons of backward compatibility, we recommend setting this parameter to false when developing web applications that are independent of the Java process applications deployed to the engine. (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object.<String, module:model/{String: VariableValueDto}>}
     */
    getStartFormVariablesByKey(key, opts) {
      return this.getStartFormVariablesByKeyWithHttpInfo(key, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Start Form Variables
     * Retrieves the start form variables for the latest process definition for a tenant (only if they are defined via the  [Generated Task Form](https://docs.camunda.org/manual/7.14/user-guide/task-forms/#generated-task-forms) approach). The start form variables take form data specified on the start event into account. If form fields are defined, the variable types and default values of the form fields are taken into account.
     * @param {String} key The key of the process definition (the latest version thereof) to be retrieved.
     * @param {String} tenantId The id of the tenant the process definition belongs to.
     * @param {Object} opts Optional parameters
     * @param {String} opts.variableNames A comma-separated list of variable names. Allows restricting the list of requested variables to the variable names in the list. It is best practice to restrict the list of variables to the variables actually required by the form in order to minimize fetching of data. If the query parameter is ommitted all variables are fetched. If the query parameter contains non-existent variable names, the variable names are ignored.
     * @param {Boolean} opts.deserializeValues Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default true).  If set to true, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson's](http://jackson.codehaus.org/) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API's classpath.  If set to false, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note**: While true is the default value for reasons of backward compatibility, we recommend setting this parameter to false when developing web applications that are independent of the Java process applications deployed to the engine. (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object.<String, module:model/{String: VariableValueDto}>} and HTTP response
     */
    getStartFormVariablesByKeyAndTenantIdWithHttpInfo(key, tenantId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getStartFormVariablesByKeyAndTenantId");
      }
      // verify the required parameter 'tenantId' is set
      if (tenantId === undefined || tenantId === null) {
        throw new Error("Missing the required parameter 'tenantId' when calling getStartFormVariablesByKeyAndTenantId");
      }

      let pathParams = {
        'key': key,
        'tenant-id': tenantId
      };
      let queryParams = {
        'variableNames': opts['variableNames'],
        'deserializeValues': opts['deserializeValues']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = {'String': VariableValueDto};
      return this.apiClient.callApi(
        '/process-definition/key/{key}/tenant-id/{tenant-id}/form-variables', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Start Form Variables
     * Retrieves the start form variables for the latest process definition for a tenant (only if they are defined via the  [Generated Task Form](https://docs.camunda.org/manual/7.14/user-guide/task-forms/#generated-task-forms) approach). The start form variables take form data specified on the start event into account. If form fields are defined, the variable types and default values of the form fields are taken into account.
     * @param {String} key The key of the process definition (the latest version thereof) to be retrieved.
     * @param {String} tenantId The id of the tenant the process definition belongs to.
     * @param {Object} opts Optional parameters
     * @param {String} opts.variableNames A comma-separated list of variable names. Allows restricting the list of requested variables to the variable names in the list. It is best practice to restrict the list of variables to the variables actually required by the form in order to minimize fetching of data. If the query parameter is ommitted all variables are fetched. If the query parameter contains non-existent variable names, the variable names are ignored.
     * @param {Boolean} opts.deserializeValues Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default true).  If set to true, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson's](http://jackson.codehaus.org/) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API's classpath.  If set to false, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note**: While true is the default value for reasons of backward compatibility, we recommend setting this parameter to false when developing web applications that are independent of the Java process applications deployed to the engine. (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object.<String, module:model/{String: VariableValueDto}>}
     */
    getStartFormVariablesByKeyAndTenantId(key, tenantId, opts) {
      return this.getStartFormVariablesByKeyAndTenantIdWithHttpInfo(key, tenantId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Restart Process Instance
     * Restarts process instances that were canceled or terminated synchronously. Can also restart completed process instances. It will create a new instance using the original instance information. To execute the restart asynchronously, use the [Restart Process Instance Async](https://docs.camunda.org/manual/7.14/reference/rest/process-definition/post-restart-process-instance-async/) method.  For more information about the difference between synchronous and asynchronous execution, please refer to the related section of the [User Guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/process-instance-restart/#execution).
     * @param {String} id The id of the process definition of the process instances to restart.
     * @param {Object} opts Optional parameters
     * @param {module:model/RestartProcessInstanceDto} opts.restartProcessInstanceDto 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    restartProcessInstanceWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = opts['restartProcessInstanceDto'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling restartProcessInstance");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/process-definition/{id}/restart', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Restart Process Instance
     * Restarts process instances that were canceled or terminated synchronously. Can also restart completed process instances. It will create a new instance using the original instance information. To execute the restart asynchronously, use the [Restart Process Instance Async](https://docs.camunda.org/manual/7.14/reference/rest/process-definition/post-restart-process-instance-async/) method.  For more information about the difference between synchronous and asynchronous execution, please refer to the related section of the [User Guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/process-instance-restart/#execution).
     * @param {String} id The id of the process definition of the process instances to restart.
     * @param {Object} opts Optional parameters
     * @param {module:model/RestartProcessInstanceDto} opts.restartProcessInstanceDto 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    restartProcessInstance(id, opts) {
      return this.restartProcessInstanceWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Restart Process Instance Async
     * Restarts process instances that were canceled or terminated asynchronously. Can also restart completed process instances. It will create a new instance using the original instance information. To execute the restart asynchronously, use the [Restart Process Instance](https://docs.camunda.org/manual/7.14/reference/rest/process-definition/post-restart-process-instance-sync/) method.  For more information about the difference between synchronous and asynchronous execution, please refer to the related section of the [User Guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/process-instance-restart/#execution).
     * @param {String} id The id of the process definition of the process instances to restart.
     * @param {Object} opts Optional parameters
     * @param {module:model/RestartProcessInstanceDto} opts.restartProcessInstanceDto 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/BatchDto} and HTTP response
     */
    restartProcessInstanceAsyncOperationWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = opts['restartProcessInstanceDto'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling restartProcessInstanceAsyncOperation");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BatchDto;
      return this.apiClient.callApi(
        '/process-definition/{id}/restart-async', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Restart Process Instance Async
     * Restarts process instances that were canceled or terminated asynchronously. Can also restart completed process instances. It will create a new instance using the original instance information. To execute the restart asynchronously, use the [Restart Process Instance](https://docs.camunda.org/manual/7.14/reference/rest/process-definition/post-restart-process-instance-sync/) method.  For more information about the difference between synchronous and asynchronous execution, please refer to the related section of the [User Guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/process-instance-restart/#execution).
     * @param {String} id The id of the process definition of the process instances to restart.
     * @param {Object} opts Optional parameters
     * @param {module:model/RestartProcessInstanceDto} opts.restartProcessInstanceDto 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/BatchDto}
     */
    restartProcessInstanceAsyncOperation(id, opts) {
      return this.restartProcessInstanceAsyncOperationWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Start Instance
     * Instantiates a given process definition. Process variables and business key may be supplied in the request body.
     * @param {String} id The id of the process definition to be retrieved.
     * @param {Object} opts Optional parameters
     * @param {module:model/StartProcessInstanceDto} opts.startProcessInstanceDto 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ProcessInstanceWithVariablesDto} and HTTP response
     */
    startProcessInstanceWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = opts['startProcessInstanceDto'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling startProcessInstance");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ProcessInstanceWithVariablesDto;
      return this.apiClient.callApi(
        '/process-definition/{id}/start', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Start Instance
     * Instantiates a given process definition. Process variables and business key may be supplied in the request body.
     * @param {String} id The id of the process definition to be retrieved.
     * @param {Object} opts Optional parameters
     * @param {module:model/StartProcessInstanceDto} opts.startProcessInstanceDto 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ProcessInstanceWithVariablesDto}
     */
    startProcessInstance(id, opts) {
      return this.startProcessInstanceWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Start Instance
     * Instantiates a given process definition, starts the latest version of the process definition which belongs to no tenant. Process variables and business key may be supplied in the request body.
     * @param {String} key The key of the process definition (the latest version thereof) to be retrieved.
     * @param {Object} opts Optional parameters
     * @param {module:model/StartProcessInstanceDto} opts.startProcessInstanceDto 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ProcessInstanceWithVariablesDto} and HTTP response
     */
    startProcessInstanceByKeyWithHttpInfo(key, opts) {
      opts = opts || {};
      let postBody = opts['startProcessInstanceDto'];
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling startProcessInstanceByKey");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ProcessInstanceWithVariablesDto;
      return this.apiClient.callApi(
        '/process-definition/key/{key}/start', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Start Instance
     * Instantiates a given process definition, starts the latest version of the process definition which belongs to no tenant. Process variables and business key may be supplied in the request body.
     * @param {String} key The key of the process definition (the latest version thereof) to be retrieved.
     * @param {Object} opts Optional parameters
     * @param {module:model/StartProcessInstanceDto} opts.startProcessInstanceDto 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ProcessInstanceWithVariablesDto}
     */
    startProcessInstanceByKey(key, opts) {
      return this.startProcessInstanceByKeyWithHttpInfo(key, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Start Instance
     * Instantiates a given process definition, starts the latest version of the process definition for tenant. Process variables and business key may be supplied in the request body.
     * @param {String} key The key of the process definition (the latest version thereof) to be retrieved.
     * @param {String} tenantId The id of the tenant the process definition belongs to.
     * @param {Object} opts Optional parameters
     * @param {module:model/StartProcessInstanceDto} opts.startProcessInstanceDto 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ProcessInstanceWithVariablesDto} and HTTP response
     */
    startProcessInstanceByKeyAndTenantIdWithHttpInfo(key, tenantId, opts) {
      opts = opts || {};
      let postBody = opts['startProcessInstanceDto'];
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling startProcessInstanceByKeyAndTenantId");
      }
      // verify the required parameter 'tenantId' is set
      if (tenantId === undefined || tenantId === null) {
        throw new Error("Missing the required parameter 'tenantId' when calling startProcessInstanceByKeyAndTenantId");
      }

      let pathParams = {
        'key': key,
        'tenant-id': tenantId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ProcessInstanceWithVariablesDto;
      return this.apiClient.callApi(
        '/process-definition/key/{key}/tenant-id/{tenant-id}/start', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Start Instance
     * Instantiates a given process definition, starts the latest version of the process definition for tenant. Process variables and business key may be supplied in the request body.
     * @param {String} key The key of the process definition (the latest version thereof) to be retrieved.
     * @param {String} tenantId The id of the tenant the process definition belongs to.
     * @param {Object} opts Optional parameters
     * @param {module:model/StartProcessInstanceDto} opts.startProcessInstanceDto 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ProcessInstanceWithVariablesDto}
     */
    startProcessInstanceByKeyAndTenantId(key, tenantId, opts) {
      return this.startProcessInstanceByKeyAndTenantIdWithHttpInfo(key, tenantId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Submit Start Form
     * Starts a process instance using a set of process variables and the business key. If the start event has Form Field Metadata defined, the process engine will perform backend validation for any form fields which have validators defined. See [Documentation on Generated Task Forms](https://docs.camunda.org/manual/7.14/user-guide/task-forms/#generated-task-forms).
     * @param {String} id The id of the process definition to submit the form for.
     * @param {Object} opts Optional parameters
     * @param {module:model/StartProcessInstanceFormDto} opts.startProcessInstanceFormDto 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ProcessInstanceDto} and HTTP response
     */
    submitFormWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = opts['startProcessInstanceFormDto'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling submitForm");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ProcessInstanceDto;
      return this.apiClient.callApi(
        '/process-definition/{id}/submit-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Submit Start Form
     * Starts a process instance using a set of process variables and the business key. If the start event has Form Field Metadata defined, the process engine will perform backend validation for any form fields which have validators defined. See [Documentation on Generated Task Forms](https://docs.camunda.org/manual/7.14/user-guide/task-forms/#generated-task-forms).
     * @param {String} id The id of the process definition to submit the form for.
     * @param {Object} opts Optional parameters
     * @param {module:model/StartProcessInstanceFormDto} opts.startProcessInstanceFormDto 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ProcessInstanceDto}
     */
    submitForm(id, opts) {
      return this.submitFormWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Submit Start Form
     * Starts the latest version of the process definition which belongs to no tenant using a set of process variables and the business key. If the start event has Form Field Metadata defined, the process engine will perform backend validation for any form fields which have validators defined. See [Documentation on Generated Task Forms](https://docs.camunda.org/manual/7.14/user-guide/task-forms/#generated-task-forms).
     * @param {String} key The key of the process definition to submit the form for.
     * @param {Object} opts Optional parameters
     * @param {module:model/StartProcessInstanceFormDto} opts.startProcessInstanceFormDto 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ProcessInstanceDto} and HTTP response
     */
    submitFormByKeyWithHttpInfo(key, opts) {
      opts = opts || {};
      let postBody = opts['startProcessInstanceFormDto'];
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling submitFormByKey");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ProcessInstanceDto;
      return this.apiClient.callApi(
        '/process-definition/key/{key}/submit-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Submit Start Form
     * Starts the latest version of the process definition which belongs to no tenant using a set of process variables and the business key. If the start event has Form Field Metadata defined, the process engine will perform backend validation for any form fields which have validators defined. See [Documentation on Generated Task Forms](https://docs.camunda.org/manual/7.14/user-guide/task-forms/#generated-task-forms).
     * @param {String} key The key of the process definition to submit the form for.
     * @param {Object} opts Optional parameters
     * @param {module:model/StartProcessInstanceFormDto} opts.startProcessInstanceFormDto 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ProcessInstanceDto}
     */
    submitFormByKey(key, opts) {
      return this.submitFormByKeyWithHttpInfo(key, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Submit Start Form
     * Starts the latest version of the process definition for a tenant using a set of process variables and the business key. If the start event has Form Field Metadata defined, the process engine will perform backend validation for any form fields which have validators defined. See [Documentation on Generated Task Forms](https://docs.camunda.org/manual/7.14/user-guide/task-forms/#generated-task-forms).
     * @param {String} key The key of the process definition to submit the form for.
     * @param {String} tenantId The id of the tenant the process definition belongs to.
     * @param {Object} opts Optional parameters
     * @param {module:model/StartProcessInstanceFormDto} opts.startProcessInstanceFormDto 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ProcessInstanceDto} and HTTP response
     */
    submitFormByKeyAndTenantIdWithHttpInfo(key, tenantId, opts) {
      opts = opts || {};
      let postBody = opts['startProcessInstanceFormDto'];
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling submitFormByKeyAndTenantId");
      }
      // verify the required parameter 'tenantId' is set
      if (tenantId === undefined || tenantId === null) {
        throw new Error("Missing the required parameter 'tenantId' when calling submitFormByKeyAndTenantId");
      }

      let pathParams = {
        'key': key,
        'tenant-id': tenantId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ProcessInstanceDto;
      return this.apiClient.callApi(
        '/process-definition/key/{key}/tenant-id/{tenant-id}/submit-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Submit Start Form
     * Starts the latest version of the process definition for a tenant using a set of process variables and the business key. If the start event has Form Field Metadata defined, the process engine will perform backend validation for any form fields which have validators defined. See [Documentation on Generated Task Forms](https://docs.camunda.org/manual/7.14/user-guide/task-forms/#generated-task-forms).
     * @param {String} key The key of the process definition to submit the form for.
     * @param {String} tenantId The id of the tenant the process definition belongs to.
     * @param {Object} opts Optional parameters
     * @param {module:model/StartProcessInstanceFormDto} opts.startProcessInstanceFormDto 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ProcessInstanceDto}
     */
    submitFormByKeyAndTenantId(key, tenantId, opts) {
      return this.submitFormByKeyAndTenantIdWithHttpInfo(key, tenantId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update History Time to Live
     * Updates history time to live for process definition. The field is used within [History cleanup](https://docs.camunda.org/manual/7.14/user-guide/process-engine/history/#history-cleanup).
     * @param {String} id The id of the process definition to change history time to live.
     * @param {Object} opts Optional parameters
     * @param {module:model/HistoryTimeToLiveDto} opts.historyTimeToLiveDto 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    updateHistoryTimeToLiveByProcessDefinitionIdWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = opts['historyTimeToLiveDto'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateHistoryTimeToLiveByProcessDefinitionId");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/process-definition/{id}/history-time-to-live', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update History Time to Live
     * Updates history time to live for process definition. The field is used within [History cleanup](https://docs.camunda.org/manual/7.14/user-guide/process-engine/history/#history-cleanup).
     * @param {String} id The id of the process definition to change history time to live.
     * @param {Object} opts Optional parameters
     * @param {module:model/HistoryTimeToLiveDto} opts.historyTimeToLiveDto 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    updateHistoryTimeToLiveByProcessDefinitionId(id, opts) {
      return this.updateHistoryTimeToLiveByProcessDefinitionIdWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update History Time to Live
     * Updates history time to live for the latest version of the process definition which belongs to no tenant. The field is used within [History cleanup](https://docs.camunda.org/manual/7.14/user-guide/process-engine/history/#history-cleanup).
     * @param {String} key The key of the process definition to change history time to live.
     * @param {Object} opts Optional parameters
     * @param {module:model/HistoryTimeToLiveDto} opts.historyTimeToLiveDto 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    updateHistoryTimeToLiveByProcessDefinitionKeyWithHttpInfo(key, opts) {
      opts = opts || {};
      let postBody = opts['historyTimeToLiveDto'];
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling updateHistoryTimeToLiveByProcessDefinitionKey");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/process-definition/key/{key}/history-time-to-live', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update History Time to Live
     * Updates history time to live for the latest version of the process definition which belongs to no tenant. The field is used within [History cleanup](https://docs.camunda.org/manual/7.14/user-guide/process-engine/history/#history-cleanup).
     * @param {String} key The key of the process definition to change history time to live.
     * @param {Object} opts Optional parameters
     * @param {module:model/HistoryTimeToLiveDto} opts.historyTimeToLiveDto 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    updateHistoryTimeToLiveByProcessDefinitionKey(key, opts) {
      return this.updateHistoryTimeToLiveByProcessDefinitionKeyWithHttpInfo(key, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update History Time to Live
     * Updates history time to live for the latest version of the process definition for a tenant. The field is used within [History cleanup](https://docs.camunda.org/manual/7.14/user-guide/process-engine/history/#history-cleanup).
     * @param {String} key The key of the process definition to change history time to live.
     * @param {String} tenantId The id of the tenant the process definition belongs to.
     * @param {Object} opts Optional parameters
     * @param {module:model/HistoryTimeToLiveDto} opts.historyTimeToLiveDto 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    updateHistoryTimeToLiveByProcessDefinitionKeyAndTenantIdWithHttpInfo(key, tenantId, opts) {
      opts = opts || {};
      let postBody = opts['historyTimeToLiveDto'];
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling updateHistoryTimeToLiveByProcessDefinitionKeyAndTenantId");
      }
      // verify the required parameter 'tenantId' is set
      if (tenantId === undefined || tenantId === null) {
        throw new Error("Missing the required parameter 'tenantId' when calling updateHistoryTimeToLiveByProcessDefinitionKeyAndTenantId");
      }

      let pathParams = {
        'key': key,
        'tenant-id': tenantId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/process-definition/key/{key}/tenant-id/{tenant-id}/history-time-to-live', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update History Time to Live
     * Updates history time to live for the latest version of the process definition for a tenant. The field is used within [History cleanup](https://docs.camunda.org/manual/7.14/user-guide/process-engine/history/#history-cleanup).
     * @param {String} key The key of the process definition to change history time to live.
     * @param {String} tenantId The id of the tenant the process definition belongs to.
     * @param {Object} opts Optional parameters
     * @param {module:model/HistoryTimeToLiveDto} opts.historyTimeToLiveDto 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    updateHistoryTimeToLiveByProcessDefinitionKeyAndTenantId(key, tenantId, opts) {
      return this.updateHistoryTimeToLiveByProcessDefinitionKeyAndTenantIdWithHttpInfo(key, tenantId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Activate/Suspend By Key
     * Activates or suspends process definitions with the given process definition key.
     * @param {Object} opts Optional parameters
     * @param {module:model/ProcessDefinitionSuspensionStateDto} opts.processDefinitionSuspensionStateDto **Note**: Unallowed property is `processDefinitionId`.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    updateProcessDefinitionSuspensionStateWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['processDefinitionSuspensionStateDto'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/process-definition/suspended', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Activate/Suspend By Key
     * Activates or suspends process definitions with the given process definition key.
     * @param {Object} opts Optional parameters
     * @param {module:model/ProcessDefinitionSuspensionStateDto} opts.processDefinitionSuspensionStateDto **Note**: Unallowed property is `processDefinitionId`.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    updateProcessDefinitionSuspensionState(opts) {
      return this.updateProcessDefinitionSuspensionStateWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Activate/Suspend By Id
     * Activates or suspends a given process definition by id.
     * @param {String} id The id of the process definition to activate or suspend.
     * @param {Object} opts Optional parameters
     * @param {module:model/ProcessDefinitionSuspensionStateDto} opts.processDefinitionSuspensionStateDto **Note**: Unallowed properties are `processDefinitionId` and `processDefinitionKey`.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    updateProcessDefinitionSuspensionStateByIdWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = opts['processDefinitionSuspensionStateDto'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateProcessDefinitionSuspensionStateById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/process-definition/{id}/suspended', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Activate/Suspend By Id
     * Activates or suspends a given process definition by id.
     * @param {String} id The id of the process definition to activate or suspend.
     * @param {Object} opts Optional parameters
     * @param {module:model/ProcessDefinitionSuspensionStateDto} opts.processDefinitionSuspensionStateDto **Note**: Unallowed properties are `processDefinitionId` and `processDefinitionKey`.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    updateProcessDefinitionSuspensionStateById(id, opts) {
      return this.updateProcessDefinitionSuspensionStateByIdWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Activate/Suspend by Id
     * Activates or suspends a given process definition by latest version of process definition key which belongs to no tenant.
     * @param {String} key The key of the process definition (the latest version thereof) to be activated/suspended.
     * @param {Object} opts Optional parameters
     * @param {module:model/ProcessDefinitionSuspensionStateDto} opts.processDefinitionSuspensionStateDto **Note**: Unallowed properties are `processDefinitionId` and `processDefinitionKey`.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    updateProcessDefinitionSuspensionStateByKeyWithHttpInfo(key, opts) {
      opts = opts || {};
      let postBody = opts['processDefinitionSuspensionStateDto'];
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling updateProcessDefinitionSuspensionStateByKey");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/process-definition/key/{key}/suspended', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Activate/Suspend by Id
     * Activates or suspends a given process definition by latest version of process definition key which belongs to no tenant.
     * @param {String} key The key of the process definition (the latest version thereof) to be activated/suspended.
     * @param {Object} opts Optional parameters
     * @param {module:model/ProcessDefinitionSuspensionStateDto} opts.processDefinitionSuspensionStateDto **Note**: Unallowed properties are `processDefinitionId` and `processDefinitionKey`.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    updateProcessDefinitionSuspensionStateByKey(key, opts) {
      return this.updateProcessDefinitionSuspensionStateByKeyWithHttpInfo(key, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Activate/Suspend by Id
     * Activates or suspends a given process definition by the latest version of the process definition for tenant.
     * @param {String} key The key of the process definition (the latest version thereof) to be activated/suspended.
     * @param {String} tenantId The id of the tenant the process definition belongs to.
     * @param {Object} opts Optional parameters
     * @param {module:model/ProcessDefinitionSuspensionStateDto} opts.processDefinitionSuspensionStateDto **Note**: Unallowed properties are `processDefinitionId` and `processDefinitionKey`.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    updateProcessDefinitionSuspensionStateByKeyAndTenantIdWithHttpInfo(key, tenantId, opts) {
      opts = opts || {};
      let postBody = opts['processDefinitionSuspensionStateDto'];
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling updateProcessDefinitionSuspensionStateByKeyAndTenantId");
      }
      // verify the required parameter 'tenantId' is set
      if (tenantId === undefined || tenantId === null) {
        throw new Error("Missing the required parameter 'tenantId' when calling updateProcessDefinitionSuspensionStateByKeyAndTenantId");
      }

      let pathParams = {
        'key': key,
        'tenant-id': tenantId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/process-definition/key/{key}/tenant-id/{tenant-id}/suspended', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Activate/Suspend by Id
     * Activates or suspends a given process definition by the latest version of the process definition for tenant.
     * @param {String} key The key of the process definition (the latest version thereof) to be activated/suspended.
     * @param {String} tenantId The id of the tenant the process definition belongs to.
     * @param {Object} opts Optional parameters
     * @param {module:model/ProcessDefinitionSuspensionStateDto} opts.processDefinitionSuspensionStateDto **Note**: Unallowed properties are `processDefinitionId` and `processDefinitionKey`.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    updateProcessDefinitionSuspensionStateByKeyAndTenantId(key, tenantId, opts) {
      return this.updateProcessDefinitionSuspensionStateByKeyAndTenantIdWithHttpInfo(key, tenantId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
