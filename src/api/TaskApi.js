/**
 * Camunda BPM REST API
 * OpenApi Spec for Camunda BPM REST API.
 *
 * The version of the OpenAPI document: 7.14.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AuthorizationExceptionDto from '../model/AuthorizationExceptionDto';
import CompleteTaskDto from '../model/CompleteTaskDto';
import CountResultDto from '../model/CountResultDto';
import ExceptionDto from '../model/ExceptionDto';
import FormDto from '../model/FormDto';
import TaskBpmnErrorDto from '../model/TaskBpmnErrorDto';
import TaskDto from '../model/TaskDto';
import TaskEscalationDto from '../model/TaskEscalationDto';
import TaskQueryDto from '../model/TaskQueryDto';
import UserIdDto from '../model/UserIdDto';
import VariableValueDto from '../model/VariableValueDto';

/**
* Task service.
* @module api/TaskApi
* @version 7.14.0
*/
export default class TaskApi {

    /**
    * Constructs a new TaskApi. 
    * @alias module:api/TaskApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Claims a task for a specific user.  **Note:** The difference with the [Set Assignee](https://docs.camunda.org/manual/7.14/reference/rest/task/post-assignee/) method is that here a check is performed to see if the task already has a user assigned to it.
     * @param {String} id The id of the task to claim.
     * @param {Object} opts Optional parameters
     * @param {module:model/UserIdDto} opts.userIdDto Provide the id of the user that claims the task.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    claimWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = opts['userIdDto'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling claim");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/task/{id}/claim', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Claims a task for a specific user.  **Note:** The difference with the [Set Assignee](https://docs.camunda.org/manual/7.14/reference/rest/task/post-assignee/) method is that here a check is performed to see if the task already has a user assigned to it.
     * @param {String} id The id of the task to claim.
     * @param {Object} opts Optional parameters
     * @param {module:model/UserIdDto} opts.userIdDto Provide the id of the user that claims the task.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    claim(id, opts) {
      return this.claimWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Completes a task and updates process variables.
     * @param {String} id The id of the task to complete.
     * @param {Object} opts Optional parameters
     * @param {module:model/CompleteTaskDto} opts.completeTaskDto 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object.<String, module:model/{String: VariableValueDto}>} and HTTP response
     */
    completeWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = opts['completeTaskDto'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling complete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = {'String': VariableValueDto};
      return this.apiClient.callApi(
        '/task/{id}/complete', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Completes a task and updates process variables.
     * @param {String} id The id of the task to complete.
     * @param {Object} opts Optional parameters
     * @param {module:model/CompleteTaskDto} opts.completeTaskDto 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object.<String, module:model/{String: VariableValueDto}>}
     */
    complete(id, opts) {
      return this.completeWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Creates a new task.
     * @param {Object} opts Optional parameters
     * @param {module:model/TaskDto} opts.taskDto 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    createTaskWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['taskDto'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/task/create', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Creates a new task.
     * @param {Object} opts Optional parameters
     * @param {module:model/TaskDto} opts.taskDto 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    createTask(opts) {
      return this.createTaskWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delegates a task to another user.
     * @param {String} id The id of the task to delegate.
     * @param {Object} opts Optional parameters
     * @param {module:model/UserIdDto} opts.userIdDto Provide the id of the user that the task should be delegated to.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    delegateTaskWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = opts['userIdDto'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling delegateTask");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/task/{id}/delegate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delegates a task to another user.
     * @param {String} id The id of the task to delegate.
     * @param {Object} opts Optional parameters
     * @param {module:model/UserIdDto} opts.userIdDto Provide the id of the user that the task should be delegated to.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    delegateTask(id, opts) {
      return this.delegateTaskWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Removes a task by id.
     * @param {String} id The id of the task to be removed.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteTaskWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteTask");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/task/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Removes a task by id.
     * @param {String} id The id of the task to be removed.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteTask(id) {
      return this.deleteTaskWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieves the deployed form that is referenced from a given task. For further information please refer to the [User Guide](https://docs.camunda.org/manual/7.14/user-guide/task-forms/#embedded-task-forms).
     * @param {String} id The id of the task to get the deployed form for.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link File} and HTTP response
     */
    getDeployedFormWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getDeployedForm");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/xhtml+xml', 'application/json'];
      let returnType = File;
      return this.apiClient.callApi(
        '/task/{id}/deployed-form', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieves the deployed form that is referenced from a given task. For further information please refer to the [User Guide](https://docs.camunda.org/manual/7.14/user-guide/task-forms/#embedded-task-forms).
     * @param {String} id The id of the task to get the deployed form for.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link File}
     */
    getDeployedForm(id) {
      return this.getDeployedFormWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieves the form key for a task. The form key corresponds to the `FormData#formKey` property in the engine. This key can be used to do task-specific form rendering in client applications. Additionally, the context path of the containing process application is returned.
     * @param {String} id The id of the task to retrieve the form for.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/FormDto} and HTTP response
     */
    getFormWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getForm");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FormDto;
      return this.apiClient.callApi(
        '/task/{id}/form', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieves the form key for a task. The form key corresponds to the `FormData#formKey` property in the engine. This key can be used to do task-specific form rendering in client applications. Additionally, the context path of the containing process application is returned.
     * @param {String} id The id of the task to retrieve the form for.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/FormDto}
     */
    getForm(id) {
      return this.getFormWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieves the form variables for a task. The form variables take form data specified on the task into account. If form fields are defined, the variable types and default values of the form fields are taken into account.
     * @param {String} id The id of the task to retrieve the variables for.
     * @param {Object} opts Optional parameters
     * @param {String} opts.variableNames A comma-separated list of variable names. Allows restricting the list of requested variables to the variable names in the list. It is best practice to restrict the list of variables to the variables actually required by the form in order to minimize fetching of data. If the query parameter is ommitted all variables are fetched. If the query parameter contains non-existent variable names, the variable names are ignored.
     * @param {Boolean} opts.deserializeValues Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default true).  If set to true, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson's](http://jackson.codehaus.org/) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API's classpath.  If set to false, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  Note: While true is the default value for reasons of backward compatibility, we recommend setting this parameter to false when developing web applications that are independent of the Java process applications deployed to the engine. (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object.<String, module:model/{String: VariableValueDto}>} and HTTP response
     */
    getFormVariablesWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getFormVariables");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'variableNames': opts['variableNames'],
        'deserializeValues': opts['deserializeValues']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = {'String': VariableValueDto};
      return this.apiClient.callApi(
        '/task/{id}/form-variables', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieves the form variables for a task. The form variables take form data specified on the task into account. If form fields are defined, the variable types and default values of the form fields are taken into account.
     * @param {String} id The id of the task to retrieve the variables for.
     * @param {Object} opts Optional parameters
     * @param {String} opts.variableNames A comma-separated list of variable names. Allows restricting the list of requested variables to the variable names in the list. It is best practice to restrict the list of variables to the variables actually required by the form in order to minimize fetching of data. If the query parameter is ommitted all variables are fetched. If the query parameter contains non-existent variable names, the variable names are ignored.
     * @param {Boolean} opts.deserializeValues Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default true).  If set to true, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson's](http://jackson.codehaus.org/) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API's classpath.  If set to false, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  Note: While true is the default value for reasons of backward compatibility, we recommend setting this parameter to false when developing web applications that are independent of the Java process applications deployed to the engine. (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object.<String, module:model/{String: VariableValueDto}>}
     */
    getFormVariables(id, opts) {
      return this.getFormVariablesWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieves the rendered form for a task. This method can be used to get the HTML rendering of a [Generated Task Form](https://docs.camunda.org/manual/7.14/user-guide/task-forms/#generated-task-forms).
     * @param {String} id The id of the task to get the rendered form for.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link File} and HTTP response
     */
    getRenderedFormWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getRenderedForm");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/xhtml+xml', 'application/json'];
      let returnType = File;
      return this.apiClient.callApi(
        '/task/{id}/rendered-form', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieves the rendered form for a task. This method can be used to get the HTML rendering of a [Generated Task Form](https://docs.camunda.org/manual/7.14/user-guide/task-forms/#generated-task-forms).
     * @param {String} id The id of the task to get the rendered form for.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link File}
     */
    getRenderedForm(id) {
      return this.getRenderedFormWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieves a task by id.
     * @param {String} id The id of the task to be retrieved.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TaskDto} and HTTP response
     */
    getTaskWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getTask");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TaskDto;
      return this.apiClient.callApi(
        '/task/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieves a task by id.
     * @param {String} id The id of the task to be retrieved.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TaskDto}
     */
    getTask(id) {
      return this.getTaskWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Queries for tasks that fulfill a given filter. The size of the result set can be retrieved by using the Get Task Count method.  **Security Consideration:** There are several query parameters (such as assigneeExpression) for specifying an EL expression. These are disabled by default to prevent remote code execution. See the section on [security considerations](https://docs.camunda.org/manual/7.14/user-guide/process-engine/securing-custom-code/) for custom code in the user guide for details.
     * @param {Object} opts Optional parameters
     * @param {String} opts.processInstanceId Restrict to tasks that belong to process instances with the given id.
     * @param {String} opts.processInstanceIdIn Restrict to tasks that belong to process instances with the given ids.
     * @param {String} opts.processInstanceBusinessKey Restrict to tasks that belong to process instances with the given business key.
     * @param {String} opts.processInstanceBusinessKeyExpression Restrict to tasks that belong to process instances with the given business key which  is described by an expression. See the  [user guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions.
     * @param {String} opts.processInstanceBusinessKeyIn Restrict to tasks that belong to process instances with one of the give business keys.  The keys need to be in a comma-separated list.
     * @param {String} opts.processInstanceBusinessKeyLike Restrict to tasks that have a process instance business key that has the parameter  value as a substring.
     * @param {String} opts.processInstanceBusinessKeyLikeExpression Restrict to tasks that have a process instance business key that has the parameter  value as a substring and is described by an expression. See the [user guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/expression-language/#internal-context-functions)  for more information on available functions.
     * @param {String} opts.processDefinitionId Restrict to tasks that belong to a process definition with the given id.
     * @param {String} opts.processDefinitionKey Restrict to tasks that belong to a process definition with the given key.
     * @param {String} opts.processDefinitionKeyIn Restrict to tasks that belong to a process definition with one of the given keys. The  keys need to be in a comma-separated list.
     * @param {String} opts.processDefinitionName Restrict to tasks that belong to a process definition with the given name.
     * @param {String} opts.processDefinitionNameLike Restrict to tasks that have a process definition name that has the parameter value as  a substring.
     * @param {String} opts.executionId Restrict to tasks that belong to an execution with the given id.
     * @param {String} opts.caseInstanceId Restrict to tasks that belong to case instances with the given id.
     * @param {String} opts.caseInstanceBusinessKey Restrict to tasks that belong to case instances with the given business key.
     * @param {String} opts.caseInstanceBusinessKeyLike Restrict to tasks that have a case instance business key that has the parameter value  as a substring.
     * @param {String} opts.caseDefinitionId Restrict to tasks that belong to a case definition with the given id.
     * @param {String} opts.caseDefinitionKey Restrict to tasks that belong to a case definition with the given key.
     * @param {String} opts.caseDefinitionName Restrict to tasks that belong to a case definition with the given name.
     * @param {String} opts.caseDefinitionNameLike Restrict to tasks that have a case definition name that has the parameter value as a  substring.
     * @param {String} opts.caseExecutionId Restrict to tasks that belong to a case execution with the given id.
     * @param {String} opts.activityInstanceIdIn Only include tasks which belong to one of the passed and comma-separated activity  instance ids.
     * @param {String} opts.tenantIdIn Only include tasks which belong to one of the passed and comma-separated  tenant ids.
     * @param {Boolean} opts.withoutTenantId Only include tasks which belong to no tenant. Value may only be `true`,  as `false` is the default behavior. (default to false)
     * @param {String} opts.assignee Restrict to tasks that the given user is assigned to.
     * @param {String} opts.assigneeExpression Restrict to tasks that the user described by the given expression is assigned to.  See the  [user guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/expression-language/#internal-context-functions)  for more information on available functions.
     * @param {String} opts.assigneeLike Restrict to tasks that have an assignee that has the parameter  value as a substring.
     * @param {String} opts.assigneeLikeExpression Restrict to tasks that have an assignee that has the parameter value described by the  given expression as a substring. See the  [user guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/expression-language/#internal-context-functions)  for more information on available functions.
     * @param {String} opts.assigneeIn Only include tasks which are assigned to one of the passed and  comma-separated user ids.
     * @param {String} opts.owner Restrict to tasks that the given user owns.
     * @param {String} opts.ownerExpression Restrict to tasks that the user described by the given expression owns. See the  [user guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/expression-language/#internal-context-functions)  for more information on available functions.
     * @param {String} opts.candidateGroup Only include tasks that are offered to the given group.
     * @param {String} opts.candidateGroupExpression Only include tasks that are offered to the group described by the given expression.  See the  [user guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/expression-language/#internal-context-functions)  for more information on available functions.
     * @param {String} opts.candidateUser Only include tasks that are offered to the given user or to one of his groups.
     * @param {String} opts.candidateUserExpression Only include tasks that are offered to the user described by the given expression.  See the  [user guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/expression-language/#internal-context-functions)  for more information on available functions.
     * @param {Boolean} opts.includeAssignedTasks Also include tasks that are assigned to users in candidate queries. Default is to only  include tasks that are not assigned to any user if you query by candidate user or group(s). (default to false)
     * @param {String} opts.involvedUser Only include tasks that the given user is involved in. A user is involved in a task if  an identity link exists between task and user (e.g., the user is the assignee).
     * @param {String} opts.involvedUserExpression Only include tasks that the user described by the given expression is involved in. A user is involved in a task if an identity link exists between task and user (e.g., the user is the assignee). See the [user guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions.
     * @param {Boolean} opts.assigned If set to `true`, restricts the query to all tasks that are assigned. (default to false)
     * @param {Boolean} opts.unassigned If set to `true`, restricts the query to all tasks that are unassigned. (default to false)
     * @param {String} opts.taskDefinitionKey Restrict to tasks that have the given key.
     * @param {String} opts.taskDefinitionKeyIn Restrict to tasks that have one of the given keys. The keys need to be in a comma-separated list.
     * @param {String} opts.taskDefinitionKeyLike Restrict to tasks that have a key that has the parameter value as a substring.
     * @param {String} opts.name Restrict to tasks that have the given name.
     * @param {String} opts.nameNotEqual Restrict to tasks that do not have the given name.
     * @param {String} opts.nameLike Restrict to tasks that have a name with the given parameter value as substring.
     * @param {String} opts.nameNotLike Restrict to tasks that do not have a name with the given parameter value as substring.
     * @param {String} opts.description Restrict to tasks that have the given description.
     * @param {String} opts.descriptionLike Restrict to tasks that have a description that has the parameter value as a substring.
     * @param {Number} opts.priority Restrict to tasks that have the given priority.
     * @param {Number} opts.maxPriority Restrict to tasks that have a lower or equal priority.
     * @param {Number} opts.minPriority Restrict to tasks that have a higher or equal priority.
     * @param {String} opts.dueDate Restrict to tasks that are due on the given date. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.546+0200`.
     * @param {String} opts.dueDateExpression Restrict to tasks that are due on the date described by the given expression. See the [User Guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a `java.util.Date` or `org.joda.time.DateTime` object.
     * @param {String} opts.dueAfter Restrict to tasks that are due after the given date. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.435+0200`.
     * @param {String} opts.dueAfterExpression Restrict to tasks that are due after the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a `java.util.Date` or `org.joda.time.DateTime` object.
     * @param {String} opts.dueBefore Restrict to tasks that are due before the given date. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.243+0200`.
     * @param {String} opts.dueBeforeExpression Restrict to tasks that are due before the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a `java.util.Date` or `org.joda.time.DateTime` object.
     * @param {String} opts.followUpDate Restrict to tasks that have a followUp date on the given date. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.342+0200`.
     * @param {String} opts.followUpDateExpression Restrict to tasks that have a followUp date on the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a `java.util.Date` or `org.joda.time.DateTime` object.
     * @param {String} opts.followUpAfter Restrict to tasks that have a followUp date after the given date. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.542+0200`.
     * @param {String} opts.followUpAfterExpression Restrict to tasks that have a followUp date after the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a `java.util.Date` or `org.joda.time.DateTime` object.
     * @param {String} opts.followUpBefore Restrict to tasks that have a followUp date before the given date. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.234+0200`.
     * @param {String} opts.followUpBeforeExpression Restrict to tasks that have a followUp date before the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a `java.util.Date` or `org.joda.time.DateTime` object.
     * @param {String} opts.followUpBeforeOrNotExistent Restrict to tasks that have no followUp date or a followUp date before the given date. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.432+0200`. The typical use case is to query all `active` tasks for a user for a given date.
     * @param {String} opts.followUpBeforeOrNotExistentExpression Restrict to tasks that have no followUp date or a followUp date before the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a `java.util.Date` or `org.joda.time.DateTime` object.
     * @param {String} opts.createdOn Restrict to tasks that were created on the given date. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.324+0200`.
     * @param {String} opts.createdOnExpression Restrict to tasks that were created on the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a `java.util.Date` or `org.joda.time.DateTime` object.
     * @param {String} opts.createdAfter Restrict to tasks that were created after the given date. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.342+0200`.
     * @param {String} opts.createdAfterExpression Restrict to tasks that were created after the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a `java.util.Date` or `org.joda.time.DateTime` object.
     * @param {String} opts.createdBefore Restrict to tasks that were created before the given date. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.332+0200`.
     * @param {String} opts.createdBeforeExpression Restrict to tasks that were created before the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a `java.util.Date` or `org.joda.time.DateTime` object.
     * @param {module:model/String} opts.delegationState Restrict to tasks that are in the given delegation state. Valid values are `PENDING` and `RESOLVED`.
     * @param {String} opts.candidateGroups Restrict to tasks that are offered to any of the given candidate groups. Takes a comma-separated list of group names, so for example `developers,support,sales`.
     * @param {String} opts.candidateGroupsExpression Restrict to tasks that are offered to any of the candidate groups described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to `java.util.List` of Strings.
     * @param {Boolean} opts.withCandidateGroups Only include tasks which have a candidate group. Value may only be `true`, as `false` is the default behavior. (default to false)
     * @param {Boolean} opts.withoutCandidateGroups Only include tasks which have no candidate group. Value may only be `true`, as `false` is the default behavior. (default to false)
     * @param {Boolean} opts.withCandidateUsers Only include tasks which have a candidate user. Value may only be `true`, as `false` is the default behavior. (default to false)
     * @param {Boolean} opts.withoutCandidateUsers Only include tasks which have no candidate users. Value may only be `true`, as `false` is the default behavior. (default to false)
     * @param {Boolean} opts.active Only include active tasks. Value may only be `true`, as `false` is the default behavior. (default to false)
     * @param {Boolean} opts.suspended Only include suspended tasks. Value may only be `true`, as `false` is the default behavior. (default to false)
     * @param {String} opts.taskVariables Only include tasks that have variables with certain values. Variable filtering expressions are comma-separated and are structured as follows:  A valid parameter value has the form `key_operator_value`. `key` is the variable name, `operator` is the comparison operator to be used and `value` the variable value.  **Note**: Values are always treated as String objects on server side.  Valid `operator` values are: `eq` - equal to; `neq` - not equal to; `gt` - greater than; `gteq` - greater than or equal to; `lt` - lower than; `lteq` - lower than or equal to; `like`. `key` and `value` may not contain underscore or comma characters.
     * @param {String} opts.processVariables Only include tasks that belong to process instances that have variables with certain  values. Variable filtering expressions are comma-separated and are structured as follows:  A valid parameter value has the form `key_operator_value`. `key` is the variable name, `operator` is the comparison operator to be used and `value` the variable value.  **Note**: Values are always treated as String objects on server side.  Valid `operator` values are: `eq` - equal to; `neq` - not equal to; `gt` - greater than; `gteq` - greater than or equal to; `lt` - lower than; `lteq` - lower than or equal to; `like`. `key` and `value` may not contain underscore or comma characters.
     * @param {String} opts.caseInstanceVariables Only include tasks that belong to case instances that have variables with certain values. Variable filtering expressions are comma-separated and are structured as follows:  A valid parameter value has the form `key_operator_value`. `key` is the variable name, `operator` is the comparison operator to be used and `value` the variable value.  **Note**: Values are always treated as String objects on server side.  Valid `operator` values are: `eq` - equal to; `neq` - not equal to; `gt` - greater than; `gteq` - greater than or equal to; `lt` - lower than; `lteq` - lower than or equal to; `like`. `key` and `value` may not contain underscore or comma characters.
     * @param {Boolean} opts.variableNamesIgnoreCase Match all variable names in this query case-insensitively. If set `variableName` and `variablename` are treated as equal. (default to false)
     * @param {Boolean} opts.variableValuesIgnoreCase Match all variable values in this query case-insensitively. If set `variableValue` and `variablevalue` are treated as equal. (default to false)
     * @param {String} opts.parentTaskId Restrict query to all tasks that are sub tasks of the given task. Takes a task id.
     * @param {module:model/String} opts.sortBy Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter.
     * @param {module:model/String} opts.sortOrder Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter.
     * @param {Number} opts.firstResult Pagination of results. Specifies the index of the first result to return.
     * @param {Number} opts.maxResults Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/TaskDto>} and HTTP response
     */
    getTasksWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'processInstanceId': opts['processInstanceId'],
        'processInstanceIdIn': opts['processInstanceIdIn'],
        'processInstanceBusinessKey': opts['processInstanceBusinessKey'],
        'processInstanceBusinessKeyExpression': opts['processInstanceBusinessKeyExpression'],
        'processInstanceBusinessKeyIn': opts['processInstanceBusinessKeyIn'],
        'processInstanceBusinessKeyLike': opts['processInstanceBusinessKeyLike'],
        'processInstanceBusinessKeyLikeExpression': opts['processInstanceBusinessKeyLikeExpression'],
        'processDefinitionId': opts['processDefinitionId'],
        'processDefinitionKey': opts['processDefinitionKey'],
        'processDefinitionKeyIn': opts['processDefinitionKeyIn'],
        'processDefinitionName': opts['processDefinitionName'],
        'processDefinitionNameLike': opts['processDefinitionNameLike'],
        'executionId': opts['executionId'],
        'caseInstanceId': opts['caseInstanceId'],
        'caseInstanceBusinessKey': opts['caseInstanceBusinessKey'],
        'caseInstanceBusinessKeyLike': opts['caseInstanceBusinessKeyLike'],
        'caseDefinitionId': opts['caseDefinitionId'],
        'caseDefinitionKey': opts['caseDefinitionKey'],
        'caseDefinitionName': opts['caseDefinitionName'],
        'caseDefinitionNameLike': opts['caseDefinitionNameLike'],
        'caseExecutionId': opts['caseExecutionId'],
        'activityInstanceIdIn': opts['activityInstanceIdIn'],
        'tenantIdIn': opts['tenantIdIn'],
        'withoutTenantId': opts['withoutTenantId'],
        'assignee': opts['assignee'],
        'assigneeExpression': opts['assigneeExpression'],
        'assigneeLike': opts['assigneeLike'],
        'assigneeLikeExpression': opts['assigneeLikeExpression'],
        'assigneeIn': opts['assigneeIn'],
        'owner': opts['owner'],
        'ownerExpression': opts['ownerExpression'],
        'candidateGroup': opts['candidateGroup'],
        'candidateGroupExpression': opts['candidateGroupExpression'],
        'candidateUser': opts['candidateUser'],
        'candidateUserExpression': opts['candidateUserExpression'],
        'includeAssignedTasks': opts['includeAssignedTasks'],
        'involvedUser': opts['involvedUser'],
        'involvedUserExpression': opts['involvedUserExpression'],
        'assigned': opts['assigned'],
        'unassigned': opts['unassigned'],
        'taskDefinitionKey': opts['taskDefinitionKey'],
        'taskDefinitionKeyIn': opts['taskDefinitionKeyIn'],
        'taskDefinitionKeyLike': opts['taskDefinitionKeyLike'],
        'name': opts['name'],
        'nameNotEqual': opts['nameNotEqual'],
        'nameLike': opts['nameLike'],
        'nameNotLike': opts['nameNotLike'],
        'description': opts['description'],
        'descriptionLike': opts['descriptionLike'],
        'priority': opts['priority'],
        'maxPriority': opts['maxPriority'],
        'minPriority': opts['minPriority'],
        'dueDate': opts['dueDate'],
        'dueDateExpression': opts['dueDateExpression'],
        'dueAfter': opts['dueAfter'],
        'dueAfterExpression': opts['dueAfterExpression'],
        'dueBefore': opts['dueBefore'],
        'dueBeforeExpression': opts['dueBeforeExpression'],
        'followUpDate': opts['followUpDate'],
        'followUpDateExpression': opts['followUpDateExpression'],
        'followUpAfter': opts['followUpAfter'],
        'followUpAfterExpression': opts['followUpAfterExpression'],
        'followUpBefore': opts['followUpBefore'],
        'followUpBeforeExpression': opts['followUpBeforeExpression'],
        'followUpBeforeOrNotExistent': opts['followUpBeforeOrNotExistent'],
        'followUpBeforeOrNotExistentExpression': opts['followUpBeforeOrNotExistentExpression'],
        'createdOn': opts['createdOn'],
        'createdOnExpression': opts['createdOnExpression'],
        'createdAfter': opts['createdAfter'],
        'createdAfterExpression': opts['createdAfterExpression'],
        'createdBefore': opts['createdBefore'],
        'createdBeforeExpression': opts['createdBeforeExpression'],
        'delegationState': opts['delegationState'],
        'candidateGroups': opts['candidateGroups'],
        'candidateGroupsExpression': opts['candidateGroupsExpression'],
        'withCandidateGroups': opts['withCandidateGroups'],
        'withoutCandidateGroups': opts['withoutCandidateGroups'],
        'withCandidateUsers': opts['withCandidateUsers'],
        'withoutCandidateUsers': opts['withoutCandidateUsers'],
        'active': opts['active'],
        'suspended': opts['suspended'],
        'taskVariables': opts['taskVariables'],
        'processVariables': opts['processVariables'],
        'caseInstanceVariables': opts['caseInstanceVariables'],
        'variableNamesIgnoreCase': opts['variableNamesIgnoreCase'],
        'variableValuesIgnoreCase': opts['variableValuesIgnoreCase'],
        'parentTaskId': opts['parentTaskId'],
        'sortBy': opts['sortBy'],
        'sortOrder': opts['sortOrder'],
        'firstResult': opts['firstResult'],
        'maxResults': opts['maxResults']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [TaskDto];
      return this.apiClient.callApi(
        '/task', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Queries for tasks that fulfill a given filter. The size of the result set can be retrieved by using the Get Task Count method.  **Security Consideration:** There are several query parameters (such as assigneeExpression) for specifying an EL expression. These are disabled by default to prevent remote code execution. See the section on [security considerations](https://docs.camunda.org/manual/7.14/user-guide/process-engine/securing-custom-code/) for custom code in the user guide for details.
     * @param {Object} opts Optional parameters
     * @param {String} opts.processInstanceId Restrict to tasks that belong to process instances with the given id.
     * @param {String} opts.processInstanceIdIn Restrict to tasks that belong to process instances with the given ids.
     * @param {String} opts.processInstanceBusinessKey Restrict to tasks that belong to process instances with the given business key.
     * @param {String} opts.processInstanceBusinessKeyExpression Restrict to tasks that belong to process instances with the given business key which  is described by an expression. See the  [user guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions.
     * @param {String} opts.processInstanceBusinessKeyIn Restrict to tasks that belong to process instances with one of the give business keys.  The keys need to be in a comma-separated list.
     * @param {String} opts.processInstanceBusinessKeyLike Restrict to tasks that have a process instance business key that has the parameter  value as a substring.
     * @param {String} opts.processInstanceBusinessKeyLikeExpression Restrict to tasks that have a process instance business key that has the parameter  value as a substring and is described by an expression. See the [user guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/expression-language/#internal-context-functions)  for more information on available functions.
     * @param {String} opts.processDefinitionId Restrict to tasks that belong to a process definition with the given id.
     * @param {String} opts.processDefinitionKey Restrict to tasks that belong to a process definition with the given key.
     * @param {String} opts.processDefinitionKeyIn Restrict to tasks that belong to a process definition with one of the given keys. The  keys need to be in a comma-separated list.
     * @param {String} opts.processDefinitionName Restrict to tasks that belong to a process definition with the given name.
     * @param {String} opts.processDefinitionNameLike Restrict to tasks that have a process definition name that has the parameter value as  a substring.
     * @param {String} opts.executionId Restrict to tasks that belong to an execution with the given id.
     * @param {String} opts.caseInstanceId Restrict to tasks that belong to case instances with the given id.
     * @param {String} opts.caseInstanceBusinessKey Restrict to tasks that belong to case instances with the given business key.
     * @param {String} opts.caseInstanceBusinessKeyLike Restrict to tasks that have a case instance business key that has the parameter value  as a substring.
     * @param {String} opts.caseDefinitionId Restrict to tasks that belong to a case definition with the given id.
     * @param {String} opts.caseDefinitionKey Restrict to tasks that belong to a case definition with the given key.
     * @param {String} opts.caseDefinitionName Restrict to tasks that belong to a case definition with the given name.
     * @param {String} opts.caseDefinitionNameLike Restrict to tasks that have a case definition name that has the parameter value as a  substring.
     * @param {String} opts.caseExecutionId Restrict to tasks that belong to a case execution with the given id.
     * @param {String} opts.activityInstanceIdIn Only include tasks which belong to one of the passed and comma-separated activity  instance ids.
     * @param {String} opts.tenantIdIn Only include tasks which belong to one of the passed and comma-separated  tenant ids.
     * @param {Boolean} opts.withoutTenantId Only include tasks which belong to no tenant. Value may only be `true`,  as `false` is the default behavior. (default to false)
     * @param {String} opts.assignee Restrict to tasks that the given user is assigned to.
     * @param {String} opts.assigneeExpression Restrict to tasks that the user described by the given expression is assigned to.  See the  [user guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/expression-language/#internal-context-functions)  for more information on available functions.
     * @param {String} opts.assigneeLike Restrict to tasks that have an assignee that has the parameter  value as a substring.
     * @param {String} opts.assigneeLikeExpression Restrict to tasks that have an assignee that has the parameter value described by the  given expression as a substring. See the  [user guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/expression-language/#internal-context-functions)  for more information on available functions.
     * @param {String} opts.assigneeIn Only include tasks which are assigned to one of the passed and  comma-separated user ids.
     * @param {String} opts.owner Restrict to tasks that the given user owns.
     * @param {String} opts.ownerExpression Restrict to tasks that the user described by the given expression owns. See the  [user guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/expression-language/#internal-context-functions)  for more information on available functions.
     * @param {String} opts.candidateGroup Only include tasks that are offered to the given group.
     * @param {String} opts.candidateGroupExpression Only include tasks that are offered to the group described by the given expression.  See the  [user guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/expression-language/#internal-context-functions)  for more information on available functions.
     * @param {String} opts.candidateUser Only include tasks that are offered to the given user or to one of his groups.
     * @param {String} opts.candidateUserExpression Only include tasks that are offered to the user described by the given expression.  See the  [user guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/expression-language/#internal-context-functions)  for more information on available functions.
     * @param {Boolean} opts.includeAssignedTasks Also include tasks that are assigned to users in candidate queries. Default is to only  include tasks that are not assigned to any user if you query by candidate user or group(s). (default to false)
     * @param {String} opts.involvedUser Only include tasks that the given user is involved in. A user is involved in a task if  an identity link exists between task and user (e.g., the user is the assignee).
     * @param {String} opts.involvedUserExpression Only include tasks that the user described by the given expression is involved in. A user is involved in a task if an identity link exists between task and user (e.g., the user is the assignee). See the [user guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions.
     * @param {Boolean} opts.assigned If set to `true`, restricts the query to all tasks that are assigned. (default to false)
     * @param {Boolean} opts.unassigned If set to `true`, restricts the query to all tasks that are unassigned. (default to false)
     * @param {String} opts.taskDefinitionKey Restrict to tasks that have the given key.
     * @param {String} opts.taskDefinitionKeyIn Restrict to tasks that have one of the given keys. The keys need to be in a comma-separated list.
     * @param {String} opts.taskDefinitionKeyLike Restrict to tasks that have a key that has the parameter value as a substring.
     * @param {String} opts.name Restrict to tasks that have the given name.
     * @param {String} opts.nameNotEqual Restrict to tasks that do not have the given name.
     * @param {String} opts.nameLike Restrict to tasks that have a name with the given parameter value as substring.
     * @param {String} opts.nameNotLike Restrict to tasks that do not have a name with the given parameter value as substring.
     * @param {String} opts.description Restrict to tasks that have the given description.
     * @param {String} opts.descriptionLike Restrict to tasks that have a description that has the parameter value as a substring.
     * @param {Number} opts.priority Restrict to tasks that have the given priority.
     * @param {Number} opts.maxPriority Restrict to tasks that have a lower or equal priority.
     * @param {Number} opts.minPriority Restrict to tasks that have a higher or equal priority.
     * @param {String} opts.dueDate Restrict to tasks that are due on the given date. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.546+0200`.
     * @param {String} opts.dueDateExpression Restrict to tasks that are due on the date described by the given expression. See the [User Guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a `java.util.Date` or `org.joda.time.DateTime` object.
     * @param {String} opts.dueAfter Restrict to tasks that are due after the given date. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.435+0200`.
     * @param {String} opts.dueAfterExpression Restrict to tasks that are due after the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a `java.util.Date` or `org.joda.time.DateTime` object.
     * @param {String} opts.dueBefore Restrict to tasks that are due before the given date. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.243+0200`.
     * @param {String} opts.dueBeforeExpression Restrict to tasks that are due before the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a `java.util.Date` or `org.joda.time.DateTime` object.
     * @param {String} opts.followUpDate Restrict to tasks that have a followUp date on the given date. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.342+0200`.
     * @param {String} opts.followUpDateExpression Restrict to tasks that have a followUp date on the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a `java.util.Date` or `org.joda.time.DateTime` object.
     * @param {String} opts.followUpAfter Restrict to tasks that have a followUp date after the given date. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.542+0200`.
     * @param {String} opts.followUpAfterExpression Restrict to tasks that have a followUp date after the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a `java.util.Date` or `org.joda.time.DateTime` object.
     * @param {String} opts.followUpBefore Restrict to tasks that have a followUp date before the given date. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.234+0200`.
     * @param {String} opts.followUpBeforeExpression Restrict to tasks that have a followUp date before the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a `java.util.Date` or `org.joda.time.DateTime` object.
     * @param {String} opts.followUpBeforeOrNotExistent Restrict to tasks that have no followUp date or a followUp date before the given date. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.432+0200`. The typical use case is to query all `active` tasks for a user for a given date.
     * @param {String} opts.followUpBeforeOrNotExistentExpression Restrict to tasks that have no followUp date or a followUp date before the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a `java.util.Date` or `org.joda.time.DateTime` object.
     * @param {String} opts.createdOn Restrict to tasks that were created on the given date. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.324+0200`.
     * @param {String} opts.createdOnExpression Restrict to tasks that were created on the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a `java.util.Date` or `org.joda.time.DateTime` object.
     * @param {String} opts.createdAfter Restrict to tasks that were created after the given date. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.342+0200`.
     * @param {String} opts.createdAfterExpression Restrict to tasks that were created after the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a `java.util.Date` or `org.joda.time.DateTime` object.
     * @param {String} opts.createdBefore Restrict to tasks that were created before the given date. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.332+0200`.
     * @param {String} opts.createdBeforeExpression Restrict to tasks that were created before the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a `java.util.Date` or `org.joda.time.DateTime` object.
     * @param {module:model/String} opts.delegationState Restrict to tasks that are in the given delegation state. Valid values are `PENDING` and `RESOLVED`.
     * @param {String} opts.candidateGroups Restrict to tasks that are offered to any of the given candidate groups. Takes a comma-separated list of group names, so for example `developers,support,sales`.
     * @param {String} opts.candidateGroupsExpression Restrict to tasks that are offered to any of the candidate groups described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to `java.util.List` of Strings.
     * @param {Boolean} opts.withCandidateGroups Only include tasks which have a candidate group. Value may only be `true`, as `false` is the default behavior. (default to false)
     * @param {Boolean} opts.withoutCandidateGroups Only include tasks which have no candidate group. Value may only be `true`, as `false` is the default behavior. (default to false)
     * @param {Boolean} opts.withCandidateUsers Only include tasks which have a candidate user. Value may only be `true`, as `false` is the default behavior. (default to false)
     * @param {Boolean} opts.withoutCandidateUsers Only include tasks which have no candidate users. Value may only be `true`, as `false` is the default behavior. (default to false)
     * @param {Boolean} opts.active Only include active tasks. Value may only be `true`, as `false` is the default behavior. (default to false)
     * @param {Boolean} opts.suspended Only include suspended tasks. Value may only be `true`, as `false` is the default behavior. (default to false)
     * @param {String} opts.taskVariables Only include tasks that have variables with certain values. Variable filtering expressions are comma-separated and are structured as follows:  A valid parameter value has the form `key_operator_value`. `key` is the variable name, `operator` is the comparison operator to be used and `value` the variable value.  **Note**: Values are always treated as String objects on server side.  Valid `operator` values are: `eq` - equal to; `neq` - not equal to; `gt` - greater than; `gteq` - greater than or equal to; `lt` - lower than; `lteq` - lower than or equal to; `like`. `key` and `value` may not contain underscore or comma characters.
     * @param {String} opts.processVariables Only include tasks that belong to process instances that have variables with certain  values. Variable filtering expressions are comma-separated and are structured as follows:  A valid parameter value has the form `key_operator_value`. `key` is the variable name, `operator` is the comparison operator to be used and `value` the variable value.  **Note**: Values are always treated as String objects on server side.  Valid `operator` values are: `eq` - equal to; `neq` - not equal to; `gt` - greater than; `gteq` - greater than or equal to; `lt` - lower than; `lteq` - lower than or equal to; `like`. `key` and `value` may not contain underscore or comma characters.
     * @param {String} opts.caseInstanceVariables Only include tasks that belong to case instances that have variables with certain values. Variable filtering expressions are comma-separated and are structured as follows:  A valid parameter value has the form `key_operator_value`. `key` is the variable name, `operator` is the comparison operator to be used and `value` the variable value.  **Note**: Values are always treated as String objects on server side.  Valid `operator` values are: `eq` - equal to; `neq` - not equal to; `gt` - greater than; `gteq` - greater than or equal to; `lt` - lower than; `lteq` - lower than or equal to; `like`. `key` and `value` may not contain underscore or comma characters.
     * @param {Boolean} opts.variableNamesIgnoreCase Match all variable names in this query case-insensitively. If set `variableName` and `variablename` are treated as equal. (default to false)
     * @param {Boolean} opts.variableValuesIgnoreCase Match all variable values in this query case-insensitively. If set `variableValue` and `variablevalue` are treated as equal. (default to false)
     * @param {String} opts.parentTaskId Restrict query to all tasks that are sub tasks of the given task. Takes a task id.
     * @param {module:model/String} opts.sortBy Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter.
     * @param {module:model/String} opts.sortOrder Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter.
     * @param {Number} opts.firstResult Pagination of results. Specifies the index of the first result to return.
     * @param {Number} opts.maxResults Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/TaskDto>}
     */
    getTasks(opts) {
      return this.getTasksWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieves the number of tasks that fulfill a provided filter. Corresponds to the size of the result set when using the [Get Tasks](https://docs.camunda.org/manual/7.14/reference/rest/task/) method.  **Security Consideration:** There are several query parameters (such as assigneeExpression) for specifying an EL expression. These are disabled by default to prevent remote code execution. See the section on [security considerations](https://docs.camunda.org/manual/7.14/user-guide/process-engine/securing-custom-code/) for custom code in the user guide for details.
     * @param {Object} opts Optional parameters
     * @param {String} opts.processInstanceId Restrict to tasks that belong to process instances with the given id.
     * @param {String} opts.processInstanceIdIn Restrict to tasks that belong to process instances with the given ids.
     * @param {String} opts.processInstanceBusinessKey Restrict to tasks that belong to process instances with the given business key.
     * @param {String} opts.processInstanceBusinessKeyExpression Restrict to tasks that belong to process instances with the given business key which  is described by an expression. See the  [user guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions.
     * @param {String} opts.processInstanceBusinessKeyIn Restrict to tasks that belong to process instances with one of the give business keys.  The keys need to be in a comma-separated list.
     * @param {String} opts.processInstanceBusinessKeyLike Restrict to tasks that have a process instance business key that has the parameter  value as a substring.
     * @param {String} opts.processInstanceBusinessKeyLikeExpression Restrict to tasks that have a process instance business key that has the parameter  value as a substring and is described by an expression. See the [user guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/expression-language/#internal-context-functions)  for more information on available functions.
     * @param {String} opts.processDefinitionId Restrict to tasks that belong to a process definition with the given id.
     * @param {String} opts.processDefinitionKey Restrict to tasks that belong to a process definition with the given key.
     * @param {String} opts.processDefinitionKeyIn Restrict to tasks that belong to a process definition with one of the given keys. The  keys need to be in a comma-separated list.
     * @param {String} opts.processDefinitionName Restrict to tasks that belong to a process definition with the given name.
     * @param {String} opts.processDefinitionNameLike Restrict to tasks that have a process definition name that has the parameter value as  a substring.
     * @param {String} opts.executionId Restrict to tasks that belong to an execution with the given id.
     * @param {String} opts.caseInstanceId Restrict to tasks that belong to case instances with the given id.
     * @param {String} opts.caseInstanceBusinessKey Restrict to tasks that belong to case instances with the given business key.
     * @param {String} opts.caseInstanceBusinessKeyLike Restrict to tasks that have a case instance business key that has the parameter value  as a substring.
     * @param {String} opts.caseDefinitionId Restrict to tasks that belong to a case definition with the given id.
     * @param {String} opts.caseDefinitionKey Restrict to tasks that belong to a case definition with the given key.
     * @param {String} opts.caseDefinitionName Restrict to tasks that belong to a case definition with the given name.
     * @param {String} opts.caseDefinitionNameLike Restrict to tasks that have a case definition name that has the parameter value as a  substring.
     * @param {String} opts.caseExecutionId Restrict to tasks that belong to a case execution with the given id.
     * @param {String} opts.activityInstanceIdIn Only include tasks which belong to one of the passed and comma-separated activity  instance ids.
     * @param {String} opts.tenantIdIn Only include tasks which belong to one of the passed and comma-separated  tenant ids.
     * @param {Boolean} opts.withoutTenantId Only include tasks which belong to no tenant. Value may only be `true`,  as `false` is the default behavior. (default to false)
     * @param {String} opts.assignee Restrict to tasks that the given user is assigned to.
     * @param {String} opts.assigneeExpression Restrict to tasks that the user described by the given expression is assigned to.  See the  [user guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/expression-language/#internal-context-functions)  for more information on available functions.
     * @param {String} opts.assigneeLike Restrict to tasks that have an assignee that has the parameter  value as a substring.
     * @param {String} opts.assigneeLikeExpression Restrict to tasks that have an assignee that has the parameter value described by the  given expression as a substring. See the  [user guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/expression-language/#internal-context-functions)  for more information on available functions.
     * @param {String} opts.assigneeIn Only include tasks which are assigned to one of the passed and  comma-separated user ids.
     * @param {String} opts.owner Restrict to tasks that the given user owns.
     * @param {String} opts.ownerExpression Restrict to tasks that the user described by the given expression owns. See the  [user guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/expression-language/#internal-context-functions)  for more information on available functions.
     * @param {String} opts.candidateGroup Only include tasks that are offered to the given group.
     * @param {String} opts.candidateGroupExpression Only include tasks that are offered to the group described by the given expression.  See the  [user guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/expression-language/#internal-context-functions)  for more information on available functions.
     * @param {String} opts.candidateUser Only include tasks that are offered to the given user or to one of his groups.
     * @param {String} opts.candidateUserExpression Only include tasks that are offered to the user described by the given expression.  See the  [user guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/expression-language/#internal-context-functions)  for more information on available functions.
     * @param {Boolean} opts.includeAssignedTasks Also include tasks that are assigned to users in candidate queries. Default is to only  include tasks that are not assigned to any user if you query by candidate user or group(s). (default to false)
     * @param {String} opts.involvedUser Only include tasks that the given user is involved in. A user is involved in a task if  an identity link exists between task and user (e.g., the user is the assignee).
     * @param {String} opts.involvedUserExpression Only include tasks that the user described by the given expression is involved in. A user is involved in a task if an identity link exists between task and user (e.g., the user is the assignee). See the [user guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions.
     * @param {Boolean} opts.assigned If set to `true`, restricts the query to all tasks that are assigned. (default to false)
     * @param {Boolean} opts.unassigned If set to `true`, restricts the query to all tasks that are unassigned. (default to false)
     * @param {String} opts.taskDefinitionKey Restrict to tasks that have the given key.
     * @param {String} opts.taskDefinitionKeyIn Restrict to tasks that have one of the given keys. The keys need to be in a comma-separated list.
     * @param {String} opts.taskDefinitionKeyLike Restrict to tasks that have a key that has the parameter value as a substring.
     * @param {String} opts.name Restrict to tasks that have the given name.
     * @param {String} opts.nameNotEqual Restrict to tasks that do not have the given name.
     * @param {String} opts.nameLike Restrict to tasks that have a name with the given parameter value as substring.
     * @param {String} opts.nameNotLike Restrict to tasks that do not have a name with the given parameter value as substring.
     * @param {String} opts.description Restrict to tasks that have the given description.
     * @param {String} opts.descriptionLike Restrict to tasks that have a description that has the parameter value as a substring.
     * @param {Number} opts.priority Restrict to tasks that have the given priority.
     * @param {Number} opts.maxPriority Restrict to tasks that have a lower or equal priority.
     * @param {Number} opts.minPriority Restrict to tasks that have a higher or equal priority.
     * @param {String} opts.dueDate Restrict to tasks that are due on the given date. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.546+0200`.
     * @param {String} opts.dueDateExpression Restrict to tasks that are due on the date described by the given expression. See the [User Guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a `java.util.Date` or `org.joda.time.DateTime` object.
     * @param {String} opts.dueAfter Restrict to tasks that are due after the given date. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.435+0200`.
     * @param {String} opts.dueAfterExpression Restrict to tasks that are due after the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a `java.util.Date` or `org.joda.time.DateTime` object.
     * @param {String} opts.dueBefore Restrict to tasks that are due before the given date. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.243+0200`.
     * @param {String} opts.dueBeforeExpression Restrict to tasks that are due before the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a `java.util.Date` or `org.joda.time.DateTime` object.
     * @param {String} opts.followUpDate Restrict to tasks that have a followUp date on the given date. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.342+0200`.
     * @param {String} opts.followUpDateExpression Restrict to tasks that have a followUp date on the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a `java.util.Date` or `org.joda.time.DateTime` object.
     * @param {String} opts.followUpAfter Restrict to tasks that have a followUp date after the given date. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.542+0200`.
     * @param {String} opts.followUpAfterExpression Restrict to tasks that have a followUp date after the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a `java.util.Date` or `org.joda.time.DateTime` object.
     * @param {String} opts.followUpBefore Restrict to tasks that have a followUp date before the given date. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.234+0200`.
     * @param {String} opts.followUpBeforeExpression Restrict to tasks that have a followUp date before the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a `java.util.Date` or `org.joda.time.DateTime` object.
     * @param {String} opts.followUpBeforeOrNotExistent Restrict to tasks that have no followUp date or a followUp date before the given date. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.432+0200`. The typical use case is to query all `active` tasks for a user for a given date.
     * @param {String} opts.followUpBeforeOrNotExistentExpression Restrict to tasks that have no followUp date or a followUp date before the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a `java.util.Date` or `org.joda.time.DateTime` object.
     * @param {String} opts.createdOn Restrict to tasks that were created on the given date. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.324+0200`.
     * @param {String} opts.createdOnExpression Restrict to tasks that were created on the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a `java.util.Date` or `org.joda.time.DateTime` object.
     * @param {String} opts.createdAfter Restrict to tasks that were created after the given date. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.342+0200`.
     * @param {String} opts.createdAfterExpression Restrict to tasks that were created after the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a `java.util.Date` or `org.joda.time.DateTime` object.
     * @param {String} opts.createdBefore Restrict to tasks that were created before the given date. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.332+0200`.
     * @param {String} opts.createdBeforeExpression Restrict to tasks that were created before the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a `java.util.Date` or `org.joda.time.DateTime` object.
     * @param {module:model/String} opts.delegationState Restrict to tasks that are in the given delegation state. Valid values are `PENDING` and `RESOLVED`.
     * @param {String} opts.candidateGroups Restrict to tasks that are offered to any of the given candidate groups. Takes a comma-separated list of group names, so for example `developers,support,sales`.
     * @param {String} opts.candidateGroupsExpression Restrict to tasks that are offered to any of the candidate groups described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to `java.util.List` of Strings.
     * @param {Boolean} opts.withCandidateGroups Only include tasks which have a candidate group. Value may only be `true`, as `false` is the default behavior. (default to false)
     * @param {Boolean} opts.withoutCandidateGroups Only include tasks which have no candidate group. Value may only be `true`, as `false` is the default behavior. (default to false)
     * @param {Boolean} opts.withCandidateUsers Only include tasks which have a candidate user. Value may only be `true`, as `false` is the default behavior. (default to false)
     * @param {Boolean} opts.withoutCandidateUsers Only include tasks which have no candidate users. Value may only be `true`, as `false` is the default behavior. (default to false)
     * @param {Boolean} opts.active Only include active tasks. Value may only be `true`, as `false` is the default behavior. (default to false)
     * @param {Boolean} opts.suspended Only include suspended tasks. Value may only be `true`, as `false` is the default behavior. (default to false)
     * @param {String} opts.taskVariables Only include tasks that have variables with certain values. Variable filtering expressions are comma-separated and are structured as follows:  A valid parameter value has the form `key_operator_value`. `key` is the variable name, `operator` is the comparison operator to be used and `value` the variable value.  **Note**: Values are always treated as String objects on server side.  Valid `operator` values are: `eq` - equal to; `neq` - not equal to; `gt` - greater than; `gteq` - greater than or equal to; `lt` - lower than; `lteq` - lower than or equal to; `like`. `key` and `value` may not contain underscore or comma characters.
     * @param {String} opts.processVariables Only include tasks that belong to process instances that have variables with certain  values. Variable filtering expressions are comma-separated and are structured as follows:  A valid parameter value has the form `key_operator_value`. `key` is the variable name, `operator` is the comparison operator to be used and `value` the variable value.  **Note**: Values are always treated as String objects on server side.  Valid `operator` values are: `eq` - equal to; `neq` - not equal to; `gt` - greater than; `gteq` - greater than or equal to; `lt` - lower than; `lteq` - lower than or equal to; `like`. `key` and `value` may not contain underscore or comma characters.
     * @param {String} opts.caseInstanceVariables Only include tasks that belong to case instances that have variables with certain values. Variable filtering expressions are comma-separated and are structured as follows:  A valid parameter value has the form `key_operator_value`. `key` is the variable name, `operator` is the comparison operator to be used and `value` the variable value.  **Note**: Values are always treated as String objects on server side.  Valid `operator` values are: `eq` - equal to; `neq` - not equal to; `gt` - greater than; `gteq` - greater than or equal to; `lt` - lower than; `lteq` - lower than or equal to; `like`. `key` and `value` may not contain underscore or comma characters.
     * @param {Boolean} opts.variableNamesIgnoreCase Match all variable names in this query case-insensitively. If set `variableName` and `variablename` are treated as equal. (default to false)
     * @param {Boolean} opts.variableValuesIgnoreCase Match all variable values in this query case-insensitively. If set `variableValue` and `variablevalue` are treated as equal. (default to false)
     * @param {String} opts.parentTaskId Restrict query to all tasks that are sub tasks of the given task. Takes a task id.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CountResultDto} and HTTP response
     */
    getTasksCountWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'processInstanceId': opts['processInstanceId'],
        'processInstanceIdIn': opts['processInstanceIdIn'],
        'processInstanceBusinessKey': opts['processInstanceBusinessKey'],
        'processInstanceBusinessKeyExpression': opts['processInstanceBusinessKeyExpression'],
        'processInstanceBusinessKeyIn': opts['processInstanceBusinessKeyIn'],
        'processInstanceBusinessKeyLike': opts['processInstanceBusinessKeyLike'],
        'processInstanceBusinessKeyLikeExpression': opts['processInstanceBusinessKeyLikeExpression'],
        'processDefinitionId': opts['processDefinitionId'],
        'processDefinitionKey': opts['processDefinitionKey'],
        'processDefinitionKeyIn': opts['processDefinitionKeyIn'],
        'processDefinitionName': opts['processDefinitionName'],
        'processDefinitionNameLike': opts['processDefinitionNameLike'],
        'executionId': opts['executionId'],
        'caseInstanceId': opts['caseInstanceId'],
        'caseInstanceBusinessKey': opts['caseInstanceBusinessKey'],
        'caseInstanceBusinessKeyLike': opts['caseInstanceBusinessKeyLike'],
        'caseDefinitionId': opts['caseDefinitionId'],
        'caseDefinitionKey': opts['caseDefinitionKey'],
        'caseDefinitionName': opts['caseDefinitionName'],
        'caseDefinitionNameLike': opts['caseDefinitionNameLike'],
        'caseExecutionId': opts['caseExecutionId'],
        'activityInstanceIdIn': opts['activityInstanceIdIn'],
        'tenantIdIn': opts['tenantIdIn'],
        'withoutTenantId': opts['withoutTenantId'],
        'assignee': opts['assignee'],
        'assigneeExpression': opts['assigneeExpression'],
        'assigneeLike': opts['assigneeLike'],
        'assigneeLikeExpression': opts['assigneeLikeExpression'],
        'assigneeIn': opts['assigneeIn'],
        'owner': opts['owner'],
        'ownerExpression': opts['ownerExpression'],
        'candidateGroup': opts['candidateGroup'],
        'candidateGroupExpression': opts['candidateGroupExpression'],
        'candidateUser': opts['candidateUser'],
        'candidateUserExpression': opts['candidateUserExpression'],
        'includeAssignedTasks': opts['includeAssignedTasks'],
        'involvedUser': opts['involvedUser'],
        'involvedUserExpression': opts['involvedUserExpression'],
        'assigned': opts['assigned'],
        'unassigned': opts['unassigned'],
        'taskDefinitionKey': opts['taskDefinitionKey'],
        'taskDefinitionKeyIn': opts['taskDefinitionKeyIn'],
        'taskDefinitionKeyLike': opts['taskDefinitionKeyLike'],
        'name': opts['name'],
        'nameNotEqual': opts['nameNotEqual'],
        'nameLike': opts['nameLike'],
        'nameNotLike': opts['nameNotLike'],
        'description': opts['description'],
        'descriptionLike': opts['descriptionLike'],
        'priority': opts['priority'],
        'maxPriority': opts['maxPriority'],
        'minPriority': opts['minPriority'],
        'dueDate': opts['dueDate'],
        'dueDateExpression': opts['dueDateExpression'],
        'dueAfter': opts['dueAfter'],
        'dueAfterExpression': opts['dueAfterExpression'],
        'dueBefore': opts['dueBefore'],
        'dueBeforeExpression': opts['dueBeforeExpression'],
        'followUpDate': opts['followUpDate'],
        'followUpDateExpression': opts['followUpDateExpression'],
        'followUpAfter': opts['followUpAfter'],
        'followUpAfterExpression': opts['followUpAfterExpression'],
        'followUpBefore': opts['followUpBefore'],
        'followUpBeforeExpression': opts['followUpBeforeExpression'],
        'followUpBeforeOrNotExistent': opts['followUpBeforeOrNotExistent'],
        'followUpBeforeOrNotExistentExpression': opts['followUpBeforeOrNotExistentExpression'],
        'createdOn': opts['createdOn'],
        'createdOnExpression': opts['createdOnExpression'],
        'createdAfter': opts['createdAfter'],
        'createdAfterExpression': opts['createdAfterExpression'],
        'createdBefore': opts['createdBefore'],
        'createdBeforeExpression': opts['createdBeforeExpression'],
        'delegationState': opts['delegationState'],
        'candidateGroups': opts['candidateGroups'],
        'candidateGroupsExpression': opts['candidateGroupsExpression'],
        'withCandidateGroups': opts['withCandidateGroups'],
        'withoutCandidateGroups': opts['withoutCandidateGroups'],
        'withCandidateUsers': opts['withCandidateUsers'],
        'withoutCandidateUsers': opts['withoutCandidateUsers'],
        'active': opts['active'],
        'suspended': opts['suspended'],
        'taskVariables': opts['taskVariables'],
        'processVariables': opts['processVariables'],
        'caseInstanceVariables': opts['caseInstanceVariables'],
        'variableNamesIgnoreCase': opts['variableNamesIgnoreCase'],
        'variableValuesIgnoreCase': opts['variableValuesIgnoreCase'],
        'parentTaskId': opts['parentTaskId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CountResultDto;
      return this.apiClient.callApi(
        '/task/count', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieves the number of tasks that fulfill a provided filter. Corresponds to the size of the result set when using the [Get Tasks](https://docs.camunda.org/manual/7.14/reference/rest/task/) method.  **Security Consideration:** There are several query parameters (such as assigneeExpression) for specifying an EL expression. These are disabled by default to prevent remote code execution. See the section on [security considerations](https://docs.camunda.org/manual/7.14/user-guide/process-engine/securing-custom-code/) for custom code in the user guide for details.
     * @param {Object} opts Optional parameters
     * @param {String} opts.processInstanceId Restrict to tasks that belong to process instances with the given id.
     * @param {String} opts.processInstanceIdIn Restrict to tasks that belong to process instances with the given ids.
     * @param {String} opts.processInstanceBusinessKey Restrict to tasks that belong to process instances with the given business key.
     * @param {String} opts.processInstanceBusinessKeyExpression Restrict to tasks that belong to process instances with the given business key which  is described by an expression. See the  [user guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions.
     * @param {String} opts.processInstanceBusinessKeyIn Restrict to tasks that belong to process instances with one of the give business keys.  The keys need to be in a comma-separated list.
     * @param {String} opts.processInstanceBusinessKeyLike Restrict to tasks that have a process instance business key that has the parameter  value as a substring.
     * @param {String} opts.processInstanceBusinessKeyLikeExpression Restrict to tasks that have a process instance business key that has the parameter  value as a substring and is described by an expression. See the [user guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/expression-language/#internal-context-functions)  for more information on available functions.
     * @param {String} opts.processDefinitionId Restrict to tasks that belong to a process definition with the given id.
     * @param {String} opts.processDefinitionKey Restrict to tasks that belong to a process definition with the given key.
     * @param {String} opts.processDefinitionKeyIn Restrict to tasks that belong to a process definition with one of the given keys. The  keys need to be in a comma-separated list.
     * @param {String} opts.processDefinitionName Restrict to tasks that belong to a process definition with the given name.
     * @param {String} opts.processDefinitionNameLike Restrict to tasks that have a process definition name that has the parameter value as  a substring.
     * @param {String} opts.executionId Restrict to tasks that belong to an execution with the given id.
     * @param {String} opts.caseInstanceId Restrict to tasks that belong to case instances with the given id.
     * @param {String} opts.caseInstanceBusinessKey Restrict to tasks that belong to case instances with the given business key.
     * @param {String} opts.caseInstanceBusinessKeyLike Restrict to tasks that have a case instance business key that has the parameter value  as a substring.
     * @param {String} opts.caseDefinitionId Restrict to tasks that belong to a case definition with the given id.
     * @param {String} opts.caseDefinitionKey Restrict to tasks that belong to a case definition with the given key.
     * @param {String} opts.caseDefinitionName Restrict to tasks that belong to a case definition with the given name.
     * @param {String} opts.caseDefinitionNameLike Restrict to tasks that have a case definition name that has the parameter value as a  substring.
     * @param {String} opts.caseExecutionId Restrict to tasks that belong to a case execution with the given id.
     * @param {String} opts.activityInstanceIdIn Only include tasks which belong to one of the passed and comma-separated activity  instance ids.
     * @param {String} opts.tenantIdIn Only include tasks which belong to one of the passed and comma-separated  tenant ids.
     * @param {Boolean} opts.withoutTenantId Only include tasks which belong to no tenant. Value may only be `true`,  as `false` is the default behavior. (default to false)
     * @param {String} opts.assignee Restrict to tasks that the given user is assigned to.
     * @param {String} opts.assigneeExpression Restrict to tasks that the user described by the given expression is assigned to.  See the  [user guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/expression-language/#internal-context-functions)  for more information on available functions.
     * @param {String} opts.assigneeLike Restrict to tasks that have an assignee that has the parameter  value as a substring.
     * @param {String} opts.assigneeLikeExpression Restrict to tasks that have an assignee that has the parameter value described by the  given expression as a substring. See the  [user guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/expression-language/#internal-context-functions)  for more information on available functions.
     * @param {String} opts.assigneeIn Only include tasks which are assigned to one of the passed and  comma-separated user ids.
     * @param {String} opts.owner Restrict to tasks that the given user owns.
     * @param {String} opts.ownerExpression Restrict to tasks that the user described by the given expression owns. See the  [user guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/expression-language/#internal-context-functions)  for more information on available functions.
     * @param {String} opts.candidateGroup Only include tasks that are offered to the given group.
     * @param {String} opts.candidateGroupExpression Only include tasks that are offered to the group described by the given expression.  See the  [user guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/expression-language/#internal-context-functions)  for more information on available functions.
     * @param {String} opts.candidateUser Only include tasks that are offered to the given user or to one of his groups.
     * @param {String} opts.candidateUserExpression Only include tasks that are offered to the user described by the given expression.  See the  [user guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/expression-language/#internal-context-functions)  for more information on available functions.
     * @param {Boolean} opts.includeAssignedTasks Also include tasks that are assigned to users in candidate queries. Default is to only  include tasks that are not assigned to any user if you query by candidate user or group(s). (default to false)
     * @param {String} opts.involvedUser Only include tasks that the given user is involved in. A user is involved in a task if  an identity link exists between task and user (e.g., the user is the assignee).
     * @param {String} opts.involvedUserExpression Only include tasks that the user described by the given expression is involved in. A user is involved in a task if an identity link exists between task and user (e.g., the user is the assignee). See the [user guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions.
     * @param {Boolean} opts.assigned If set to `true`, restricts the query to all tasks that are assigned. (default to false)
     * @param {Boolean} opts.unassigned If set to `true`, restricts the query to all tasks that are unassigned. (default to false)
     * @param {String} opts.taskDefinitionKey Restrict to tasks that have the given key.
     * @param {String} opts.taskDefinitionKeyIn Restrict to tasks that have one of the given keys. The keys need to be in a comma-separated list.
     * @param {String} opts.taskDefinitionKeyLike Restrict to tasks that have a key that has the parameter value as a substring.
     * @param {String} opts.name Restrict to tasks that have the given name.
     * @param {String} opts.nameNotEqual Restrict to tasks that do not have the given name.
     * @param {String} opts.nameLike Restrict to tasks that have a name with the given parameter value as substring.
     * @param {String} opts.nameNotLike Restrict to tasks that do not have a name with the given parameter value as substring.
     * @param {String} opts.description Restrict to tasks that have the given description.
     * @param {String} opts.descriptionLike Restrict to tasks that have a description that has the parameter value as a substring.
     * @param {Number} opts.priority Restrict to tasks that have the given priority.
     * @param {Number} opts.maxPriority Restrict to tasks that have a lower or equal priority.
     * @param {Number} opts.minPriority Restrict to tasks that have a higher or equal priority.
     * @param {String} opts.dueDate Restrict to tasks that are due on the given date. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.546+0200`.
     * @param {String} opts.dueDateExpression Restrict to tasks that are due on the date described by the given expression. See the [User Guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a `java.util.Date` or `org.joda.time.DateTime` object.
     * @param {String} opts.dueAfter Restrict to tasks that are due after the given date. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.435+0200`.
     * @param {String} opts.dueAfterExpression Restrict to tasks that are due after the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a `java.util.Date` or `org.joda.time.DateTime` object.
     * @param {String} opts.dueBefore Restrict to tasks that are due before the given date. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.243+0200`.
     * @param {String} opts.dueBeforeExpression Restrict to tasks that are due before the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a `java.util.Date` or `org.joda.time.DateTime` object.
     * @param {String} opts.followUpDate Restrict to tasks that have a followUp date on the given date. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.342+0200`.
     * @param {String} opts.followUpDateExpression Restrict to tasks that have a followUp date on the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a `java.util.Date` or `org.joda.time.DateTime` object.
     * @param {String} opts.followUpAfter Restrict to tasks that have a followUp date after the given date. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.542+0200`.
     * @param {String} opts.followUpAfterExpression Restrict to tasks that have a followUp date after the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a `java.util.Date` or `org.joda.time.DateTime` object.
     * @param {String} opts.followUpBefore Restrict to tasks that have a followUp date before the given date. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.234+0200`.
     * @param {String} opts.followUpBeforeExpression Restrict to tasks that have a followUp date before the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a `java.util.Date` or `org.joda.time.DateTime` object.
     * @param {String} opts.followUpBeforeOrNotExistent Restrict to tasks that have no followUp date or a followUp date before the given date. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.432+0200`. The typical use case is to query all `active` tasks for a user for a given date.
     * @param {String} opts.followUpBeforeOrNotExistentExpression Restrict to tasks that have no followUp date or a followUp date before the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a `java.util.Date` or `org.joda.time.DateTime` object.
     * @param {String} opts.createdOn Restrict to tasks that were created on the given date. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.324+0200`.
     * @param {String} opts.createdOnExpression Restrict to tasks that were created on the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a `java.util.Date` or `org.joda.time.DateTime` object.
     * @param {String} opts.createdAfter Restrict to tasks that were created after the given date. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.342+0200`.
     * @param {String} opts.createdAfterExpression Restrict to tasks that were created after the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a `java.util.Date` or `org.joda.time.DateTime` object.
     * @param {String} opts.createdBefore Restrict to tasks that were created before the given date. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.332+0200`.
     * @param {String} opts.createdBeforeExpression Restrict to tasks that were created before the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a `java.util.Date` or `org.joda.time.DateTime` object.
     * @param {module:model/String} opts.delegationState Restrict to tasks that are in the given delegation state. Valid values are `PENDING` and `RESOLVED`.
     * @param {String} opts.candidateGroups Restrict to tasks that are offered to any of the given candidate groups. Takes a comma-separated list of group names, so for example `developers,support,sales`.
     * @param {String} opts.candidateGroupsExpression Restrict to tasks that are offered to any of the candidate groups described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to `java.util.List` of Strings.
     * @param {Boolean} opts.withCandidateGroups Only include tasks which have a candidate group. Value may only be `true`, as `false` is the default behavior. (default to false)
     * @param {Boolean} opts.withoutCandidateGroups Only include tasks which have no candidate group. Value may only be `true`, as `false` is the default behavior. (default to false)
     * @param {Boolean} opts.withCandidateUsers Only include tasks which have a candidate user. Value may only be `true`, as `false` is the default behavior. (default to false)
     * @param {Boolean} opts.withoutCandidateUsers Only include tasks which have no candidate users. Value may only be `true`, as `false` is the default behavior. (default to false)
     * @param {Boolean} opts.active Only include active tasks. Value may only be `true`, as `false` is the default behavior. (default to false)
     * @param {Boolean} opts.suspended Only include suspended tasks. Value may only be `true`, as `false` is the default behavior. (default to false)
     * @param {String} opts.taskVariables Only include tasks that have variables with certain values. Variable filtering expressions are comma-separated and are structured as follows:  A valid parameter value has the form `key_operator_value`. `key` is the variable name, `operator` is the comparison operator to be used and `value` the variable value.  **Note**: Values are always treated as String objects on server side.  Valid `operator` values are: `eq` - equal to; `neq` - not equal to; `gt` - greater than; `gteq` - greater than or equal to; `lt` - lower than; `lteq` - lower than or equal to; `like`. `key` and `value` may not contain underscore or comma characters.
     * @param {String} opts.processVariables Only include tasks that belong to process instances that have variables with certain  values. Variable filtering expressions are comma-separated and are structured as follows:  A valid parameter value has the form `key_operator_value`. `key` is the variable name, `operator` is the comparison operator to be used and `value` the variable value.  **Note**: Values are always treated as String objects on server side.  Valid `operator` values are: `eq` - equal to; `neq` - not equal to; `gt` - greater than; `gteq` - greater than or equal to; `lt` - lower than; `lteq` - lower than or equal to; `like`. `key` and `value` may not contain underscore or comma characters.
     * @param {String} opts.caseInstanceVariables Only include tasks that belong to case instances that have variables with certain values. Variable filtering expressions are comma-separated and are structured as follows:  A valid parameter value has the form `key_operator_value`. `key` is the variable name, `operator` is the comparison operator to be used and `value` the variable value.  **Note**: Values are always treated as String objects on server side.  Valid `operator` values are: `eq` - equal to; `neq` - not equal to; `gt` - greater than; `gteq` - greater than or equal to; `lt` - lower than; `lteq` - lower than or equal to; `like`. `key` and `value` may not contain underscore or comma characters.
     * @param {Boolean} opts.variableNamesIgnoreCase Match all variable names in this query case-insensitively. If set `variableName` and `variablename` are treated as equal. (default to false)
     * @param {Boolean} opts.variableValuesIgnoreCase Match all variable values in this query case-insensitively. If set `variableValue` and `variablevalue` are treated as equal. (default to false)
     * @param {String} opts.parentTaskId Restrict query to all tasks that are sub tasks of the given task. Takes a task id.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CountResultDto}
     */
    getTasksCount(opts) {
      return this.getTasksCountWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Reports a business error in the context of a running task by id. The error code must be specified to identify the BPMN error handler. See the documentation for [Reporting Bpmn Error](https://docs.camunda.org/manual/7.14/reference/bpmn20/tasks/user-task/#reporting-bpmn-error) in User Tasks.
     * @param {String} id The id of the task a BPMN error is reported for.
     * @param {Object} opts Optional parameters
     * @param {module:model/TaskBpmnErrorDto} opts.taskBpmnErrorDto 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    handleBpmnErrorWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = opts['taskBpmnErrorDto'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling handleBpmnError");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/task/{id}/bpmnError', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Reports a business error in the context of a running task by id. The error code must be specified to identify the BPMN error handler. See the documentation for [Reporting Bpmn Error](https://docs.camunda.org/manual/7.14/reference/bpmn20/tasks/user-task/#reporting-bpmn-error) in User Tasks.
     * @param {String} id The id of the task a BPMN error is reported for.
     * @param {Object} opts Optional parameters
     * @param {module:model/TaskBpmnErrorDto} opts.taskBpmnErrorDto 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    handleBpmnError(id, opts) {
      return this.handleBpmnErrorWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Reports an escalation in the context of a running task by id. The escalation code must be specified to identify the escalation handler. See the documentation for [Reporting Bpmn Escalation](https://docs.camunda.org/manual/7.14/reference/bpmn20/tasks/user-task/#reporting-bpmn-escalation) in User Tasks.
     * @param {String} id The id of the task in which context a BPMN escalation is reported.
     * @param {Object} opts Optional parameters
     * @param {module:model/TaskEscalationDto} opts.taskEscalationDto 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    handleEscalationWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = opts['taskEscalationDto'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling handleEscalation");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/task/{id}/bpmnEscalation', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Reports an escalation in the context of a running task by id. The escalation code must be specified to identify the escalation handler. See the documentation for [Reporting Bpmn Escalation](https://docs.camunda.org/manual/7.14/reference/bpmn20/tasks/user-task/#reporting-bpmn-escalation) in User Tasks.
     * @param {String} id The id of the task in which context a BPMN escalation is reported.
     * @param {Object} opts Optional parameters
     * @param {module:model/TaskEscalationDto} opts.taskEscalationDto 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    handleEscalation(id, opts) {
      return this.handleEscalationWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Queries for tasks that fulfill a given filter. This method is slightly more powerful than the [Get Tasks](https://docs.camunda.org/manual/7.14/reference/rest/task/get-query/) method because it allows filtering by multiple process or task variables of types `String`, `Number` or `Boolean`. The size of the result set can be retrieved by using the [Get Task Count (POST)](https://docs.camunda.org/manual/7.14/reference/rest/task/post-query-count/) method.  **Security Consideration**: There are several parameters (such as `assigneeExpression`) for specifying an EL expression. These are disabled by default to prevent remote code execution. See the section on [security considerations for custom code](https://docs.camunda.org/manual/7.14/user-guide/process-engine/securing-custom-code/) in the user guide for details.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.firstResult Pagination of results. Specifies the index of the first result to return.
     * @param {Number} opts.maxResults Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
     * @param {module:model/TaskQueryDto} opts.taskQueryDto 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/TaskDto>} and HTTP response
     */
    queryTasksWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['taskQueryDto'];

      let pathParams = {
      };
      let queryParams = {
        'firstResult': opts['firstResult'],
        'maxResults': opts['maxResults']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [TaskDto];
      return this.apiClient.callApi(
        '/task', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Queries for tasks that fulfill a given filter. This method is slightly more powerful than the [Get Tasks](https://docs.camunda.org/manual/7.14/reference/rest/task/get-query/) method because it allows filtering by multiple process or task variables of types `String`, `Number` or `Boolean`. The size of the result set can be retrieved by using the [Get Task Count (POST)](https://docs.camunda.org/manual/7.14/reference/rest/task/post-query-count/) method.  **Security Consideration**: There are several parameters (such as `assigneeExpression`) for specifying an EL expression. These are disabled by default to prevent remote code execution. See the section on [security considerations for custom code](https://docs.camunda.org/manual/7.14/user-guide/process-engine/securing-custom-code/) in the user guide for details.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.firstResult Pagination of results. Specifies the index of the first result to return.
     * @param {Number} opts.maxResults Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
     * @param {module:model/TaskQueryDto} opts.taskQueryDto 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/TaskDto>}
     */
    queryTasks(opts) {
      return this.queryTasksWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieves the number of tasks that fulfill the given filter. Corresponds to the size of the result set of the [Get Tasks (POST)](https://docs.camunda.org/manual/7.14/reference/rest/task/post-query/) method and takes the same parameters.  **Security Consideration**: There are several parameters (such as `assigneeExpression`) for specifying an EL expression. These are disabled by default to prevent remote code execution. See the section on [security considerations for custom code](https://docs.camunda.org/manual/7.14/user-guide/process-engine/securing-custom-code/) in the user guide for details.
     * @param {Object} opts Optional parameters
     * @param {module:model/TaskQueryDto} opts.taskQueryDto 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CountResultDto} and HTTP response
     */
    queryTasksCountWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['taskQueryDto'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CountResultDto;
      return this.apiClient.callApi(
        '/task/count', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieves the number of tasks that fulfill the given filter. Corresponds to the size of the result set of the [Get Tasks (POST)](https://docs.camunda.org/manual/7.14/reference/rest/task/post-query/) method and takes the same parameters.  **Security Consideration**: There are several parameters (such as `assigneeExpression`) for specifying an EL expression. These are disabled by default to prevent remote code execution. See the section on [security considerations for custom code](https://docs.camunda.org/manual/7.14/user-guide/process-engine/securing-custom-code/) in the user guide for details.
     * @param {Object} opts Optional parameters
     * @param {module:model/TaskQueryDto} opts.taskQueryDto 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CountResultDto}
     */
    queryTasksCount(opts) {
      return this.queryTasksCountWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Resolves a task and updates execution variables.  Resolving a task marks that the assignee is done with the task delegated to them, and that it can be sent back to the owner. Can only be executed when the task has been delegated. The assignee will be set to the owner, who performed the delegation.
     * @param {String} id The id of the task to resolve.
     * @param {Object} opts Optional parameters
     * @param {module:model/CompleteTaskDto} opts.completeTaskDto 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    resolveWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = opts['completeTaskDto'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling resolve");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/task/{id}/resolve', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Resolves a task and updates execution variables.  Resolving a task marks that the assignee is done with the task delegated to them, and that it can be sent back to the owner. Can only be executed when the task has been delegated. The assignee will be set to the owner, who performed the delegation.
     * @param {String} id The id of the task to resolve.
     * @param {Object} opts Optional parameters
     * @param {module:model/CompleteTaskDto} opts.completeTaskDto 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    resolve(id, opts) {
      return this.resolveWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Changes the assignee of a task to a specific user.  **Note:** The difference with the [Claim Task](https://docs.camunda.org/manual/7.14/reference/rest/task/post-claim/) method is that this method does not check if the task already has a user assigned to it.
     * @param {String} id The id of the task to set the assignee for.
     * @param {Object} opts Optional parameters
     * @param {module:model/UserIdDto} opts.userIdDto Provide the id of the user that will be the assignee of the task.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    setAssigneeWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = opts['userIdDto'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling setAssignee");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/task/{id}/assignee', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Changes the assignee of a task to a specific user.  **Note:** The difference with the [Claim Task](https://docs.camunda.org/manual/7.14/reference/rest/task/post-claim/) method is that this method does not check if the task already has a user assigned to it.
     * @param {String} id The id of the task to set the assignee for.
     * @param {Object} opts Optional parameters
     * @param {module:model/UserIdDto} opts.userIdDto Provide the id of the user that will be the assignee of the task.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    setAssignee(id, opts) {
      return this.setAssigneeWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Completes a task and updates process variables using a form submit. There are two difference between this method and the `complete` method:  * If the task is in state `PENDING` - i.e., has been delegated before, it is not completed but resolved. Otherwise it will be completed. * If the task has Form Field Metadata defined, the process engine will perform backend validation for any form fields which have validators defined. See the [Generated Task Forms](https://docs.camunda.org/manual/7.14/user-guide/task-forms/_index/#generated-task-forms) section of the [User Guide](https://docs.camunda.org/manual/7.14/user-guide/) for more information.
     * @param {String} id The id of the task to submit the form for.
     * @param {Object} opts Optional parameters
     * @param {module:model/CompleteTaskDto} opts.completeTaskDto 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object.<String, module:model/{String: VariableValueDto}>} and HTTP response
     */
    submitWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = opts['completeTaskDto'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling submit");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = {'String': VariableValueDto};
      return this.apiClient.callApi(
        '/task/{id}/submit-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Completes a task and updates process variables using a form submit. There are two difference between this method and the `complete` method:  * If the task is in state `PENDING` - i.e., has been delegated before, it is not completed but resolved. Otherwise it will be completed. * If the task has Form Field Metadata defined, the process engine will perform backend validation for any form fields which have validators defined. See the [Generated Task Forms](https://docs.camunda.org/manual/7.14/user-guide/task-forms/_index/#generated-task-forms) section of the [User Guide](https://docs.camunda.org/manual/7.14/user-guide/) for more information.
     * @param {String} id The id of the task to submit the form for.
     * @param {Object} opts Optional parameters
     * @param {module:model/CompleteTaskDto} opts.completeTaskDto 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object.<String, module:model/{String: VariableValueDto}>}
     */
    submit(id, opts) {
      return this.submitWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Resets a task's assignee. If successful, the task is not assigned to a user.
     * @param {String} id The id of the task to unclaim.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    unclaimWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling unclaim");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/task/{id}/unclaim', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Resets a task's assignee. If successful, the task is not assigned to a user.
     * @param {String} id The id of the task to unclaim.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    unclaim(id) {
      return this.unclaimWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Updates a task.
     * @param {String} id The id of the task to be updated.
     * @param {Object} opts Optional parameters
     * @param {module:model/TaskDto} opts.taskDto 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    updateTaskWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = opts['taskDto'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateTask");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/task/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Updates a task.
     * @param {String} id The id of the task to be updated.
     * @param {Object} opts Optional parameters
     * @param {module:model/TaskDto} opts.taskDto 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    updateTask(id, opts) {
      return this.updateTaskWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
