/**
 * Camunda BPM REST API
 * OpenApi Spec for Camunda BPM REST API.
 *
 * The version of the OpenAPI document: 7.14.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BatchDto from '../model/BatchDto';
import CompleteExternalTaskDto from '../model/CompleteExternalTaskDto';
import CountResultDto from '../model/CountResultDto';
import ExceptionDto from '../model/ExceptionDto';
import ExtendLockOnExternalTaskDto from '../model/ExtendLockOnExternalTaskDto';
import ExternalTaskBpmnError from '../model/ExternalTaskBpmnError';
import ExternalTaskDto from '../model/ExternalTaskDto';
import ExternalTaskFailureDto from '../model/ExternalTaskFailureDto';
import ExternalTaskQueryDto from '../model/ExternalTaskQueryDto';
import FetchExternalTasksDto from '../model/FetchExternalTasksDto';
import LockedExternalTaskDto from '../model/LockedExternalTaskDto';
import PriorityDto from '../model/PriorityDto';
import RetriesDto from '../model/RetriesDto';
import SetRetriesForExternalTasksDto from '../model/SetRetriesForExternalTasksDto';

/**
* ExternalTask service.
* @module api/ExternalTaskApi
* @version 7.14.0
*/
export default class ExternalTaskApi {

    /**
    * Constructs a new ExternalTaskApi. 
    * @alias module:api/ExternalTaskApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Completes an external task by id and updates process variables.
     * @param {String} id The id of the task to complete.
     * @param {Object} opts Optional parameters
     * @param {module:model/CompleteExternalTaskDto} opts.completeExternalTaskDto 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    completeExternalTaskResourceWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = opts['completeExternalTaskDto'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling completeExternalTaskResource");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/external-task/{id}/complete', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Completes an external task by id and updates process variables.
     * @param {String} id The id of the task to complete.
     * @param {Object} opts Optional parameters
     * @param {module:model/CompleteExternalTaskDto} opts.completeExternalTaskDto 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    completeExternalTaskResource(id, opts) {
      return this.completeExternalTaskResourceWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Extends the timeout of the lock by a given amount of time.
     * @param {String} id The id of the external task.
     * @param {Object} opts Optional parameters
     * @param {module:model/ExtendLockOnExternalTaskDto} opts.extendLockOnExternalTaskDto 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    extendLockWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = opts['extendLockOnExternalTaskDto'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling extendLock");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/external-task/{id}/extendLock', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Extends the timeout of the lock by a given amount of time.
     * @param {String} id The id of the external task.
     * @param {Object} opts Optional parameters
     * @param {module:model/ExtendLockOnExternalTaskDto} opts.extendLockOnExternalTaskDto 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    extendLock(id, opts) {
      return this.extendLockWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Fetches and locks a specific number of external tasks for execution by a worker. Query can be restricted to specific task topics and for each task topic an individual lock time can be provided.
     * @param {Object} opts Optional parameters
     * @param {module:model/FetchExternalTasksDto} opts.fetchExternalTasksDto 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/LockedExternalTaskDto>} and HTTP response
     */
    fetchAndLockWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['fetchExternalTasksDto'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [LockedExternalTaskDto];
      return this.apiClient.callApi(
        '/external-task/fetchAndLock', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Fetches and locks a specific number of external tasks for execution by a worker. Query can be restricted to specific task topics and for each task topic an individual lock time can be provided.
     * @param {Object} opts Optional parameters
     * @param {module:model/FetchExternalTasksDto} opts.fetchExternalTasksDto 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/LockedExternalTaskDto>}
     */
    fetchAndLock(opts) {
      return this.fetchAndLockWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieves an external task by id, corresponding to the `ExternalTask` interface in the engine.
     * @param {String} id The id of the external task to be retrieved.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ExternalTaskDto} and HTTP response
     */
    getExternalTaskWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getExternalTask");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ExternalTaskDto;
      return this.apiClient.callApi(
        '/external-task/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieves an external task by id, corresponding to the `ExternalTask` interface in the engine.
     * @param {String} id The id of the external task to be retrieved.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ExternalTaskDto}
     */
    getExternalTask(id) {
      return this.getExternalTaskWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieves the error details in the context of a running external task by id.
     * @param {String} id The id of the external task for which the error details should be retrieved.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link String} and HTTP response
     */
    getExternalTaskErrorDetailsWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getExternalTaskErrorDetails");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/external-task/{id}/errorDetails', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieves the error details in the context of a running external task by id.
     * @param {String} id The id of the external task for which the error details should be retrieved.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link String}
     */
    getExternalTaskErrorDetails(id) {
      return this.getExternalTaskErrorDetailsWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Queries for the external tasks that fulfill given parameters. Parameters may be static as well as dynamic runtime properties of executions. The size of the result set can be retrieved by using the [Get External Task Count](https://docs.camunda.org/manual/7.14/reference/rest/external-task/get-query-count/) method.
     * @param {Object} opts Optional parameters
     * @param {String} opts.externalTaskId Filter by an external task's id.
     * @param {String} opts.externalTaskIdIn Filter by the comma-separated list of external task ids.
     * @param {String} opts.topicName Filter by an external task topic.
     * @param {String} opts.workerId Filter by the id of the worker that the task was most recently locked by.
     * @param {Boolean} opts.locked Only include external tasks that are currently locked (i.e., they have a lock time and it has not expired). Value may only be `true`, as `false` matches any external task.
     * @param {Boolean} opts.notLocked Only include external tasks that are currently not locked (i.e., they have no lock or it has expired). Value may only be `true`, as `false` matches any external task.
     * @param {Boolean} opts.withRetriesLeft Only include external tasks that have a positive (&gt; 0) number of retries (or `null`). Value may only be `true`, as `false` matches any external task.
     * @param {Boolean} opts.noRetriesLeft Only include external tasks that have 0 retries. Value may only be `true`, as `false` matches any external task.
     * @param {Date} opts.lockExpirationAfter Restrict to external tasks that have a lock that expires after a given date. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
     * @param {Date} opts.lockExpirationBefore Restrict to external tasks that have a lock that expires before a given date. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
     * @param {String} opts.activityId Filter by the id of the activity that an external task is created for.
     * @param {String} opts.activityIdIn Filter by the comma-separated list of ids of the activities that an external task is created for.
     * @param {String} opts.executionId Filter by the id of the execution that an external task belongs to.
     * @param {String} opts.processInstanceId Filter by the id of the process instance that an external task belongs to.
     * @param {String} opts.processInstanceIdIn Filter by a comma-separated list of process instance ids that an external task may belong to.
     * @param {String} opts.processDefinitionId Filter by the id of the process definition that an external task belongs to.
     * @param {String} opts.tenantIdIn Filter by a comma-separated list of tenant ids. An external task must have one of the given tenant ids.
     * @param {Boolean} opts.active Only include active tasks. Value may only be `true`, as `false` matches any external task.
     * @param {Boolean} opts.suspended Only include suspended tasks. Value may only be `true`, as `false` matches any external task.
     * @param {Number} opts.priorityHigherThanOrEquals Only include jobs with a priority higher than or equal to the given value. Value must be a valid `long` value.
     * @param {Number} opts.priorityLowerThanOrEquals Only include jobs with a priority lower than or equal to the given value. Value must be a valid `long` value.
     * @param {module:model/String} opts.sortBy Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter.
     * @param {module:model/String} opts.sortOrder Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter.
     * @param {Number} opts.firstResult Pagination of results. Specifies the index of the first result to return.
     * @param {Number} opts.maxResults Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/ExternalTaskDto>} and HTTP response
     */
    getExternalTasksWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'externalTaskId': opts['externalTaskId'],
        'externalTaskIdIn': opts['externalTaskIdIn'],
        'topicName': opts['topicName'],
        'workerId': opts['workerId'],
        'locked': opts['locked'],
        'notLocked': opts['notLocked'],
        'withRetriesLeft': opts['withRetriesLeft'],
        'noRetriesLeft': opts['noRetriesLeft'],
        'lockExpirationAfter': opts['lockExpirationAfter'],
        'lockExpirationBefore': opts['lockExpirationBefore'],
        'activityId': opts['activityId'],
        'activityIdIn': opts['activityIdIn'],
        'executionId': opts['executionId'],
        'processInstanceId': opts['processInstanceId'],
        'processInstanceIdIn': opts['processInstanceIdIn'],
        'processDefinitionId': opts['processDefinitionId'],
        'tenantIdIn': opts['tenantIdIn'],
        'active': opts['active'],
        'suspended': opts['suspended'],
        'priorityHigherThanOrEquals': opts['priorityHigherThanOrEquals'],
        'priorityLowerThanOrEquals': opts['priorityLowerThanOrEquals'],
        'sortBy': opts['sortBy'],
        'sortOrder': opts['sortOrder'],
        'firstResult': opts['firstResult'],
        'maxResults': opts['maxResults']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ExternalTaskDto];
      return this.apiClient.callApi(
        '/external-task', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Queries for the external tasks that fulfill given parameters. Parameters may be static as well as dynamic runtime properties of executions. The size of the result set can be retrieved by using the [Get External Task Count](https://docs.camunda.org/manual/7.14/reference/rest/external-task/get-query-count/) method.
     * @param {Object} opts Optional parameters
     * @param {String} opts.externalTaskId Filter by an external task's id.
     * @param {String} opts.externalTaskIdIn Filter by the comma-separated list of external task ids.
     * @param {String} opts.topicName Filter by an external task topic.
     * @param {String} opts.workerId Filter by the id of the worker that the task was most recently locked by.
     * @param {Boolean} opts.locked Only include external tasks that are currently locked (i.e., they have a lock time and it has not expired). Value may only be `true`, as `false` matches any external task.
     * @param {Boolean} opts.notLocked Only include external tasks that are currently not locked (i.e., they have no lock or it has expired). Value may only be `true`, as `false` matches any external task.
     * @param {Boolean} opts.withRetriesLeft Only include external tasks that have a positive (&gt; 0) number of retries (or `null`). Value may only be `true`, as `false` matches any external task.
     * @param {Boolean} opts.noRetriesLeft Only include external tasks that have 0 retries. Value may only be `true`, as `false` matches any external task.
     * @param {Date} opts.lockExpirationAfter Restrict to external tasks that have a lock that expires after a given date. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
     * @param {Date} opts.lockExpirationBefore Restrict to external tasks that have a lock that expires before a given date. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
     * @param {String} opts.activityId Filter by the id of the activity that an external task is created for.
     * @param {String} opts.activityIdIn Filter by the comma-separated list of ids of the activities that an external task is created for.
     * @param {String} opts.executionId Filter by the id of the execution that an external task belongs to.
     * @param {String} opts.processInstanceId Filter by the id of the process instance that an external task belongs to.
     * @param {String} opts.processInstanceIdIn Filter by a comma-separated list of process instance ids that an external task may belong to.
     * @param {String} opts.processDefinitionId Filter by the id of the process definition that an external task belongs to.
     * @param {String} opts.tenantIdIn Filter by a comma-separated list of tenant ids. An external task must have one of the given tenant ids.
     * @param {Boolean} opts.active Only include active tasks. Value may only be `true`, as `false` matches any external task.
     * @param {Boolean} opts.suspended Only include suspended tasks. Value may only be `true`, as `false` matches any external task.
     * @param {Number} opts.priorityHigherThanOrEquals Only include jobs with a priority higher than or equal to the given value. Value must be a valid `long` value.
     * @param {Number} opts.priorityLowerThanOrEquals Only include jobs with a priority lower than or equal to the given value. Value must be a valid `long` value.
     * @param {module:model/String} opts.sortBy Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter.
     * @param {module:model/String} opts.sortOrder Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter.
     * @param {Number} opts.firstResult Pagination of results. Specifies the index of the first result to return.
     * @param {Number} opts.maxResults Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/ExternalTaskDto>}
     */
    getExternalTasks(opts) {
      return this.getExternalTasksWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Queries for the number of external tasks that fulfill given parameters. Takes the same parameters as the [Get External Tasks](https://docs.camunda.org/manual/7.14/reference/rest/external-task/get-query/) method.
     * @param {Object} opts Optional parameters
     * @param {String} opts.externalTaskId Filter by an external task's id.
     * @param {String} opts.externalTaskIdIn Filter by the comma-separated list of external task ids.
     * @param {String} opts.topicName Filter by an external task topic.
     * @param {String} opts.workerId Filter by the id of the worker that the task was most recently locked by.
     * @param {Boolean} opts.locked Only include external tasks that are currently locked (i.e., they have a lock time and it has not expired). Value may only be `true`, as `false` matches any external task.
     * @param {Boolean} opts.notLocked Only include external tasks that are currently not locked (i.e., they have no lock or it has expired). Value may only be `true`, as `false` matches any external task.
     * @param {Boolean} opts.withRetriesLeft Only include external tasks that have a positive (&gt; 0) number of retries (or `null`). Value may only be `true`, as `false` matches any external task.
     * @param {Boolean} opts.noRetriesLeft Only include external tasks that have 0 retries. Value may only be `true`, as `false` matches any external task.
     * @param {Date} opts.lockExpirationAfter Restrict to external tasks that have a lock that expires after a given date. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
     * @param {Date} opts.lockExpirationBefore Restrict to external tasks that have a lock that expires before a given date. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
     * @param {String} opts.activityId Filter by the id of the activity that an external task is created for.
     * @param {String} opts.activityIdIn Filter by the comma-separated list of ids of the activities that an external task is created for.
     * @param {String} opts.executionId Filter by the id of the execution that an external task belongs to.
     * @param {String} opts.processInstanceId Filter by the id of the process instance that an external task belongs to.
     * @param {String} opts.processInstanceIdIn Filter by a comma-separated list of process instance ids that an external task may belong to.
     * @param {String} opts.processDefinitionId Filter by the id of the process definition that an external task belongs to.
     * @param {String} opts.tenantIdIn Filter by a comma-separated list of tenant ids. An external task must have one of the given tenant ids.
     * @param {Boolean} opts.active Only include active tasks. Value may only be `true`, as `false` matches any external task.
     * @param {Boolean} opts.suspended Only include suspended tasks. Value may only be `true`, as `false` matches any external task.
     * @param {Number} opts.priorityHigherThanOrEquals Only include jobs with a priority higher than or equal to the given value. Value must be a valid `long` value.
     * @param {Number} opts.priorityLowerThanOrEquals Only include jobs with a priority lower than or equal to the given value. Value must be a valid `long` value.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CountResultDto} and HTTP response
     */
    getExternalTasksCountWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'externalTaskId': opts['externalTaskId'],
        'externalTaskIdIn': opts['externalTaskIdIn'],
        'topicName': opts['topicName'],
        'workerId': opts['workerId'],
        'locked': opts['locked'],
        'notLocked': opts['notLocked'],
        'withRetriesLeft': opts['withRetriesLeft'],
        'noRetriesLeft': opts['noRetriesLeft'],
        'lockExpirationAfter': opts['lockExpirationAfter'],
        'lockExpirationBefore': opts['lockExpirationBefore'],
        'activityId': opts['activityId'],
        'activityIdIn': opts['activityIdIn'],
        'executionId': opts['executionId'],
        'processInstanceId': opts['processInstanceId'],
        'processInstanceIdIn': opts['processInstanceIdIn'],
        'processDefinitionId': opts['processDefinitionId'],
        'tenantIdIn': opts['tenantIdIn'],
        'active': opts['active'],
        'suspended': opts['suspended'],
        'priorityHigherThanOrEquals': opts['priorityHigherThanOrEquals'],
        'priorityLowerThanOrEquals': opts['priorityLowerThanOrEquals']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CountResultDto;
      return this.apiClient.callApi(
        '/external-task/count', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Queries for the number of external tasks that fulfill given parameters. Takes the same parameters as the [Get External Tasks](https://docs.camunda.org/manual/7.14/reference/rest/external-task/get-query/) method.
     * @param {Object} opts Optional parameters
     * @param {String} opts.externalTaskId Filter by an external task's id.
     * @param {String} opts.externalTaskIdIn Filter by the comma-separated list of external task ids.
     * @param {String} opts.topicName Filter by an external task topic.
     * @param {String} opts.workerId Filter by the id of the worker that the task was most recently locked by.
     * @param {Boolean} opts.locked Only include external tasks that are currently locked (i.e., they have a lock time and it has not expired). Value may only be `true`, as `false` matches any external task.
     * @param {Boolean} opts.notLocked Only include external tasks that are currently not locked (i.e., they have no lock or it has expired). Value may only be `true`, as `false` matches any external task.
     * @param {Boolean} opts.withRetriesLeft Only include external tasks that have a positive (&gt; 0) number of retries (or `null`). Value may only be `true`, as `false` matches any external task.
     * @param {Boolean} opts.noRetriesLeft Only include external tasks that have 0 retries. Value may only be `true`, as `false` matches any external task.
     * @param {Date} opts.lockExpirationAfter Restrict to external tasks that have a lock that expires after a given date. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
     * @param {Date} opts.lockExpirationBefore Restrict to external tasks that have a lock that expires before a given date. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
     * @param {String} opts.activityId Filter by the id of the activity that an external task is created for.
     * @param {String} opts.activityIdIn Filter by the comma-separated list of ids of the activities that an external task is created for.
     * @param {String} opts.executionId Filter by the id of the execution that an external task belongs to.
     * @param {String} opts.processInstanceId Filter by the id of the process instance that an external task belongs to.
     * @param {String} opts.processInstanceIdIn Filter by a comma-separated list of process instance ids that an external task may belong to.
     * @param {String} opts.processDefinitionId Filter by the id of the process definition that an external task belongs to.
     * @param {String} opts.tenantIdIn Filter by a comma-separated list of tenant ids. An external task must have one of the given tenant ids.
     * @param {Boolean} opts.active Only include active tasks. Value may only be `true`, as `false` matches any external task.
     * @param {Boolean} opts.suspended Only include suspended tasks. Value may only be `true`, as `false` matches any external task.
     * @param {Number} opts.priorityHigherThanOrEquals Only include jobs with a priority higher than or equal to the given value. Value must be a valid `long` value.
     * @param {Number} opts.priorityLowerThanOrEquals Only include jobs with a priority lower than or equal to the given value. Value must be a valid `long` value.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CountResultDto}
     */
    getExternalTasksCount(opts) {
      return this.getExternalTasksCountWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Queries for distinct topic names of external tasks that fulfill given parameters. Query can be restricted to only tasks with retries left, tasks that are locked, or tasks that are unlocked. The parameters withLockedTasks and withUnlockedTasks are exclusive. Setting them both to true will return an empty list. Providing no parameters will return a list of all distinct topic names with external tasks.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.withLockedTasks Only include external tasks that are currently locked (i.e., they have a lock time and it has not expired). Value may only be `true`, as `false` matches any external task.
     * @param {Boolean} opts.withUnlockedTasks Only include external tasks that are currently not locked (i.e., they have no lock or it has expired). Value may only be `true`, as `false` matches any external task.
     * @param {Boolean} opts.withRetriesLeft Only include external tasks that have a positive (&gt; 0) number of retries (or `null`). Value may only be `true`, as `false` matches any external task.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<String>} and HTTP response
     */
    getTopicNamesWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'withLockedTasks': opts['withLockedTasks'],
        'withUnlockedTasks': opts['withUnlockedTasks'],
        'withRetriesLeft': opts['withRetriesLeft']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/external-task/topic-names', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Queries for distinct topic names of external tasks that fulfill given parameters. Query can be restricted to only tasks with retries left, tasks that are locked, or tasks that are unlocked. The parameters withLockedTasks and withUnlockedTasks are exclusive. Setting them both to true will return an empty list. Providing no parameters will return a list of all distinct topic names with external tasks.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.withLockedTasks Only include external tasks that are currently locked (i.e., they have a lock time and it has not expired). Value may only be `true`, as `false` matches any external task.
     * @param {Boolean} opts.withUnlockedTasks Only include external tasks that are currently not locked (i.e., they have no lock or it has expired). Value may only be `true`, as `false` matches any external task.
     * @param {Boolean} opts.withRetriesLeft Only include external tasks that have a positive (&gt; 0) number of retries (or `null`). Value may only be `true`, as `false` matches any external task.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<String>}
     */
    getTopicNames(opts) {
      return this.getTopicNamesWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Reports a business error in the context of a running external task by id. The error code must be specified to identify the BPMN error handler.
     * @param {String} id The id of the external task in which context a BPMN error is reported.
     * @param {Object} opts Optional parameters
     * @param {module:model/ExternalTaskBpmnError} opts.externalTaskBpmnError 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    handleExternalTaskBpmnErrorWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = opts['externalTaskBpmnError'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling handleExternalTaskBpmnError");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/external-task/{id}/bpmnError', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Reports a business error in the context of a running external task by id. The error code must be specified to identify the BPMN error handler.
     * @param {String} id The id of the external task in which context a BPMN error is reported.
     * @param {Object} opts Optional parameters
     * @param {module:model/ExternalTaskBpmnError} opts.externalTaskBpmnError 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    handleExternalTaskBpmnError(id, opts) {
      return this.handleExternalTaskBpmnErrorWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Reports a failure to execute an external task by id. A number of retries and a timeout until the task can be retried can be specified. If retries are set to 0, an incident for this task is created.
     * @param {String} id The id of the external task to report a failure for.
     * @param {Object} opts Optional parameters
     * @param {module:model/ExternalTaskFailureDto} opts.externalTaskFailureDto 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    handleFailureWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = opts['externalTaskFailureDto'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling handleFailure");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/external-task/{id}/failure', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Reports a failure to execute an external task by id. A number of retries and a timeout until the task can be retried can be specified. If retries are set to 0, an incident for this task is created.
     * @param {String} id The id of the external task to report a failure for.
     * @param {Object} opts Optional parameters
     * @param {module:model/ExternalTaskFailureDto} opts.externalTaskFailureDto 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    handleFailure(id, opts) {
      return this.handleFailureWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Queries for external tasks that fulfill given parameters in the form of a JSON object.  This method is slightly more powerful than the [Get External Tasks](https://docs.camunda.org/manual/7.14/reference/rest/external-task/get-query/) method because it allows to specify a hierarchical result sorting.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.firstResult Pagination of results. Specifies the index of the first result to return.
     * @param {Number} opts.maxResults Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
     * @param {module:model/ExternalTaskQueryDto} opts.externalTaskQueryDto 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/ExternalTaskDto>} and HTTP response
     */
    queryExternalTasksWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['externalTaskQueryDto'];

      let pathParams = {
      };
      let queryParams = {
        'firstResult': opts['firstResult'],
        'maxResults': opts['maxResults']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [ExternalTaskDto];
      return this.apiClient.callApi(
        '/external-task', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Queries for external tasks that fulfill given parameters in the form of a JSON object.  This method is slightly more powerful than the [Get External Tasks](https://docs.camunda.org/manual/7.14/reference/rest/external-task/get-query/) method because it allows to specify a hierarchical result sorting.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.firstResult Pagination of results. Specifies the index of the first result to return.
     * @param {Number} opts.maxResults Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
     * @param {module:model/ExternalTaskQueryDto} opts.externalTaskQueryDto 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/ExternalTaskDto>}
     */
    queryExternalTasks(opts) {
      return this.queryExternalTasksWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Queries for the number of external tasks that fulfill given parameters. This method takes the same message body as the [Get External Tasks (POST)](https://docs.camunda.org/manual/7.14/reference/rest/external-task/post-query/) method.
     * @param {Object} opts Optional parameters
     * @param {module:model/ExternalTaskQueryDto} opts.externalTaskQueryDto 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CountResultDto} and HTTP response
     */
    queryExternalTasksCountWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['externalTaskQueryDto'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CountResultDto;
      return this.apiClient.callApi(
        '/external-task/count', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Queries for the number of external tasks that fulfill given parameters. This method takes the same message body as the [Get External Tasks (POST)](https://docs.camunda.org/manual/7.14/reference/rest/external-task/post-query/) method.
     * @param {Object} opts Optional parameters
     * @param {module:model/ExternalTaskQueryDto} opts.externalTaskQueryDto 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CountResultDto}
     */
    queryExternalTasksCount(opts) {
      return this.queryExternalTasksCountWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Sets the priority of an existing external task by id. The default value of a priority is 0.
     * @param {String} id The id of the external task to set the priority for.
     * @param {Object} opts Optional parameters
     * @param {module:model/PriorityDto} opts.priorityDto 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    setExternalTaskResourcePriorityWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = opts['priorityDto'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling setExternalTaskResourcePriority");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/external-task/{id}/priority', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Sets the priority of an existing external task by id. The default value of a priority is 0.
     * @param {String} id The id of the external task to set the priority for.
     * @param {Object} opts Optional parameters
     * @param {module:model/PriorityDto} opts.priorityDto 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    setExternalTaskResourcePriority(id, opts) {
      return this.setExternalTaskResourcePriorityWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Sets the number of retries left to execute an external task by id. If retries are set to 0, an  incident is created.
     * @param {String} id The id of the external task to set the number of retries for.
     * @param {Object} opts Optional parameters
     * @param {module:model/RetriesDto} opts.retriesDto 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    setExternalTaskResourceRetriesWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = opts['retriesDto'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling setExternalTaskResourceRetries");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/external-task/{id}/retries', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Sets the number of retries left to execute an external task by id. If retries are set to 0, an  incident is created.
     * @param {String} id The id of the external task to set the number of retries for.
     * @param {Object} opts Optional parameters
     * @param {module:model/RetriesDto} opts.retriesDto 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    setExternalTaskResourceRetries(id, opts) {
      return this.setExternalTaskResourceRetriesWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Sets the number of retries left to execute external tasks by id synchronously. If retries are set to 0,  an incident is created.
     * @param {Object} opts Optional parameters
     * @param {module:model/SetRetriesForExternalTasksDto} opts.setRetriesForExternalTasksDto 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    setExternalTaskRetriesWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['setRetriesForExternalTasksDto'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/external-task/retries', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Sets the number of retries left to execute external tasks by id synchronously. If retries are set to 0,  an incident is created.
     * @param {Object} opts Optional parameters
     * @param {module:model/SetRetriesForExternalTasksDto} opts.setRetriesForExternalTasksDto 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    setExternalTaskRetries(opts) {
      return this.setExternalTaskRetriesWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Sets the number of retries left to execute external tasks by id asynchronously. If retries are set to 0, an incident is created.
     * @param {Object} opts Optional parameters
     * @param {module:model/SetRetriesForExternalTasksDto} opts.setRetriesForExternalTasksDto 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/BatchDto} and HTTP response
     */
    setExternalTaskRetriesAsyncOperationWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['setRetriesForExternalTasksDto'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BatchDto;
      return this.apiClient.callApi(
        '/external-task/retries-async', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Sets the number of retries left to execute external tasks by id asynchronously. If retries are set to 0, an incident is created.
     * @param {Object} opts Optional parameters
     * @param {module:model/SetRetriesForExternalTasksDto} opts.setRetriesForExternalTasksDto 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/BatchDto}
     */
    setExternalTaskRetriesAsyncOperation(opts) {
      return this.setExternalTaskRetriesAsyncOperationWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Unlocks an external task by id. Clears the task's lock expiration time and worker id.
     * @param {String} id The id of the external task to unlock.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    unlockWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling unlock");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/external-task/{id}/unlock', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Unlocks an external task by id. Clears the task's lock expiration time and worker id.
     * @param {String} id The id of the external task to unlock.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    unlock(id) {
      return this.unlockWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
