/**
 * Camunda BPM REST API
 * OpenApi Spec for Camunda BPM REST API.
 *
 * The version of the OpenAPI document: 7.14.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ExceptionDto from '../model/ExceptionDto';
import IdentityLinkDto from '../model/IdentityLinkDto';

/**
* TaskIdentityLink service.
* @module camunda-jssdk/TaskIdentityLinkApi
* @version 7.14.0
*/
export default class TaskIdentityLinkApi {

    /**
    * Constructs a new TaskIdentityLinkApi. 
    * @alias module:camunda-jssdk/TaskIdentityLinkApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Adds an identity link to a task by id. Can be used to link any user or group to a task and specify a relation.
     * @param {String} id The id of the task to add a link to.
     * @param {Object} opts Optional parameters
     * @param {module:model/IdentityLinkDto} opts.identityLinkDto 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    addIdentityLinkWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = opts['identityLinkDto'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling addIdentityLink");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/task/{id}/identity-links', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Adds an identity link to a task by id. Can be used to link any user or group to a task and specify a relation.
     * @param {String} id The id of the task to add a link to.
     * @param {Object} opts Optional parameters
     * @param {module:model/IdentityLinkDto} opts.identityLinkDto 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    addIdentityLink(id, opts) {
      return this.addIdentityLinkWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Removes an identity link from a task by id
     * @param {String} id The id of the task to remove a link from.
     * @param {Object} opts Optional parameters
     * @param {module:model/IdentityLinkDto} opts.identityLinkDto 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteIdentityLinkWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = opts['identityLinkDto'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteIdentityLink");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/task/{id}/identity-links/delete', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Removes an identity link from a task by id
     * @param {String} id The id of the task to remove a link from.
     * @param {Object} opts Optional parameters
     * @param {module:model/IdentityLinkDto} opts.identityLinkDto 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteIdentityLink(id, opts) {
      return this.deleteIdentityLinkWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Gets the identity links for a task by id, which are the users and groups that are in *some* relation to it (including assignee and owner).
     * @param {String} id The id of the task to retrieve the identity links for.
     * @param {Object} opts Optional parameters
     * @param {String} opts.type Filter by the type of links to include.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/IdentityLinkDto>} and HTTP response
     */
    getIdentityLinksWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getIdentityLinks");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'type': opts['type']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [IdentityLinkDto];
      return this.apiClient.callApi(
        '/task/{id}/identity-links', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Gets the identity links for a task by id, which are the users and groups that are in *some* relation to it (including assignee and owner).
     * @param {String} id The id of the task to retrieve the identity links for.
     * @param {Object} opts Optional parameters
     * @param {String} opts.type Filter by the type of links to include.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/IdentityLinkDto>}
     */
    getIdentityLinks(id, opts) {
      return this.getIdentityLinksWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
