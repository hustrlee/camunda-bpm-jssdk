/**
 * Camunda BPM REST API
 * OpenApi Spec for Camunda BPM REST API.
 *
 * The version of the OpenAPI document: 7.14.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.CamundaBpmRestApi);
  }
}(this, function(expect, CamundaBpmRestApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new CamundaBpmRestApi.ProcessInstanceApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ProcessInstanceApi', function() {
    describe('deleteAsyncHistoricQueryBased', function() {
      it('should call deleteAsyncHistoricQueryBased successfully', function(done) {
        //uncomment below and update the code to test deleteAsyncHistoricQueryBased
        //instance.deleteAsyncHistoricQueryBased(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteProcessInstance', function() {
      it('should call deleteProcessInstance successfully', function(done) {
        //uncomment below and update the code to test deleteProcessInstance
        //instance.deleteProcessInstance(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteProcessInstanceVariable', function() {
      it('should call deleteProcessInstanceVariable successfully', function(done) {
        //uncomment below and update the code to test deleteProcessInstanceVariable
        //instance.deleteProcessInstanceVariable(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteProcessInstancesAsyncOperation', function() {
      it('should call deleteProcessInstancesAsyncOperation successfully', function(done) {
        //uncomment below and update the code to test deleteProcessInstancesAsyncOperation
        //instance.deleteProcessInstancesAsyncOperation(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getActivityInstanceTree', function() {
      it('should call getActivityInstanceTree successfully', function(done) {
        //uncomment below and update the code to test getActivityInstanceTree
        //instance.getActivityInstanceTree(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getProcessInstance', function() {
      it('should call getProcessInstance successfully', function(done) {
        //uncomment below and update the code to test getProcessInstance
        //instance.getProcessInstance(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getProcessInstanceVariable', function() {
      it('should call getProcessInstanceVariable successfully', function(done) {
        //uncomment below and update the code to test getProcessInstanceVariable
        //instance.getProcessInstanceVariable(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getProcessInstanceVariableBinary', function() {
      it('should call getProcessInstanceVariableBinary successfully', function(done) {
        //uncomment below and update the code to test getProcessInstanceVariableBinary
        //instance.getProcessInstanceVariableBinary(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getProcessInstanceVariables', function() {
      it('should call getProcessInstanceVariables successfully', function(done) {
        //uncomment below and update the code to test getProcessInstanceVariables
        //instance.getProcessInstanceVariables(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getProcessInstances', function() {
      it('should call getProcessInstances successfully', function(done) {
        //uncomment below and update the code to test getProcessInstances
        //instance.getProcessInstances(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getProcessInstancesCount', function() {
      it('should call getProcessInstancesCount successfully', function(done) {
        //uncomment below and update the code to test getProcessInstancesCount
        //instance.getProcessInstancesCount(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('modifyProcessInstance', function() {
      it('should call modifyProcessInstance successfully', function(done) {
        //uncomment below and update the code to test modifyProcessInstance
        //instance.modifyProcessInstance(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('modifyProcessInstanceAsyncOperation', function() {
      it('should call modifyProcessInstanceAsyncOperation successfully', function(done) {
        //uncomment below and update the code to test modifyProcessInstanceAsyncOperation
        //instance.modifyProcessInstanceAsyncOperation(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('modifyProcessInstanceVariables', function() {
      it('should call modifyProcessInstanceVariables successfully', function(done) {
        //uncomment below and update the code to test modifyProcessInstanceVariables
        //instance.modifyProcessInstanceVariables(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('queryProcessInstances', function() {
      it('should call queryProcessInstances successfully', function(done) {
        //uncomment below and update the code to test queryProcessInstances
        //instance.queryProcessInstances(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('queryProcessInstancesCount', function() {
      it('should call queryProcessInstancesCount successfully', function(done) {
        //uncomment below and update the code to test queryProcessInstancesCount
        //instance.queryProcessInstancesCount(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('setProcessInstanceVariable', function() {
      it('should call setProcessInstanceVariable successfully', function(done) {
        //uncomment below and update the code to test setProcessInstanceVariable
        //instance.setProcessInstanceVariable(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('setProcessInstanceVariableBinary', function() {
      it('should call setProcessInstanceVariableBinary successfully', function(done) {
        //uncomment below and update the code to test setProcessInstanceVariableBinary
        //instance.setProcessInstanceVariableBinary(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('setRetriesByProcess', function() {
      it('should call setRetriesByProcess successfully', function(done) {
        //uncomment below and update the code to test setRetriesByProcess
        //instance.setRetriesByProcess(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('setRetriesByProcessHistoricQueryBased', function() {
      it('should call setRetriesByProcessHistoricQueryBased successfully', function(done) {
        //uncomment below and update the code to test setRetriesByProcessHistoricQueryBased
        //instance.setRetriesByProcessHistoricQueryBased(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('setVariablesAsyncOperation', function() {
      it('should call setVariablesAsyncOperation successfully', function(done) {
        //uncomment below and update the code to test setVariablesAsyncOperation
        //instance.setVariablesAsyncOperation(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateSuspensionState', function() {
      it('should call updateSuspensionState successfully', function(done) {
        //uncomment below and update the code to test updateSuspensionState
        //instance.updateSuspensionState(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateSuspensionStateAsyncOperation', function() {
      it('should call updateSuspensionStateAsyncOperation successfully', function(done) {
        //uncomment below and update the code to test updateSuspensionStateAsyncOperation
        //instance.updateSuspensionStateAsyncOperation(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateSuspensionStateById', function() {
      it('should call updateSuspensionStateById successfully', function(done) {
        //uncomment below and update the code to test updateSuspensionStateById
        //instance.updateSuspensionStateById(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
