/**
 * Camunda BPM REST API
 * OpenApi Spec for Camunda BPM REST API.
 *
 * The version of the OpenAPI document: 7.14.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.CamundaBpmRestApi);
  }
}(this, function(expect, CamundaBpmRestApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new CamundaBpmRestApi.ProcessDefinitionApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ProcessDefinitionApi', function() {
    describe('deleteProcessDefinition', function() {
      it('should call deleteProcessDefinition successfully', function(done) {
        //uncomment below and update the code to test deleteProcessDefinition
        //instance.deleteProcessDefinition(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteProcessDefinitionsByKey', function() {
      it('should call deleteProcessDefinitionsByKey successfully', function(done) {
        //uncomment below and update the code to test deleteProcessDefinitionsByKey
        //instance.deleteProcessDefinitionsByKey(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteProcessDefinitionsByKeyAndTenantId', function() {
      it('should call deleteProcessDefinitionsByKeyAndTenantId successfully', function(done) {
        //uncomment below and update the code to test deleteProcessDefinitionsByKeyAndTenantId
        //instance.deleteProcessDefinitionsByKeyAndTenantId(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getActivityStatistics', function() {
      it('should call getActivityStatistics successfully', function(done) {
        //uncomment below and update the code to test getActivityStatistics
        //instance.getActivityStatistics(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getActivityStatisticsByProcessDefinitionKey', function() {
      it('should call getActivityStatisticsByProcessDefinitionKey successfully', function(done) {
        //uncomment below and update the code to test getActivityStatisticsByProcessDefinitionKey
        //instance.getActivityStatisticsByProcessDefinitionKey(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getActivityStatisticsByProcessDefinitionKeyAndTenantId', function() {
      it('should call getActivityStatisticsByProcessDefinitionKeyAndTenantId successfully', function(done) {
        //uncomment below and update the code to test getActivityStatisticsByProcessDefinitionKeyAndTenantId
        //instance.getActivityStatisticsByProcessDefinitionKeyAndTenantId(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getDeployedStartForm', function() {
      it('should call getDeployedStartForm successfully', function(done) {
        //uncomment below and update the code to test getDeployedStartForm
        //instance.getDeployedStartForm(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getDeployedStartFormByKey', function() {
      it('should call getDeployedStartFormByKey successfully', function(done) {
        //uncomment below and update the code to test getDeployedStartFormByKey
        //instance.getDeployedStartFormByKey(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getDeployedStartFormByKeyAndTenantId', function() {
      it('should call getDeployedStartFormByKeyAndTenantId successfully', function(done) {
        //uncomment below and update the code to test getDeployedStartFormByKeyAndTenantId
        //instance.getDeployedStartFormByKeyAndTenantId(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getLatestProcessDefinitionByTenantId', function() {
      it('should call getLatestProcessDefinitionByTenantId successfully', function(done) {
        //uncomment below and update the code to test getLatestProcessDefinitionByTenantId
        //instance.getLatestProcessDefinitionByTenantId(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getProcessDefinition', function() {
      it('should call getProcessDefinition successfully', function(done) {
        //uncomment below and update the code to test getProcessDefinition
        //instance.getProcessDefinition(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getProcessDefinitionBpmn20Xml', function() {
      it('should call getProcessDefinitionBpmn20Xml successfully', function(done) {
        //uncomment below and update the code to test getProcessDefinitionBpmn20Xml
        //instance.getProcessDefinitionBpmn20Xml(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getProcessDefinitionBpmn20XmlByKey', function() {
      it('should call getProcessDefinitionBpmn20XmlByKey successfully', function(done) {
        //uncomment below and update the code to test getProcessDefinitionBpmn20XmlByKey
        //instance.getProcessDefinitionBpmn20XmlByKey(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getProcessDefinitionBpmn20XmlByKeyAndTenantId', function() {
      it('should call getProcessDefinitionBpmn20XmlByKeyAndTenantId successfully', function(done) {
        //uncomment below and update the code to test getProcessDefinitionBpmn20XmlByKeyAndTenantId
        //instance.getProcessDefinitionBpmn20XmlByKeyAndTenantId(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getProcessDefinitionByKey', function() {
      it('should call getProcessDefinitionByKey successfully', function(done) {
        //uncomment below and update the code to test getProcessDefinitionByKey
        //instance.getProcessDefinitionByKey(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getProcessDefinitionDiagram', function() {
      it('should call getProcessDefinitionDiagram successfully', function(done) {
        //uncomment below and update the code to test getProcessDefinitionDiagram
        //instance.getProcessDefinitionDiagram(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getProcessDefinitionDiagramByKey', function() {
      it('should call getProcessDefinitionDiagramByKey successfully', function(done) {
        //uncomment below and update the code to test getProcessDefinitionDiagramByKey
        //instance.getProcessDefinitionDiagramByKey(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getProcessDefinitionDiagramByKeyAndTenantId', function() {
      it('should call getProcessDefinitionDiagramByKeyAndTenantId successfully', function(done) {
        //uncomment below and update the code to test getProcessDefinitionDiagramByKeyAndTenantId
        //instance.getProcessDefinitionDiagramByKeyAndTenantId(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getProcessDefinitionStatistics', function() {
      it('should call getProcessDefinitionStatistics successfully', function(done) {
        //uncomment below and update the code to test getProcessDefinitionStatistics
        //instance.getProcessDefinitionStatistics(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getProcessDefinitions', function() {
      it('should call getProcessDefinitions successfully', function(done) {
        //uncomment below and update the code to test getProcessDefinitions
        //instance.getProcessDefinitions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getProcessDefinitionsCount', function() {
      it('should call getProcessDefinitionsCount successfully', function(done) {
        //uncomment below and update the code to test getProcessDefinitionsCount
        //instance.getProcessDefinitionsCount(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getRenderedStartForm', function() {
      it('should call getRenderedStartForm successfully', function(done) {
        //uncomment below and update the code to test getRenderedStartForm
        //instance.getRenderedStartForm(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getRenderedStartFormByKey', function() {
      it('should call getRenderedStartFormByKey successfully', function(done) {
        //uncomment below and update the code to test getRenderedStartFormByKey
        //instance.getRenderedStartFormByKey(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getRenderedStartFormByKeyAndTenantId', function() {
      it('should call getRenderedStartFormByKeyAndTenantId successfully', function(done) {
        //uncomment below and update the code to test getRenderedStartFormByKeyAndTenantId
        //instance.getRenderedStartFormByKeyAndTenantId(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getStartForm', function() {
      it('should call getStartForm successfully', function(done) {
        //uncomment below and update the code to test getStartForm
        //instance.getStartForm(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getStartFormByKey', function() {
      it('should call getStartFormByKey successfully', function(done) {
        //uncomment below and update the code to test getStartFormByKey
        //instance.getStartFormByKey(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getStartFormByKeyAndTenantId', function() {
      it('should call getStartFormByKeyAndTenantId successfully', function(done) {
        //uncomment below and update the code to test getStartFormByKeyAndTenantId
        //instance.getStartFormByKeyAndTenantId(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getStartFormVariables', function() {
      it('should call getStartFormVariables successfully', function(done) {
        //uncomment below and update the code to test getStartFormVariables
        //instance.getStartFormVariables(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getStartFormVariablesByKey', function() {
      it('should call getStartFormVariablesByKey successfully', function(done) {
        //uncomment below and update the code to test getStartFormVariablesByKey
        //instance.getStartFormVariablesByKey(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getStartFormVariablesByKeyAndTenantId', function() {
      it('should call getStartFormVariablesByKeyAndTenantId successfully', function(done) {
        //uncomment below and update the code to test getStartFormVariablesByKeyAndTenantId
        //instance.getStartFormVariablesByKeyAndTenantId(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('restartProcessInstance', function() {
      it('should call restartProcessInstance successfully', function(done) {
        //uncomment below and update the code to test restartProcessInstance
        //instance.restartProcessInstance(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('restartProcessInstanceAsyncOperation', function() {
      it('should call restartProcessInstanceAsyncOperation successfully', function(done) {
        //uncomment below and update the code to test restartProcessInstanceAsyncOperation
        //instance.restartProcessInstanceAsyncOperation(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('startProcessInstance', function() {
      it('should call startProcessInstance successfully', function(done) {
        //uncomment below and update the code to test startProcessInstance
        //instance.startProcessInstance(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('startProcessInstanceByKey', function() {
      it('should call startProcessInstanceByKey successfully', function(done) {
        //uncomment below and update the code to test startProcessInstanceByKey
        //instance.startProcessInstanceByKey(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('startProcessInstanceByKeyAndTenantId', function() {
      it('should call startProcessInstanceByKeyAndTenantId successfully', function(done) {
        //uncomment below and update the code to test startProcessInstanceByKeyAndTenantId
        //instance.startProcessInstanceByKeyAndTenantId(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('submitForm', function() {
      it('should call submitForm successfully', function(done) {
        //uncomment below and update the code to test submitForm
        //instance.submitForm(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('submitFormByKey', function() {
      it('should call submitFormByKey successfully', function(done) {
        //uncomment below and update the code to test submitFormByKey
        //instance.submitFormByKey(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('submitFormByKeyAndTenantId', function() {
      it('should call submitFormByKeyAndTenantId successfully', function(done) {
        //uncomment below and update the code to test submitFormByKeyAndTenantId
        //instance.submitFormByKeyAndTenantId(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateHistoryTimeToLiveByProcessDefinitionId', function() {
      it('should call updateHistoryTimeToLiveByProcessDefinitionId successfully', function(done) {
        //uncomment below and update the code to test updateHistoryTimeToLiveByProcessDefinitionId
        //instance.updateHistoryTimeToLiveByProcessDefinitionId(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateHistoryTimeToLiveByProcessDefinitionKey', function() {
      it('should call updateHistoryTimeToLiveByProcessDefinitionKey successfully', function(done) {
        //uncomment below and update the code to test updateHistoryTimeToLiveByProcessDefinitionKey
        //instance.updateHistoryTimeToLiveByProcessDefinitionKey(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateHistoryTimeToLiveByProcessDefinitionKeyAndTenantId', function() {
      it('should call updateHistoryTimeToLiveByProcessDefinitionKeyAndTenantId successfully', function(done) {
        //uncomment below and update the code to test updateHistoryTimeToLiveByProcessDefinitionKeyAndTenantId
        //instance.updateHistoryTimeToLiveByProcessDefinitionKeyAndTenantId(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateProcessDefinitionSuspensionState', function() {
      it('should call updateProcessDefinitionSuspensionState successfully', function(done) {
        //uncomment below and update the code to test updateProcessDefinitionSuspensionState
        //instance.updateProcessDefinitionSuspensionState(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateProcessDefinitionSuspensionStateById', function() {
      it('should call updateProcessDefinitionSuspensionStateById successfully', function(done) {
        //uncomment below and update the code to test updateProcessDefinitionSuspensionStateById
        //instance.updateProcessDefinitionSuspensionStateById(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateProcessDefinitionSuspensionStateByKey', function() {
      it('should call updateProcessDefinitionSuspensionStateByKey successfully', function(done) {
        //uncomment below and update the code to test updateProcessDefinitionSuspensionStateByKey
        //instance.updateProcessDefinitionSuspensionStateByKey(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateProcessDefinitionSuspensionStateByKeyAndTenantId', function() {
      it('should call updateProcessDefinitionSuspensionStateByKeyAndTenantId successfully', function(done) {
        //uncomment below and update the code to test updateProcessDefinitionSuspensionStateByKeyAndTenantId
        //instance.updateProcessDefinitionSuspensionStateByKeyAndTenantId(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
